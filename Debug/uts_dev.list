
uts_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08009e50  08009e50  00019e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f04  08009f04  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08009f04  08009f04  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f04  08009f04  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f04  08009f04  00019f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f08  08009f08  00019f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08009f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ccc  20000180  0800a08c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003e4c  0800a08c  00023e4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025ef8  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004a19  00000000  00000000  000460a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a60  00000000  00000000  0004aac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001848  00000000  00000000  0004c528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000232f4  00000000  00000000  0004dd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018c7c  00000000  00000000  00071064  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4200  00000000  00000000  00089ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014dee0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006db8  00000000  00000000  0014df5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000180 	.word	0x20000180
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e38 	.word	0x08009e38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000184 	.word	0x20000184
 80001dc:	08009e38 	.word	0x08009e38

080001e0 <vPortSuppressTicksAndSleep>:
   
/* USER CODE END FunctionPrototypes */

/* USER CODE BEGIN VPORT_SUPPORT_TICKS_AND_SLEEP */
__weak void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
  // Generated when configUSE_TICKLESS_IDLE == 2.
  // Function called in tasks.c (in portTASK_FUNCTION).
  // TO BE COMPLETED or TO BE REPLACED by a user one, overriding that weak one.
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr

080001f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b092      	sub	sp, #72	; 0x48
 80001f8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fa:	f000 fb57 	bl	80008ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fe:	f000 f845 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000202:	f000 f901 	bl	8000408 <MX_GPIO_Init>
  MX_RTC_Init();
 8000206:	f000 f8a9 	bl	800035c <MX_RTC_Init>
  MX_USART3_UART_Init();
 800020a:	f000 f8cd 	bl	80003a8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  osKernelInitialize();
 800020e:	f006 fc33 	bl	8006a78 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 8000212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000216:	2224      	movs	r2, #36	; 0x24
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f009 fe03 	bl	8009e26 <memset>
 8000220:	4b14      	ldr	r3, [pc, #80]	; (8000274 <main+0x80>)
 8000222:	627b      	str	r3, [r7, #36]	; 0x24
 8000224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000228:	63bb      	str	r3, [r7, #56]	; 0x38
 800022a:	2318      	movs	r3, #24
 800022c:	63fb      	str	r3, [r7, #60]	; 0x3c
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 256
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800022e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000232:	461a      	mov	r2, r3
 8000234:	2100      	movs	r1, #0
 8000236:	4810      	ldr	r0, [pc, #64]	; (8000278 <main+0x84>)
 8000238:	f006 fc86 	bl	8006b48 <osThreadNew>
 800023c:	4602      	mov	r2, r0
 800023e:	4b0f      	ldr	r3, [pc, #60]	; (800027c <main+0x88>)
 8000240:	601a      	str	r2, [r3, #0]

  /* definition and creation of usbCOMportTask */
  const osThreadAttr_t usbCOMportTask_attributes = {
 8000242:	463b      	mov	r3, r7
 8000244:	2224      	movs	r2, #36	; 0x24
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f009 fdec 	bl	8009e26 <memset>
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <main+0x8c>)
 8000250:	603b      	str	r3, [r7, #0]
 8000252:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000256:	617b      	str	r3, [r7, #20]
 8000258:	2308      	movs	r3, #8
 800025a:	61bb      	str	r3, [r7, #24]
    .name = "usbCOMportTask",
    .priority = (osPriority_t) osPriorityLow,
    .stack_size = 512
  };
  usbCOMportTaskHandle = osThreadNew(usbCOMStartTask, NULL, &usbCOMportTask_attributes);
 800025c:	463b      	mov	r3, r7
 800025e:	461a      	mov	r2, r3
 8000260:	2100      	movs	r1, #0
 8000262:	4808      	ldr	r0, [pc, #32]	; (8000284 <main+0x90>)
 8000264:	f006 fc70 	bl	8006b48 <osThreadNew>
 8000268:	4602      	mov	r2, r0
 800026a:	4b07      	ldr	r3, [pc, #28]	; (8000288 <main+0x94>)
 800026c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800026e:	f006 fc37 	bl	8006ae0 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000272:	e7fe      	b.n	8000272 <main+0x7e>
 8000274:	08009e50 	.word	0x08009e50
 8000278:	0800054d 	.word	0x0800054d
 800027c:	20002e20 	.word	0x20002e20
 8000280:	08009e5c 	.word	0x08009e5c
 8000284:	08000589 	.word	0x08000589
 8000288:	20002ea4 	.word	0x20002ea4

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b0a6      	sub	sp, #152	; 0x98
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000296:	2228      	movs	r2, #40	; 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f009 fdc3 	bl	8009e26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2258      	movs	r2, #88	; 0x58
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f009 fdb5 	bl	8009e26 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80002bc:	2309      	movs	r3, #9
 80002be:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002c4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002ca:	2301      	movs	r3, #1
 80002cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d0:	2302      	movs	r3, #2
 80002d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002f0:	4618      	mov	r0, r3
 80002f2:	f001 fc59 	bl	8001ba8 <HAL_RCC_OscConfig>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002fc:	f000 f978 	bl	80005f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000300:	230f      	movs	r3, #15
 8000302:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000304:	2302      	movs	r3, #2
 8000306:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800030c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000310:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000316:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800031a:	2102      	movs	r1, #2
 800031c:	4618      	mov	r0, r3
 800031e:	f002 fb59 	bl	80029d4 <HAL_RCC_ClockConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000328:	f000 f962 	bl	80005f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 800032c:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <SystemClock_Config+0xcc>)
 800032e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000338:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800033a:	2300      	movs	r3, #0
 800033c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4618      	mov	r0, r3
 8000342:	f002 fdaf 	bl	8002ea4 <HAL_RCCEx_PeriphCLKConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800034c:	f000 f950 	bl	80005f0 <Error_Handler>
  }
}
 8000350:	bf00      	nop
 8000352:	3798      	adds	r7, #152	; 0x98
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	00030004 	.word	0x00030004

0800035c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_RTC_Init+0x44>)
 8000362:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <MX_RTC_Init+0x48>)
 8000364:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_RTC_Init+0x44>)
 8000368:	2200      	movs	r2, #0
 800036a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_RTC_Init+0x44>)
 800036e:	227f      	movs	r2, #127	; 0x7f
 8000370:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_RTC_Init+0x44>)
 8000374:	22ff      	movs	r2, #255	; 0xff
 8000376:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_RTC_Init+0x44>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <MX_RTC_Init+0x44>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_RTC_Init+0x44>)
 8000386:	2200      	movs	r2, #0
 8000388:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_RTC_Init+0x44>)
 800038c:	f002 ffa8 	bl	80032e0 <HAL_RTC_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000396:	f000 f92b 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20002ea8 	.word	0x20002ea8
 80003a4:	40002800 	.word	0x40002800

080003a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <MX_USART3_UART_Init+0x58>)
 80003ae:	4a15      	ldr	r2, [pc, #84]	; (8000404 <MX_USART3_UART_Init+0x5c>)
 80003b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_USART3_UART_Init+0x58>)
 80003b4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_USART3_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_USART3_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_USART3_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_USART3_UART_Init+0x58>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_USART3_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_USART3_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_USART3_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_USART3_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <MX_USART3_UART_Init+0x58>)
 80003ec:	f003 fac0 	bl	8003970 <HAL_UART_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80003f6:	f000 f8fb 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20002e24 	.word	0x20002e24
 8000404:	40004800 	.word	0x40004800

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08c      	sub	sp, #48	; 0x30
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	f107 031c 	add.w	r3, r7, #28
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041e:	4b46      	ldr	r3, [pc, #280]	; (8000538 <MX_GPIO_Init+0x130>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a45      	ldr	r2, [pc, #276]	; (8000538 <MX_GPIO_Init+0x130>)
 8000424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b43      	ldr	r3, [pc, #268]	; (8000538 <MX_GPIO_Init+0x130>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000432:	61bb      	str	r3, [r7, #24]
 8000434:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000436:	4b40      	ldr	r3, [pc, #256]	; (8000538 <MX_GPIO_Init+0x130>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a3f      	ldr	r2, [pc, #252]	; (8000538 <MX_GPIO_Init+0x130>)
 800043c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b3d      	ldr	r3, [pc, #244]	; (8000538 <MX_GPIO_Init+0x130>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044e:	4b3a      	ldr	r3, [pc, #232]	; (8000538 <MX_GPIO_Init+0x130>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a39      	ldr	r2, [pc, #228]	; (8000538 <MX_GPIO_Init+0x130>)
 8000454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b37      	ldr	r3, [pc, #220]	; (8000538 <MX_GPIO_Init+0x130>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000462:	613b      	str	r3, [r7, #16]
 8000464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000466:	4b34      	ldr	r3, [pc, #208]	; (8000538 <MX_GPIO_Init+0x130>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a33      	ldr	r2, [pc, #204]	; (8000538 <MX_GPIO_Init+0x130>)
 800046c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b31      	ldr	r3, [pc, #196]	; (8000538 <MX_GPIO_Init+0x130>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800047e:	4b2e      	ldr	r3, [pc, #184]	; (8000538 <MX_GPIO_Init+0x130>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a2d      	ldr	r2, [pc, #180]	; (8000538 <MX_GPIO_Init+0x130>)
 8000484:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b2b      	ldr	r3, [pc, #172]	; (8000538 <MX_GPIO_Init+0x130>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000496:	4b28      	ldr	r3, [pc, #160]	; (8000538 <MX_GPIO_Init+0x130>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a27      	ldr	r2, [pc, #156]	; (8000538 <MX_GPIO_Init+0x130>)
 800049c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004a0:	6153      	str	r3, [r2, #20]
 80004a2:	4b25      	ldr	r3, [pc, #148]	; (8000538 <MX_GPIO_Init+0x130>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	f244 0181 	movw	r1, #16513	; 0x4081
 80004b4:	4821      	ldr	r0, [pc, #132]	; (800053c <MX_GPIO_Init+0x134>)
 80004b6:	f000 fcbd 	bl	8000e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2140      	movs	r1, #64	; 0x40
 80004be:	4820      	ldr	r0, [pc, #128]	; (8000540 <MX_GPIO_Init+0x138>)
 80004c0:	f000 fcb8 	bl	8000e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80004c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004ca:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <MX_GPIO_Init+0x13c>)
 80004cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	4619      	mov	r1, r3
 80004d8:	481b      	ldr	r0, [pc, #108]	; (8000548 <MX_GPIO_Init+0x140>)
 80004da:	f000 fb21 	bl	8000b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80004de:	f244 0381 	movw	r3, #16513	; 0x4081
 80004e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e4:	2301      	movs	r3, #1
 80004e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ec:	2300      	movs	r3, #0
 80004ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f0:	f107 031c 	add.w	r3, r7, #28
 80004f4:	4619      	mov	r1, r3
 80004f6:	4811      	ldr	r0, [pc, #68]	; (800053c <MX_GPIO_Init+0x134>)
 80004f8:	f000 fb12 	bl	8000b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80004fc:	2340      	movs	r3, #64	; 0x40
 80004fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000500:	2301      	movs	r3, #1
 8000502:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	2300      	movs	r3, #0
 800050a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800050c:	f107 031c 	add.w	r3, r7, #28
 8000510:	4619      	mov	r1, r3
 8000512:	480b      	ldr	r0, [pc, #44]	; (8000540 <MX_GPIO_Init+0x138>)
 8000514:	f000 fb04 	bl	8000b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051c:	2300      	movs	r3, #0
 800051e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000524:	f107 031c 	add.w	r3, r7, #28
 8000528:	4619      	mov	r1, r3
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <MX_GPIO_Init+0x138>)
 800052c:	f000 faf8 	bl	8000b20 <HAL_GPIO_Init>

}
 8000530:	bf00      	nop
 8000532:	3730      	adds	r7, #48	; 0x30
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000
 800053c:	48000400 	.word	0x48000400
 8000540:	48001800 	.word	0x48001800
 8000544:	10110000 	.word	0x10110000
 8000548:	48000800 	.word	0x48000800

0800054c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000554:	f008 ffa2 	bl	800949c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800055e:	4809      	ldr	r0, [pc, #36]	; (8000584 <StartDefaultTask+0x38>)
 8000560:	f000 fc68 	bl	8000e34 <HAL_GPIO_WritePin>
		osDelay(500);
 8000564:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000568:	f006 fb9a 	bl	8006ca0 <osDelay>
		HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <StartDefaultTask+0x38>)
 8000574:	f000 fc5e 	bl	8000e34 <HAL_GPIO_WritePin>
		osDelay(500);
 8000578:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800057c:	f006 fb90 	bl	8006ca0 <osDelay>
		HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000580:	e7ea      	b.n	8000558 <StartDefaultTask+0xc>
 8000582:	bf00      	nop
 8000584:	48000400 	.word	0x48000400

08000588 <usbCOMStartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usbCOMStartTask */
void usbCOMStartTask(void *argument)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN usbCOMStartTask */
  /* Infinite loop */
	HAL_Delay(2000);
 8000590:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000594:	f000 f9c0 	bl	8000918 <HAL_Delay>
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2140      	movs	r1, #64	; 0x40
 800059c:	480a      	ldr	r0, [pc, #40]	; (80005c8 <usbCOMStartTask+0x40>)
 800059e:	f000 fc49 	bl	8000e34 <HAL_GPIO_WritePin>

	uint8_t tr_data[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42};
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	2342      	movs	r3, #66	; 0x42
 80005ae:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	  CDC_Transmit_FS(tr_data, 8);
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	2108      	movs	r1, #8
 80005b6:	4618      	mov	r0, r3
 80005b8:	f009 f82e 	bl	8009618 <CDC_Transmit_FS>
    osDelay(1000);
 80005bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c0:	f006 fb6e 	bl	8006ca0 <osDelay>
  {
 80005c4:	e7f4      	b.n	80005b0 <usbCOMStartTask+0x28>
 80005c6:	bf00      	nop
 80005c8:	48001800 	.word	0x48001800

080005cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a04      	ldr	r2, [pc, #16]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d101      	bne.n	80005e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005de:	f000 f97b 	bl	80008d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40013400 	.word	0x40013400

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <HAL_MspInit+0x4c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a10      	ldr	r2, [pc, #64]	; (800064c <HAL_MspInit+0x4c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <HAL_MspInit+0x4c>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <HAL_MspInit+0x4c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <HAL_MspInit+0x4c>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <HAL_MspInit+0x4c>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	210f      	movs	r1, #15
 800063a:	f06f 0001 	mvn.w	r0, #1
 800063e:	f000 fa45 	bl	8000acc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <HAL_RTC_MspInit+0x44>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d111      	bne.n	8000686 <HAL_RTC_MspInit+0x36>
 8000662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000666:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	fa93 f3a3 	rbit	r3, r3
 800066e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000670:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000672:	fab3 f383 	clz	r3, r3
 8000676:	b2db      	uxtb	r3, r3
 8000678:	461a      	mov	r2, r3
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <HAL_RTC_MspInit+0x48>)
 800067c:	4413      	add	r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	461a      	mov	r2, r3
 8000682:	2301      	movs	r3, #1
 8000684:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40002800 	.word	0x40002800
 8000698:	10908100 	.word	0x10908100

0800069c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a17      	ldr	r2, [pc, #92]	; (8000718 <HAL_UART_MspInit+0x7c>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d128      	bne.n	8000710 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <HAL_UART_MspInit+0x80>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	4a16      	ldr	r2, [pc, #88]	; (800071c <HAL_UART_MspInit+0x80>)
 80006c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006c8:	61d3      	str	r3, [r2, #28]
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <HAL_UART_MspInit+0x80>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <HAL_UART_MspInit+0x80>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a10      	ldr	r2, [pc, #64]	; (800071c <HAL_UART_MspInit+0x80>)
 80006dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006e0:	6153      	str	r3, [r2, #20]
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <HAL_UART_MspInit+0x80>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80006ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000700:	2307      	movs	r3, #7
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <HAL_UART_MspInit+0x84>)
 800070c:	f000 fa08 	bl	8000b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	; 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40004800 	.word	0x40004800
 800071c:	40021000 	.word	0x40021000
 8000720:	48000c00 	.word	0x48000c00

08000724 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM8 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority ,0); 
 8000734:	2200      	movs	r2, #0
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	202c      	movs	r0, #44	; 0x2c
 800073a:	f000 f9c7 	bl	8000acc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_IRQn); 
 800073e:	202c      	movs	r0, #44	; 0x2c
 8000740:	f000 f9e0 	bl	8000b04 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <HAL_InitTick+0x9c>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a1d      	ldr	r2, [pc, #116]	; (80007c0 <HAL_InitTick+0x9c>)
 800074a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <HAL_InitTick+0x9c>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800075c:	f107 0210 	add.w	r2, r7, #16
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fb6a 	bl	8002e40 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM8 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800076c:	f002 fb46 	bl	8002dfc <HAL_RCC_GetPCLK2Freq>
 8000770:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000774:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <HAL_InitTick+0xa0>)
 8000776:	fba2 2303 	umull	r2, r3, r2, r3
 800077a:	0c9b      	lsrs	r3, r3, #18
 800077c:	3b01      	subs	r3, #1
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <HAL_InitTick+0xa4>)
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <HAL_InitTick+0xa8>)
 8000784:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000 / 1000) - 1;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <HAL_InitTick+0xa4>)
 8000788:	f240 32e7 	movw	r2, #999	; 0x3e7
 800078c:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <HAL_InitTick+0xa4>)
 8000790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000792:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_InitTick+0xa4>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <HAL_InitTick+0xa4>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 80007a0:	4809      	ldr	r0, [pc, #36]	; (80007c8 <HAL_InitTick+0xa4>)
 80007a2:	f002 fe82 	bl	80034aa <HAL_TIM_Base_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d104      	bne.n	80007b6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 80007ac:	4806      	ldr	r0, [pc, #24]	; (80007c8 <HAL_InitTick+0xa4>)
 80007ae:	f002 feb1 	bl	8003514 <HAL_TIM_Base_Start_IT>
 80007b2:	4603      	mov	r3, r0
 80007b4:	e000      	b.n	80007b8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3730      	adds	r7, #48	; 0x30
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40021000 	.word	0x40021000
 80007c4:	431bde83 	.word	0x431bde83
 80007c8:	20002ec8 	.word	0x20002ec8
 80007cc:	40013400 	.word	0x40013400

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <MemManage_Handler+0x4>

080007ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800080a:	f000 fc05 	bl	8001018 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20003be0 	.word	0x20003be0

08000818 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <TIM8_UP_IRQHandler+0x10>)
 800081e:	f002 fea3 	bl	8003568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20002ec8 	.word	0x20002ec8

0800082c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <SystemInit+0x28>)
 8000832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000836:	4a07      	ldr	r2, [pc, #28]	; (8000854 <SystemInit+0x28>)
 8000838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800083c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <SystemInit+0x28>)
 8000842:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000846:	609a      	str	r2, [r3, #8]
#endif
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000890 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800085c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800085e:	e003      	b.n	8000868 <LoopCopyDataInit>

08000860 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000862:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000864:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000866:	3104      	adds	r1, #4

08000868 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <LoopForever+0xa>)
	ldr	r3, =_edata
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <LoopForever+0xe>)
	adds	r2, r0, r1
 800086c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800086e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000870:	d3f6      	bcc.n	8000860 <CopyDataInit>
	ldr	r2, =_sbss
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000874:	e002      	b.n	800087c <LoopFillZerobss>

08000876 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000876:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000878:	f842 3b04 	str.w	r3, [r2], #4

0800087c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <LoopForever+0x16>)
	cmp	r2, r3
 800087e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000880:	d3f9      	bcc.n	8000876 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000882:	f7ff ffd3 	bl	800082c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000886:	f009 fa9f 	bl	8009dc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800088a:	f7ff fcb3 	bl	80001f4 <main>

0800088e <LoopForever>:

LoopForever:
    b LoopForever
 800088e:	e7fe      	b.n	800088e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000890:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000894:	08009f0c 	.word	0x08009f0c
	ldr	r0, =_sdata
 8000898:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800089c:	20000180 	.word	0x20000180
	ldr	r2, =_sbss
 80008a0:	20000180 	.word	0x20000180
	ldr	r3, = _ebss
 80008a4:	20003e4c 	.word	0x20003e4c

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>
	...

080008ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_Init+0x28>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <HAL_Init+0x28>)
 80008b6:	f043 0310 	orr.w	r3, r3, #16
 80008ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008bc:	2003      	movs	r0, #3
 80008be:	f000 f8fa 	bl	8000ab6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f7ff ff2e 	bl	8000724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c8:	f7ff fe9a 	bl	8000600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40022000 	.word	0x40022000

080008d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_IncTick+0x20>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_IncTick+0x24>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <HAL_IncTick+0x24>)
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20002f08 	.word	0x20002f08

08000900 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return uwTick;  
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <HAL_GetTick+0x14>)
 8000906:	681b      	ldr	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	20002f08 	.word	0x20002f08

08000918 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000920:	f7ff ffee 	bl	8000900 <HAL_GetTick>
 8000924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000930:	d005      	beq.n	800093e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_Delay+0x40>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	4413      	add	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800093e:	bf00      	nop
 8000940:	f7ff ffde 	bl	8000900 <HAL_GetTick>
 8000944:	4602      	mov	r2, r0
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	429a      	cmp	r2, r3
 800094e:	d8f7      	bhi.n	8000940 <HAL_Delay+0x28>
  {
  }
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000008 	.word	0x20000008

0800095c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000978:	4013      	ands	r3, r2
 800097a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098e:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	60d3      	str	r3, [r2, #12]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <__NVIC_GetPriorityGrouping+0x18>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	f003 0307 	and.w	r3, r3, #7
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	db0b      	blt.n	80009ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	f003 021f 	and.w	r2, r3, #31
 80009d8:	4907      	ldr	r1, [pc, #28]	; (80009f8 <__NVIC_EnableIRQ+0x38>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	095b      	lsrs	r3, r3, #5
 80009e0:	2001      	movs	r0, #1
 80009e2:	fa00 f202 	lsl.w	r2, r0, r2
 80009e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000e100 	.word	0xe000e100

080009fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	db0a      	blt.n	8000a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	490c      	ldr	r1, [pc, #48]	; (8000a48 <__NVIC_SetPriority+0x4c>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	0112      	lsls	r2, r2, #4
 8000a1c:	b2d2      	uxtb	r2, r2
 8000a1e:	440b      	add	r3, r1
 8000a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a24:	e00a      	b.n	8000a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4908      	ldr	r1, [pc, #32]	; (8000a4c <__NVIC_SetPriority+0x50>)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	3b04      	subs	r3, #4
 8000a34:	0112      	lsls	r2, r2, #4
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	440b      	add	r3, r1
 8000a3a:	761a      	strb	r2, [r3, #24]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000e100 	.word	0xe000e100
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b089      	sub	sp, #36	; 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f1c3 0307 	rsb	r3, r3, #7
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	bf28      	it	cs
 8000a6e:	2304      	movcs	r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3304      	adds	r3, #4
 8000a76:	2b06      	cmp	r3, #6
 8000a78:	d902      	bls.n	8000a80 <NVIC_EncodePriority+0x30>
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3b03      	subs	r3, #3
 8000a7e:	e000      	b.n	8000a82 <NVIC_EncodePriority+0x32>
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	401a      	ands	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a98:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43d9      	mvns	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	4313      	orrs	r3, r2
         );
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3724      	adds	r7, #36	; 0x24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff ff4c 	bl	800095c <__NVIC_SetPriorityGrouping>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ade:	f7ff ff61 	bl	80009a4 <__NVIC_GetPriorityGrouping>
 8000ae2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	68b9      	ldr	r1, [r7, #8]
 8000ae8:	6978      	ldr	r0, [r7, #20]
 8000aea:	f7ff ffb1 	bl	8000a50 <NVIC_EncodePriority>
 8000aee:	4602      	mov	r2, r0
 8000af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af4:	4611      	mov	r1, r2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff80 	bl	80009fc <__NVIC_SetPriority>
}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff54 	bl	80009c0 <__NVIC_EnableIRQ>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b087      	sub	sp, #28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b2e:	e160      	b.n	8000df2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	2101      	movs	r1, #1
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 8152 	beq.w	8000dec <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_Init+0x38>
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b12      	cmp	r3, #18
 8000b56:	d123      	bne.n	8000ba0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	08da      	lsrs	r2, r3, #3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3208      	adds	r2, #8
 8000b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	f003 0307 	and.w	r3, r3, #7
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	220f      	movs	r2, #15
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	691a      	ldr	r2, [r3, #16]
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	08da      	lsrs	r2, r3, #3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3208      	adds	r2, #8
 8000b9a:	6939      	ldr	r1, [r7, #16]
 8000b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2203      	movs	r2, #3
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0203 	and.w	r2, r3, #3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d00b      	beq.n	8000bf4 <HAL_GPIO_Init+0xd4>
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d007      	beq.n	8000bf4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be8:	2b11      	cmp	r3, #17
 8000bea:	d003      	beq.n	8000bf4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	2b12      	cmp	r3, #18
 8000bf2:	d130      	bne.n	8000c56 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	2203      	movs	r2, #3
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	68da      	ldr	r2, [r3, #12]
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	091b      	lsrs	r3, r3, #4
 8000c40:	f003 0201 	and.w	r2, r3, #1
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	2203      	movs	r2, #3
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 80ac 	beq.w	8000dec <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c94:	4b5e      	ldr	r3, [pc, #376]	; (8000e10 <HAL_GPIO_Init+0x2f0>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a5d      	ldr	r2, [pc, #372]	; (8000e10 <HAL_GPIO_Init+0x2f0>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b5b      	ldr	r3, [pc, #364]	; (8000e10 <HAL_GPIO_Init+0x2f0>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cac:	4a59      	ldr	r2, [pc, #356]	; (8000e14 <HAL_GPIO_Init+0x2f4>)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	220f      	movs	r2, #15
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cd6:	d025      	beq.n	8000d24 <HAL_GPIO_Init+0x204>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a4f      	ldr	r2, [pc, #316]	; (8000e18 <HAL_GPIO_Init+0x2f8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d01f      	beq.n	8000d20 <HAL_GPIO_Init+0x200>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a4e      	ldr	r2, [pc, #312]	; (8000e1c <HAL_GPIO_Init+0x2fc>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d019      	beq.n	8000d1c <HAL_GPIO_Init+0x1fc>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a4d      	ldr	r2, [pc, #308]	; (8000e20 <HAL_GPIO_Init+0x300>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d013      	beq.n	8000d18 <HAL_GPIO_Init+0x1f8>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a4c      	ldr	r2, [pc, #304]	; (8000e24 <HAL_GPIO_Init+0x304>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d00d      	beq.n	8000d14 <HAL_GPIO_Init+0x1f4>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a4b      	ldr	r2, [pc, #300]	; (8000e28 <HAL_GPIO_Init+0x308>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d007      	beq.n	8000d10 <HAL_GPIO_Init+0x1f0>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a4a      	ldr	r2, [pc, #296]	; (8000e2c <HAL_GPIO_Init+0x30c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d101      	bne.n	8000d0c <HAL_GPIO_Init+0x1ec>
 8000d08:	2306      	movs	r3, #6
 8000d0a:	e00c      	b.n	8000d26 <HAL_GPIO_Init+0x206>
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	e00a      	b.n	8000d26 <HAL_GPIO_Init+0x206>
 8000d10:	2305      	movs	r3, #5
 8000d12:	e008      	b.n	8000d26 <HAL_GPIO_Init+0x206>
 8000d14:	2304      	movs	r3, #4
 8000d16:	e006      	b.n	8000d26 <HAL_GPIO_Init+0x206>
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e004      	b.n	8000d26 <HAL_GPIO_Init+0x206>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	e002      	b.n	8000d26 <HAL_GPIO_Init+0x206>
 8000d20:	2301      	movs	r3, #1
 8000d22:	e000      	b.n	8000d26 <HAL_GPIO_Init+0x206>
 8000d24:	2300      	movs	r3, #0
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	f002 0203 	and.w	r2, r2, #3
 8000d2c:	0092      	lsls	r2, r2, #2
 8000d2e:	4093      	lsls	r3, r2
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d36:	4937      	ldr	r1, [pc, #220]	; (8000e14 <HAL_GPIO_Init+0x2f4>)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d44:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <HAL_GPIO_Init+0x310>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d68:	4a31      	ldr	r2, [pc, #196]	; (8000e30 <HAL_GPIO_Init+0x310>)
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d6e:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <HAL_GPIO_Init+0x310>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d92:	4a27      	ldr	r2, [pc, #156]	; (8000e30 <HAL_GPIO_Init+0x310>)
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d98:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <HAL_GPIO_Init+0x310>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dbc:	4a1c      	ldr	r2, [pc, #112]	; (8000e30 <HAL_GPIO_Init+0x310>)
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_GPIO_Init+0x310>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <HAL_GPIO_Init+0x310>)
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	3301      	adds	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f47f ae97 	bne.w	8000b30 <HAL_GPIO_Init+0x10>
  }
}
 8000e02:	bf00      	nop
 8000e04:	371c      	adds	r7, #28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010000 	.word	0x40010000
 8000e18:	48000400 	.word	0x48000400
 8000e1c:	48000800 	.word	0x48000800
 8000e20:	48000c00 	.word	0x48000c00
 8000e24:	48001000 	.word	0x48001000
 8000e28:	48001400 	.word	0x48001400
 8000e2c:	48001800 	.word	0x48001800
 8000e30:	40010400 	.word	0x40010400

08000e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
 8000e40:	4613      	mov	r3, r2
 8000e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e44:	787b      	ldrb	r3, [r7, #1]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e4a:	887a      	ldrh	r2, [r7, #2]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e52:	887a      	ldrh	r2, [r7, #2]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e66:	b08b      	sub	sp, #44	; 0x2c
 8000e68:	af06      	add	r7, sp, #24
 8000e6a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e0a6      	b.n	8000fc4 <HAL_PCD_Init+0x160>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d106      	bne.n	8000e90 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f008 fcf8 	bl	8009880 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 f949 	bl	8004134 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	73fb      	strb	r3, [r7, #15]
 8000ea6:	e035      	b.n	8000f14 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	015b      	lsls	r3, r3, #5
 8000eae:	4413      	add	r3, r2
 8000eb0:	3329      	adds	r3, #41	; 0x29
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	015b      	lsls	r3, r3, #5
 8000ebc:	4413      	add	r3, r2
 8000ebe:	3328      	adds	r3, #40	; 0x28
 8000ec0:	7bfa      	ldrb	r2, [r7, #15]
 8000ec2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	b291      	uxth	r1, r2
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	015b      	lsls	r3, r3, #5
 8000ece:	4413      	add	r3, r2
 8000ed0:	3336      	adds	r3, #54	; 0x36
 8000ed2:	460a      	mov	r2, r1
 8000ed4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	015b      	lsls	r3, r3, #5
 8000edc:	4413      	add	r3, r2
 8000ede:	332b      	adds	r3, #43	; 0x2b
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	015b      	lsls	r3, r3, #5
 8000eea:	4413      	add	r3, r2
 8000eec:	3338      	adds	r3, #56	; 0x38
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	015b      	lsls	r3, r3, #5
 8000ef8:	4413      	add	r3, r2
 8000efa:	333c      	adds	r3, #60	; 0x3c
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	3302      	adds	r3, #2
 8000f06:	015b      	lsls	r3, r3, #5
 8000f08:	4413      	add	r3, r2
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	3301      	adds	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d3c4      	bcc.n	8000ea8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	e031      	b.n	8000f88 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	015b      	lsls	r3, r3, #5
 8000f2a:	4413      	add	r3, r2
 8000f2c:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	015b      	lsls	r3, r3, #5
 8000f3a:	4413      	add	r3, r2
 8000f3c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f40:	7bfa      	ldrb	r2, [r7, #15]
 8000f42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	015b      	lsls	r3, r3, #5
 8000f4a:	4413      	add	r3, r2
 8000f4c:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	015b      	lsls	r3, r3, #5
 8000f5a:	4413      	add	r3, r2
 8000f5c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	015b      	lsls	r3, r3, #5
 8000f6a:	4413      	add	r3, r2
 8000f6c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	330a      	adds	r3, #10
 8000f7a:	015b      	lsls	r3, r3, #5
 8000f7c:	4413      	add	r3, r2
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	3301      	adds	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d3c8      	bcc.n	8000f24 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	687e      	ldr	r6, [r7, #4]
 8000f9a:	466d      	mov	r5, sp
 8000f9c:	f106 0410 	add.w	r4, r6, #16
 8000fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa4:	6823      	ldr	r3, [r4, #0]
 8000fa6:	602b      	str	r3, [r5, #0]
 8000fa8:	1d33      	adds	r3, r6, #4
 8000faa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fac:	6838      	ldr	r0, [r7, #0]
 8000fae:	f003 f8de 	bl	800416e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fcc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d101      	bne.n	8000fe2 <HAL_PCD_Start+0x16>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	e016      	b.n	8001010 <HAL_PCD_Start+0x44>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000fea:	2101      	movs	r1, #1
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f008 feb3 	bl	8009d58 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f004 f924 	bl	8005244 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f003 f87f 	bl	8004104 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f004 f918 	bl	800525a <USB_ReadInterrupts>
 800102a:	4603      	mov	r3, r0
 800102c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001034:	d102      	bne.n	800103c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 fae8 	bl	800160c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f004 f90a 	bl	800525a <USB_ReadInterrupts>
 8001046:	4603      	mov	r3, r0
 8001048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001050:	d112      	bne.n	8001078 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800105a:	b29a      	uxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001064:	b292      	uxth	r2, r2
 8001066:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f008 fc7d 	bl	800996a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001070:	2100      	movs	r1, #0
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f8d2 	bl	800121c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f004 f8ec 	bl	800525a <USB_ReadInterrupts>
 8001082:	4603      	mov	r3, r0
 8001084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800108c:	d10b      	bne.n	80010a6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001096:	b29a      	uxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010a0:	b292      	uxth	r2, r2
 80010a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 f8d5 	bl	800525a <USB_ReadInterrupts>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010ba:	d10b      	bne.n	80010d4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010ce:	b292      	uxth	r2, r2
 80010d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f004 f8be 	bl	800525a <USB_ReadInterrupts>
 80010de:	4603      	mov	r3, r0
 80010e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010e8:	d126      	bne.n	8001138 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0204 	bic.w	r2, r2, #4
 80010fc:	b292      	uxth	r2, r2
 80010fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800110a:	b29a      	uxth	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0208 	bic.w	r2, r2, #8
 8001114:	b292      	uxth	r2, r2
 8001116:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f008 fc5e 	bl	80099dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001128:	b29a      	uxth	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001132:	b292      	uxth	r2, r2
 8001134:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f004 f88c 	bl	800525a <USB_ReadInterrupts>
 8001142:	4603      	mov	r3, r0
 8001144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800114c:	d131      	bne.n	80011b2 <HAL_PCD_IRQHandler+0x19a>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001156:	b29a      	uxth	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f042 0208 	orr.w	r2, r2, #8
 8001160:	b292      	uxth	r2, r2
 8001162:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800116e:	b29a      	uxth	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001178:	b292      	uxth	r2, r2
 800117a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001186:	b29a      	uxth	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f042 0204 	orr.w	r2, r2, #4
 8001190:	b292      	uxth	r2, r2
 8001192:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f004 f85d 	bl	800525a <USB_ReadInterrupts>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011aa:	d002      	beq.n	80011b2 <HAL_PCD_IRQHandler+0x19a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f008 fbfb 	bl	80099a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 f84f 	bl	800525a <USB_ReadInterrupts>
 80011bc:	4603      	mov	r3, r0
 80011be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011c6:	d10e      	bne.n	80011e6 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011da:	b292      	uxth	r2, r2
 80011dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f008 fbb4 	bl	800994e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f004 f835 	bl	800525a <USB_ReadInterrupts>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011fa:	d10b      	bne.n	8001214 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001204:	b29a      	uxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800120e:	b292      	uxth	r2, r2
 8001210:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800122e:	2b01      	cmp	r3, #1
 8001230:	d101      	bne.n	8001236 <HAL_PCD_SetAddress+0x1a>
 8001232:	2302      	movs	r3, #2
 8001234:	e013      	b.n	800125e <HAL_PCD_SetAddress+0x42>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	78fa      	ldrb	r2, [r7, #3]
 8001242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	78fa      	ldrb	r2, [r7, #3]
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f003 ffe4 	bl	800521c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	4608      	mov	r0, r1
 8001270:	4611      	mov	r1, r2
 8001272:	461a      	mov	r2, r3
 8001274:	4603      	mov	r3, r0
 8001276:	70fb      	strb	r3, [r7, #3]
 8001278:	460b      	mov	r3, r1
 800127a:	803b      	strh	r3, [r7, #0]
 800127c:	4613      	mov	r3, r2
 800127e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001288:	2b00      	cmp	r3, #0
 800128a:	da0b      	bge.n	80012a4 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	015b      	lsls	r3, r3, #5
 8001294:	3328      	adds	r3, #40	; 0x28
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2201      	movs	r2, #1
 80012a0:	705a      	strb	r2, [r3, #1]
 80012a2:	e00b      	b.n	80012bc <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012a4:	78fb      	ldrb	r3, [r7, #3]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	015b      	lsls	r3, r3, #5
 80012ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80012c8:	883a      	ldrh	r2, [r7, #0]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	78ba      	ldrb	r2, [r7, #2]
 80012d2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	785b      	ldrb	r3, [r3, #1]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d004      	beq.n	80012e6 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80012e6:	78bb      	ldrb	r3, [r7, #2]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d102      	bne.n	80012f2 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <HAL_PCD_EP_Open+0x9a>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e00e      	b.n	800131e <HAL_PCD_EP_Open+0xb8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68f9      	ldr	r1, [r7, #12]
 800130e:	4618      	mov	r0, r3
 8001310:	f002 ff52 	bl	80041b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800131c:	7afb      	ldrb	r3, [r7, #11]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	460b      	mov	r3, r1
 8001330:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001332:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001336:	2b00      	cmp	r3, #0
 8001338:	da0b      	bge.n	8001352 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800133a:	78fb      	ldrb	r3, [r7, #3]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	015b      	lsls	r3, r3, #5
 8001342:	3328      	adds	r3, #40	; 0x28
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2201      	movs	r2, #1
 800134e:	705a      	strb	r2, [r3, #1]
 8001350:	e00b      	b.n	800136a <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	015b      	lsls	r3, r3, #5
 800135a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2200      	movs	r2, #0
 8001368:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	b2da      	uxtb	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800137c:	2b01      	cmp	r3, #1
 800137e:	d101      	bne.n	8001384 <HAL_PCD_EP_Close+0x5e>
 8001380:	2302      	movs	r3, #2
 8001382:	e00e      	b.n	80013a2 <HAL_PCD_EP_Close+0x7c>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68f9      	ldr	r1, [r7, #12]
 8001392:	4618      	mov	r0, r3
 8001394:	f003 fa04 	bl	80047a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	460b      	mov	r3, r1
 80013b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013ba:	7afb      	ldrb	r3, [r7, #11]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	015b      	lsls	r3, r3, #5
 80013c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4413      	add	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2200      	movs	r2, #0
 80013e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013e4:	7afb      	ldrb	r3, [r7, #11]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013f0:	7afb      	ldrb	r3, [r7, #11]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d106      	bne.n	8001408 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6979      	ldr	r1, [r7, #20]
 8001400:	4618      	mov	r0, r3
 8001402:	f003 fb63 	bl	8004acc <USB_EPStartXfer>
 8001406:	e005      	b.n	8001414 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6979      	ldr	r1, [r7, #20]
 800140e:	4618      	mov	r0, r3
 8001410:	f003 fb5c 	bl	8004acc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	460b      	mov	r3, r1
 8001428:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	330a      	adds	r3, #10
 8001434:	015b      	lsls	r3, r3, #5
 8001436:	4413      	add	r3, r2
 8001438:	3304      	adds	r3, #4
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	460b      	mov	r3, r1
 8001456:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001458:	7afb      	ldrb	r3, [r7, #11]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	015b      	lsls	r3, r3, #5
 8001460:	3328      	adds	r3, #40	; 0x28
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2201      	movs	r2, #1
 800147e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001480:	7afb      	ldrb	r3, [r7, #11]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	b2da      	uxtb	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800148c:	7afb      	ldrb	r3, [r7, #11]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	2b00      	cmp	r3, #0
 8001494:	d106      	bne.n	80014a4 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6979      	ldr	r1, [r7, #20]
 800149c:	4618      	mov	r0, r3
 800149e:	f003 fb15 	bl	8004acc <USB_EPStartXfer>
 80014a2:	e005      	b.n	80014b0 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6979      	ldr	r1, [r7, #20]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 fb0e 	bl	8004acc <USB_EPStartXfer>
  }

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	f003 0207 	and.w	r2, r3, #7
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d901      	bls.n	80014d8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e046      	b.n	8001566 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da0b      	bge.n	80014f8 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	015b      	lsls	r3, r3, #5
 80014e8:	3328      	adds	r3, #40	; 0x28
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2201      	movs	r2, #1
 80014f4:	705a      	strb	r2, [r3, #1]
 80014f6:	e009      	b.n	800150c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	015b      	lsls	r3, r3, #5
 80014fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2201      	movs	r2, #1
 8001510:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	b2da      	uxtb	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <HAL_PCD_EP_SetStall+0x72>
 8001528:	2302      	movs	r3, #2
 800152a:	e01c      	b.n	8001566 <HAL_PCD_EP_SetStall+0xac>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	4618      	mov	r0, r3
 800153c:	f003 fd98 	bl	8005070 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	2b00      	cmp	r3, #0
 8001548:	d108      	bne.n	800155c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001554:	4619      	mov	r1, r3
 8001556:	4610      	mov	r0, r2
 8001558:	f003 fe8f 	bl	800527a <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	f003 020f 	and.w	r2, r3, #15
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	d901      	bls.n	800158c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e03a      	b.n	8001602 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800158c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001590:	2b00      	cmp	r3, #0
 8001592:	da0b      	bge.n	80015ac <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	015b      	lsls	r3, r3, #5
 800159c:	3328      	adds	r3, #40	; 0x28
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2201      	movs	r2, #1
 80015a8:	705a      	strb	r2, [r3, #1]
 80015aa:	e00b      	b.n	80015c4 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	015b      	lsls	r3, r3, #5
 80015b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_PCD_EP_ClrStall+0x76>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e00e      	b.n	8001602 <HAL_PCD_EP_ClrStall+0x94>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68f9      	ldr	r1, [r7, #12]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fd7e 	bl	80050f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b089      	sub	sp, #36	; 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001614:	e278      	b.n	8001b08 <PCD_EP_ISR_Handler+0x4fc>
  {
    wIstr = hpcd->Instance->ISTR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800161e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001620:	8afb      	ldrh	r3, [r7, #22]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f003 030f 	and.w	r3, r3, #15
 8001628:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800162a:	7d7b      	ldrb	r3, [r7, #21]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f040 8140 	bne.w	80018b2 <PCD_EP_ISR_Handler+0x2a6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001632:	8afb      	ldrh	r3, [r7, #22]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	2b00      	cmp	r3, #0
 800163a:	d14f      	bne.n	80016dc <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	b29b      	uxth	r3, r3
 8001644:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800164c:	b29c      	uxth	r4, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800165a:	b29b      	uxth	r3, r3
 800165c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3328      	adds	r3, #40	; 0x28
 8001662:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800166c:	b29b      	uxth	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	4413      	add	r3, r2
 800167e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	695a      	ldr	r2, [r3, #20]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	441a      	add	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800169a:	2100      	movs	r1, #0
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f008 f93f 	bl	8009920 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 822c 	beq.w	8001b08 <PCD_EP_ISR_Handler+0x4fc>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f040 8227 	bne.w	8001b08 <PCD_EP_ISR_Handler+0x4fc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	b292      	uxth	r2, r2
 80016ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80016da:	e215      	b.n	8001b08 <PCD_EP_ISR_Handler+0x4fc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016e2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80016ec:	8a7b      	ldrh	r3, [r7, #18]
 80016ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d031      	beq.n	800175a <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016fe:	b29b      	uxth	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4413      	add	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	4413      	add	r3, r2
 8001710:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001730:	b29b      	uxth	r3, r3
 8001732:	f003 fdef 	bl	8005314 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	b29a      	uxth	r2, r3
 800173e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001742:	4013      	ands	r3, r2
 8001744:	b29c      	uxth	r4, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800174e:	b292      	uxth	r2, r2
 8001750:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f008 f8ba 	bl	80098cc <HAL_PCD_SetupStageCallback>
 8001758:	e1d6      	b.n	8001b08 <PCD_EP_ISR_Handler+0x4fc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800175a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800175e:	2b00      	cmp	r3, #0
 8001760:	f280 81d2 	bge.w	8001b08 <PCD_EP_ISR_Handler+0x4fc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001770:	4013      	ands	r3, r2
 8001772:	b29c      	uxth	r4, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800177c:	b292      	uxth	r2, r2
 800177e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001788:	b29b      	uxth	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4413      	add	r3, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	4413      	add	r3, r2
 800179a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d019      	beq.n	80017e4 <PCD_EP_ISR_Handler+0x1d8>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d015      	beq.n	80017e4 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6959      	ldr	r1, [r3, #20]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	f003 fda3 	bl	8005314 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	441a      	add	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80017dc:	2100      	movs	r1, #0
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f008 f886 	bl	80098f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	461c      	mov	r4, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	441c      	add	r4, r3
 80017f6:	f204 4306 	addw	r3, r4, #1030	; 0x406
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d110      	bne.n	8001826 <PCD_EP_ISR_Handler+0x21a>
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800180c:	b29a      	uxth	r2, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	801a      	strh	r2, [r3, #0]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800181a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800181e:	b29a      	uxth	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	801a      	strh	r2, [r3, #0]
 8001824:	e02f      	b.n	8001886 <PCD_EP_ISR_Handler+0x27a>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2b3e      	cmp	r3, #62	; 0x3e
 800182c:	d813      	bhi.n	8001856 <PCD_EP_ISR_Handler+0x24a>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	085b      	lsrs	r3, r3, #1
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <PCD_EP_ISR_Handler+0x23c>
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	3301      	adds	r3, #1
 8001846:	61bb      	str	r3, [r7, #24]
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	b29b      	uxth	r3, r3
 800184c:	029b      	lsls	r3, r3, #10
 800184e:	b29a      	uxth	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	801a      	strh	r2, [r3, #0]
 8001854:	e017      	b.n	8001886 <PCD_EP_ISR_Handler+0x27a>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <PCD_EP_ISR_Handler+0x264>
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	3b01      	subs	r3, #1
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	b29b      	uxth	r3, r3
 8001874:	029b      	lsls	r3, r3, #10
 8001876:	b29b      	uxth	r3, r3
 8001878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800187c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001880:	b29a      	uxth	r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	b29b      	uxth	r3, r3
 800188e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001896:	b29c      	uxth	r4, r3
 8001898:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800189c:	b29c      	uxth	r4, r3
 800189e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80018a2:	b29c      	uxth	r4, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b9e      	ldr	r3, [pc, #632]	; (8001b24 <PCD_EP_ISR_Handler+0x518>)
 80018aa:	4323      	orrs	r3, r4
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	8013      	strh	r3, [r2, #0]
 80018b0:	e12a      	b.n	8001b08 <PCD_EP_ISR_Handler+0x4fc>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	7d7b      	ldrb	r3, [r7, #21]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f280 80cb 	bge.w	8001a62 <PCD_EP_ISR_Handler+0x456>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	7d7b      	ldrb	r3, [r7, #21]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018e0:	4013      	ands	r3, r2
 80018e2:	b29c      	uxth	r4, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	7d7b      	ldrb	r3, [r7, #21]
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80018f4:	b292      	uxth	r2, r2
 80018f6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80018f8:	7d7b      	ldrb	r3, [r7, #21]
 80018fa:	015b      	lsls	r3, r3, #5
 80018fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	4413      	add	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	7b1b      	ldrb	r3, [r3, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d11f      	bne.n	800194e <PCD_EP_ISR_Handler+0x342>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001916:	b29b      	uxth	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4413      	add	r3, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	4413      	add	r3, r2
 8001928:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001932:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001934:	8bfb      	ldrh	r3, [r7, #30]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d06e      	beq.n	8001a18 <PCD_EP_ISR_Handler+0x40c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6959      	ldr	r1, [r3, #20]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	88da      	ldrh	r2, [r3, #6]
 8001946:	8bfb      	ldrh	r3, [r7, #30]
 8001948:	f003 fce4 	bl	8005314 <USB_ReadPMA>
 800194c:	e064      	b.n	8001a18 <PCD_EP_ISR_Handler+0x40c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d01f      	beq.n	80019a8 <PCD_EP_ISR_Handler+0x39c>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001970:	b29b      	uxth	r3, r3
 8001972:	461a      	mov	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4413      	add	r3, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	4413      	add	r3, r2
 8001982:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800198c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800198e:	8bfb      	ldrh	r3, [r7, #30]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d028      	beq.n	80019e6 <PCD_EP_ISR_Handler+0x3da>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6959      	ldr	r1, [r3, #20]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	891a      	ldrh	r2, [r3, #8]
 80019a0:	8bfb      	ldrh	r3, [r7, #30]
 80019a2:	f003 fcb7 	bl	8005314 <USB_ReadPMA>
 80019a6:	e01e      	b.n	80019e6 <PCD_EP_ISR_Handler+0x3da>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4413      	add	r3, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	4413      	add	r3, r2
 80019c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019cc:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80019ce:	8bfb      	ldrh	r3, [r7, #30]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <PCD_EP_ISR_Handler+0x3da>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6959      	ldr	r1, [r3, #20]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	895a      	ldrh	r2, [r3, #10]
 80019e0:	8bfb      	ldrh	r3, [r7, #30]
 80019e2:	f003 fc97 	bl	8005314 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a00:	b29c      	uxth	r4, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	441a      	add	r2, r3
 8001a10:	4b45      	ldr	r3, [pc, #276]	; (8001b28 <PCD_EP_ISR_Handler+0x51c>)
 8001a12:	4323      	orrs	r3, r4
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	69da      	ldr	r2, [r3, #28]
 8001a1c:	8bfb      	ldrh	r3, [r7, #30]
 8001a1e:	441a      	add	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	8bfb      	ldrh	r3, [r7, #30]
 8001a2a:	441a      	add	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <PCD_EP_ISR_Handler+0x436>
 8001a38:	8bfa      	ldrh	r2, [r7, #30]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d206      	bcs.n	8001a50 <PCD_EP_ISR_Handler+0x444>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f007 ff51 	bl	80098f0 <HAL_PCD_DataOutStageCallback>
 8001a4e:	e008      	b.n	8001a62 <PCD_EP_ISR_Handler+0x456>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	7819      	ldrb	r1, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff fca4 	bl	80013aa <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a62:	8a7b      	ldrh	r3, [r7, #18]
 8001a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d04d      	beq.n	8001b08 <PCD_EP_ISR_Handler+0x4fc>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a6c:	7d7b      	ldrb	r3, [r7, #21]
 8001a6e:	015b      	lsls	r3, r3, #5
 8001a70:	3328      	adds	r3, #40	; 0x28
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	7d7b      	ldrb	r3, [r7, #21]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a90:	b29c      	uxth	r4, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	7d7b      	ldrb	r3, [r7, #21]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	441a      	add	r2, r3
 8001a9e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	695a      	ldr	r2, [r3, #20]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	441a      	add	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d106      	bne.n	8001af6 <PCD_EP_ISR_Handler+0x4ea>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f007 ff16 	bl	8009920 <HAL_PCD_DataInStageCallback>
 8001af4:	e008      	b.n	8001b08 <PCD_EP_ISR_Handler+0x4fc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	7819      	ldrb	r1, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	695a      	ldr	r2, [r3, #20]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fca0 	bl	8001448 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f6ff ad7e 	blt.w	8001616 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3724      	adds	r7, #36	; 0x24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd90      	pop	{r4, r7, pc}
 8001b24:	ffff8080 	.word	0xffff8080
 8001b28:	ffff80c0 	.word	0xffff80c0

08001b2c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	460b      	mov	r3, r1
 8001b38:	817b      	strh	r3, [r7, #10]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001b3e:	897b      	ldrh	r3, [r7, #10]
 8001b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d008      	beq.n	8001b5c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b4a:	897b      	ldrh	r3, [r7, #10]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	015b      	lsls	r3, r3, #5
 8001b52:	3328      	adds	r3, #40	; 0x28
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e006      	b.n	8001b6a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b5c:	897b      	ldrh	r3, [r7, #10]
 8001b5e:	015b      	lsls	r3, r3, #5
 8001b60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001b6a:	893b      	ldrh	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d107      	bne.n	8001b80 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2200      	movs	r2, #0
 8001b74:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	80da      	strh	r2, [r3, #6]
 8001b7e:	e00b      	b.n	8001b98 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2201      	movs	r2, #1
 8001b84:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	0c1b      	lsrs	r3, r3, #16
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	371c      	adds	r7, #28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f000 bf01 	b.w	80029c4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 8160 	beq.w	8001e92 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bd2:	4bae      	ldr	r3, [pc, #696]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d00c      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bde:	4bab      	ldr	r3, [pc, #684]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d159      	bne.n	8001c9e <HAL_RCC_OscConfig+0xf6>
 8001bea:	4ba8      	ldr	r3, [pc, #672]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf6:	d152      	bne.n	8001c9e <HAL_RCC_OscConfig+0xf6>
 8001bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c04:	fa93 f3a3 	rbit	r3, r3
 8001c08:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8001c0c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	fab3 f383 	clz	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d102      	bne.n	8001c2a <HAL_RCC_OscConfig+0x82>
 8001c24:	4b99      	ldr	r3, [pc, #612]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	e015      	b.n	8001c56 <HAL_RCC_OscConfig+0xae>
 8001c2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c2e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001c3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c42:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c46:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c52:	4b8e      	ldr	r3, [pc, #568]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c5a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001c5e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001c62:	fa92 f2a2 	rbit	r2, r2
 8001c66:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001c6a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c6e:	fab2 f282 	clz	r2, r2
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	f042 0220 	orr.w	r2, r2, #32
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	f002 021f 	and.w	r2, r2, #31
 8001c7e:	2101      	movs	r1, #1
 8001c80:	fa01 f202 	lsl.w	r2, r1, r2
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8102 	beq.w	8001e90 <HAL_RCC_OscConfig+0x2e8>
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f040 80fc 	bne.w	8001e90 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f000 be93 	b.w	80029c4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca8:	d106      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x110>
 8001caa:	4b78      	ldr	r3, [pc, #480]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a77      	ldr	r2, [pc, #476]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e030      	b.n	8001d1a <HAL_RCC_OscConfig+0x172>
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x134>
 8001cc2:	4b72      	ldr	r3, [pc, #456]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a71      	ldr	r2, [pc, #452]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b6f      	ldr	r3, [pc, #444]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a6e      	ldr	r2, [pc, #440]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001cd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e01e      	b.n	8001d1a <HAL_RCC_OscConfig+0x172>
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce6:	d10c      	bne.n	8001d02 <HAL_RCC_OscConfig+0x15a>
 8001ce8:	4b68      	ldr	r3, [pc, #416]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a67      	ldr	r2, [pc, #412]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001cee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b65      	ldr	r3, [pc, #404]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a64      	ldr	r2, [pc, #400]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	e00b      	b.n	8001d1a <HAL_RCC_OscConfig+0x172>
 8001d02:	4b62      	ldr	r3, [pc, #392]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a61      	ldr	r2, [pc, #388]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b5f      	ldr	r3, [pc, #380]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a5e      	ldr	r2, [pc, #376]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d18:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d059      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7fe fdec 	bl	8000900 <HAL_GetTick>
 8001d28:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d2e:	f7fe fde7 	bl	8000900 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d902      	bls.n	8001d44 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	f000 be40 	b.w	80029c4 <HAL_RCC_OscConfig+0xe1c>
 8001d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d48:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001d58:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d102      	bne.n	8001d76 <HAL_RCC_OscConfig+0x1ce>
 8001d70:	4b46      	ldr	r3, [pc, #280]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	e015      	b.n	8001da2 <HAL_RCC_OscConfig+0x1fa>
 8001d76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d7a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001d8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d8e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d92:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d9e:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001da6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001daa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001dae:	fa92 f2a2 	rbit	r2, r2
 8001db2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001db6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001dba:	fab2 f282 	clz	r2, r2
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	f042 0220 	orr.w	r2, r2, #32
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	f002 021f 	and.w	r2, r2, #31
 8001dca:	2101      	movs	r1, #1
 8001dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0ab      	beq.n	8001d2e <HAL_RCC_OscConfig+0x186>
 8001dd6:	e05c      	b.n	8001e92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7fe fd92 	bl	8000900 <HAL_GetTick>
 8001ddc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de2:	f7fe fd8d 	bl	8000900 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d902      	bls.n	8001df8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	f000 bde6 	b.w	80029c4 <HAL_RCC_OscConfig+0xe1c>
 8001df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001e0c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d102      	bne.n	8001e2a <HAL_RCC_OscConfig+0x282>
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	e015      	b.n	8001e56 <HAL_RCC_OscConfig+0x2ae>
 8001e2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001e3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_RCC_OscConfig+0x2e4>)
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e5a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001e5e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001e62:	fa92 f2a2 	rbit	r2, r2
 8001e66:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001e6a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e6e:	fab2 f282 	clz	r2, r2
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	f042 0220 	orr.w	r2, r2, #32
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	f002 021f 	and.w	r2, r2, #31
 8001e7e:	2101      	movs	r1, #1
 8001e80:	fa01 f202 	lsl.w	r2, r1, r2
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1ab      	bne.n	8001de2 <HAL_RCC_OscConfig+0x23a>
 8001e8a:	e002      	b.n	8001e92 <HAL_RCC_OscConfig+0x2ea>
 8001e8c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 8170 	beq.w	8002182 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ea2:	4bd0      	ldr	r3, [pc, #832]	; (80021e4 <HAL_RCC_OscConfig+0x63c>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00c      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001eae:	4bcd      	ldr	r3, [pc, #820]	; (80021e4 <HAL_RCC_OscConfig+0x63c>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d16d      	bne.n	8001f96 <HAL_RCC_OscConfig+0x3ee>
 8001eba:	4bca      	ldr	r3, [pc, #808]	; (80021e4 <HAL_RCC_OscConfig+0x63c>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ec6:	d166      	bne.n	8001f96 <HAL_RCC_OscConfig+0x3ee>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001eda:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	095b      	lsrs	r3, r3, #5
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d102      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x350>
 8001ef2:	4bbc      	ldr	r3, [pc, #752]	; (80021e4 <HAL_RCC_OscConfig+0x63c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	e013      	b.n	8001f20 <HAL_RCC_OscConfig+0x378>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001f10:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f1c:	4bb1      	ldr	r3, [pc, #708]	; (80021e4 <HAL_RCC_OscConfig+0x63c>)
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	2202      	movs	r2, #2
 8001f22:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001f26:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001f2a:	fa92 f2a2 	rbit	r2, r2
 8001f2e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001f32:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f36:	fab2 f282 	clz	r2, r2
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	f042 0220 	orr.w	r2, r2, #32
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	f002 021f 	and.w	r2, r2, #31
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d007      	beq.n	8001f62 <HAL_RCC_OscConfig+0x3ba>
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d002      	beq.n	8001f62 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	f000 bd31 	b.w	80029c4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f62:	4ba0      	ldr	r3, [pc, #640]	; (80021e4 <HAL_RCC_OscConfig+0x63c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	21f8      	movs	r1, #248	; 0xf8
 8001f72:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001f7a:	fa91 f1a1 	rbit	r1, r1
 8001f7e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001f82:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f86:	fab1 f181 	clz	r1, r1
 8001f8a:	b2c9      	uxtb	r1, r1
 8001f8c:	408b      	lsls	r3, r1
 8001f8e:	4995      	ldr	r1, [pc, #596]	; (80021e4 <HAL_RCC_OscConfig+0x63c>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f94:	e0f5      	b.n	8002182 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 8085 	beq.w	80020ac <HAL_RCC_OscConfig+0x504>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001fac:	fa93 f3a3 	rbit	r3, r3
 8001fb0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001fb4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fc2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	461a      	mov	r2, r3
 8001fca:	2301      	movs	r3, #1
 8001fcc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7fe fc97 	bl	8000900 <HAL_GetTick>
 8001fd2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd6:	e00a      	b.n	8001fee <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd8:	f7fe fc92 	bl	8000900 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d902      	bls.n	8001fee <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	f000 bceb 	b.w	80029c4 <HAL_RCC_OscConfig+0xe1c>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002000:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	fab3 f383 	clz	r3, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d102      	bne.n	800201e <HAL_RCC_OscConfig+0x476>
 8002018:	4b72      	ldr	r3, [pc, #456]	; (80021e4 <HAL_RCC_OscConfig+0x63c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	e013      	b.n	8002046 <HAL_RCC_OscConfig+0x49e>
 800201e:	2302      	movs	r3, #2
 8002020:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002030:	2302      	movs	r3, #2
 8002032:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002036:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002042:	4b68      	ldr	r3, [pc, #416]	; (80021e4 <HAL_RCC_OscConfig+0x63c>)
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	2202      	movs	r2, #2
 8002048:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800204c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002050:	fa92 f2a2 	rbit	r2, r2
 8002054:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002058:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800205c:	fab2 f282 	clz	r2, r2
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	f042 0220 	orr.w	r2, r2, #32
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	f002 021f 	and.w	r2, r2, #31
 800206c:	2101      	movs	r1, #1
 800206e:	fa01 f202 	lsl.w	r2, r1, r2
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0af      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002078:	4b5a      	ldr	r3, [pc, #360]	; (80021e4 <HAL_RCC_OscConfig+0x63c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	21f8      	movs	r1, #248	; 0xf8
 8002088:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002090:	fa91 f1a1 	rbit	r1, r1
 8002094:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002098:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800209c:	fab1 f181 	clz	r1, r1
 80020a0:	b2c9      	uxtb	r1, r1
 80020a2:	408b      	lsls	r3, r1
 80020a4:	494f      	ldr	r1, [pc, #316]	; (80021e4 <HAL_RCC_OscConfig+0x63c>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
 80020aa:	e06a      	b.n	8002182 <HAL_RCC_OscConfig+0x5da>
 80020ac:	2301      	movs	r3, #1
 80020ae:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80020be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	461a      	mov	r2, r3
 80020d4:	2300      	movs	r3, #0
 80020d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe fc12 	bl	8000900 <HAL_GetTick>
 80020dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e2:	f7fe fc0d 	bl	8000900 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d902      	bls.n	80020f8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	f000 bc66 	b.w	80029c4 <HAL_RCC_OscConfig+0xe1c>
 80020f8:	2302      	movs	r3, #2
 80020fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800210a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d102      	bne.n	8002128 <HAL_RCC_OscConfig+0x580>
 8002122:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <HAL_RCC_OscConfig+0x63c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	e013      	b.n	8002150 <HAL_RCC_OscConfig+0x5a8>
 8002128:	2302      	movs	r3, #2
 800212a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800213a:	2302      	movs	r3, #2
 800213c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002140:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_RCC_OscConfig+0x63c>)
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	2202      	movs	r2, #2
 8002152:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002156:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800215a:	fa92 f2a2 	rbit	r2, r2
 800215e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002162:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002166:	fab2 f282 	clz	r2, r2
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	f042 0220 	orr.w	r2, r2, #32
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	f002 021f 	and.w	r2, r2, #31
 8002176:	2101      	movs	r1, #1
 8002178:	fa01 f202 	lsl.w	r2, r1, r2
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1af      	bne.n	80020e2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80da 	beq.w	8002346 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d069      	beq.n	8002270 <HAL_RCC_OscConfig+0x6c8>
 800219c:	2301      	movs	r3, #1
 800219e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80021ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_RCC_OscConfig+0x640>)
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	461a      	mov	r2, r3
 80021c2:	2301      	movs	r3, #1
 80021c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c6:	f7fe fb9b 	bl	8000900 <HAL_GetTick>
 80021ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	e00d      	b.n	80021ec <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d0:	f7fe fb96 	bl	8000900 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d905      	bls.n	80021ec <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e3ef      	b.n	80029c4 <HAL_RCC_OscConfig+0xe1c>
 80021e4:	40021000 	.word	0x40021000
 80021e8:	10908120 	.word	0x10908120
 80021ec:	2302      	movs	r3, #2
 80021ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021f6:	fa93 f2a3 	rbit	r2, r3
 80021fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002204:	2202      	movs	r2, #2
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	fa93 f2a3 	rbit	r2, r3
 8002212:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800221c:	2202      	movs	r2, #2
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	fa93 f2a3 	rbit	r2, r3
 800222a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800222e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002230:	4ba4      	ldr	r3, [pc, #656]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 8002232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002234:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002238:	2102      	movs	r1, #2
 800223a:	6019      	str	r1, [r3, #0]
 800223c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	fa93 f1a3 	rbit	r1, r3
 8002246:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800224a:	6019      	str	r1, [r3, #0]
  return result;
 800224c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	2101      	movs	r1, #1
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0b0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x628>
 800226e:	e06a      	b.n	8002346 <HAL_RCC_OscConfig+0x79e>
 8002270:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002274:	2201      	movs	r2, #1
 8002276:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	fa93 f2a3 	rbit	r2, r3
 8002282:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002286:	601a      	str	r2, [r3, #0]
  return result;
 8002288:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800228c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	4b8c      	ldr	r3, [pc, #560]	; (80024c8 <HAL_RCC_OscConfig+0x920>)
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	461a      	mov	r2, r3
 800229e:	2300      	movs	r3, #0
 80022a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a2:	f7fe fb2d 	bl	8000900 <HAL_GetTick>
 80022a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022aa:	e009      	b.n	80022c0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ac:	f7fe fb28 	bl	8000900 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e381      	b.n	80029c4 <HAL_RCC_OscConfig+0xe1c>
 80022c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022c4:	2202      	movs	r2, #2
 80022c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	fa93 f2a3 	rbit	r2, r3
 80022d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022dc:	2202      	movs	r2, #2
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	fa93 f2a3 	rbit	r2, r3
 80022ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022f4:	2202      	movs	r2, #2
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	fa93 f2a3 	rbit	r2, r3
 8002302:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002306:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002308:	4b6e      	ldr	r3, [pc, #440]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 800230a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800230c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002310:	2102      	movs	r1, #2
 8002312:	6019      	str	r1, [r3, #0]
 8002314:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	fa93 f1a3 	rbit	r1, r3
 800231e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002322:	6019      	str	r1, [r3, #0]
  return result;
 8002324:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	2101      	movs	r1, #1
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1b2      	bne.n	80022ac <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8157 	beq.w	8002604 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235c:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d112      	bne.n	800238e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002368:	4b56      	ldr	r3, [pc, #344]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	4a55      	ldr	r2, [pc, #340]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 800236e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002372:	61d3      	str	r3, [r2, #28]
 8002374:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	f107 030c 	add.w	r3, r7, #12
 8002386:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002388:	2301      	movs	r3, #1
 800238a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238e:	4b4f      	ldr	r3, [pc, #316]	; (80024cc <HAL_RCC_OscConfig+0x924>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d11a      	bne.n	80023d0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239a:	4b4c      	ldr	r3, [pc, #304]	; (80024cc <HAL_RCC_OscConfig+0x924>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a4b      	ldr	r2, [pc, #300]	; (80024cc <HAL_RCC_OscConfig+0x924>)
 80023a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a6:	f7fe faab 	bl	8000900 <HAL_GetTick>
 80023aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ae:	e009      	b.n	80023c4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b0:	f7fe faa6 	bl	8000900 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b64      	cmp	r3, #100	; 0x64
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e2ff      	b.n	80029c4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c4:	4b41      	ldr	r3, [pc, #260]	; (80024cc <HAL_RCC_OscConfig+0x924>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ef      	beq.n	80023b0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d106      	bne.n	80023e8 <HAL_RCC_OscConfig+0x840>
 80023da:	4b3a      	ldr	r3, [pc, #232]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4a39      	ldr	r2, [pc, #228]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6213      	str	r3, [r2, #32]
 80023e6:	e02f      	b.n	8002448 <HAL_RCC_OscConfig+0x8a0>
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x864>
 80023f2:	4b34      	ldr	r3, [pc, #208]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a33      	ldr	r2, [pc, #204]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	6213      	str	r3, [r2, #32]
 80023fe:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4a30      	ldr	r2, [pc, #192]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 8002404:	f023 0304 	bic.w	r3, r3, #4
 8002408:	6213      	str	r3, [r2, #32]
 800240a:	e01d      	b.n	8002448 <HAL_RCC_OscConfig+0x8a0>
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b05      	cmp	r3, #5
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0x888>
 8002416:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a2a      	ldr	r2, [pc, #168]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	6213      	str	r3, [r2, #32]
 8002422:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a27      	ldr	r2, [pc, #156]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6213      	str	r3, [r2, #32]
 800242e:	e00b      	b.n	8002448 <HAL_RCC_OscConfig+0x8a0>
 8002430:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4a23      	ldr	r2, [pc, #140]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 8002436:	f023 0301 	bic.w	r3, r3, #1
 800243a:	6213      	str	r3, [r2, #32]
 800243c:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4a20      	ldr	r2, [pc, #128]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 8002442:	f023 0304 	bic.w	r3, r3, #4
 8002446:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d06a      	beq.n	8002528 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002452:	f7fe fa55 	bl	8000900 <HAL_GetTick>
 8002456:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800245c:	f7fe fa50 	bl	8000900 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	; 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e2a7      	b.n	80029c4 <HAL_RCC_OscConfig+0xe1c>
 8002474:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002478:	2202      	movs	r2, #2
 800247a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	fa93 f2a3 	rbit	r2, r3
 8002486:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002490:	2202      	movs	r2, #2
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	fa93 f2a3 	rbit	r2, r3
 800249e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80024a2:	601a      	str	r2, [r3, #0]
  return result;
 80024a4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80024a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024aa:	fab3 f383 	clz	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	095b      	lsrs	r3, r3, #5
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d108      	bne.n	80024d0 <HAL_RCC_OscConfig+0x928>
 80024be:	4b01      	ldr	r3, [pc, #4]	; (80024c4 <HAL_RCC_OscConfig+0x91c>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	e013      	b.n	80024ec <HAL_RCC_OscConfig+0x944>
 80024c4:	40021000 	.word	0x40021000
 80024c8:	10908120 	.word	0x10908120
 80024cc:	40007000 	.word	0x40007000
 80024d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024d4:	2202      	movs	r2, #2
 80024d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	fa93 f2a3 	rbit	r2, r3
 80024e2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	4bc0      	ldr	r3, [pc, #768]	; (80027ec <HAL_RCC_OscConfig+0xc44>)
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024f0:	2102      	movs	r1, #2
 80024f2:	6011      	str	r1, [r2, #0]
 80024f4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	fa92 f1a2 	rbit	r1, r2
 80024fe:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002502:	6011      	str	r1, [r2, #0]
  return result;
 8002504:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	fab2 f282 	clz	r2, r2
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	f002 021f 	and.w	r2, r2, #31
 800251a:	2101      	movs	r1, #1
 800251c:	fa01 f202 	lsl.w	r2, r1, r2
 8002520:	4013      	ands	r3, r2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d09a      	beq.n	800245c <HAL_RCC_OscConfig+0x8b4>
 8002526:	e063      	b.n	80025f0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002528:	f7fe f9ea 	bl	8000900 <HAL_GetTick>
 800252c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	e00b      	b.n	800254a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7fe f9e5 	bl	8000900 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e23c      	b.n	80029c4 <HAL_RCC_OscConfig+0xe1c>
 800254a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800254e:	2202      	movs	r2, #2
 8002550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	fa93 f2a3 	rbit	r2, r3
 800255c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002566:	2202      	movs	r2, #2
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	fa93 f2a3 	rbit	r2, r3
 8002574:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002578:	601a      	str	r2, [r3, #0]
  return result;
 800257a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800257e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f043 0302 	orr.w	r3, r3, #2
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d102      	bne.n	800259a <HAL_RCC_OscConfig+0x9f2>
 8002594:	4b95      	ldr	r3, [pc, #596]	; (80027ec <HAL_RCC_OscConfig+0xc44>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	e00d      	b.n	80025b6 <HAL_RCC_OscConfig+0xa0e>
 800259a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800259e:	2202      	movs	r2, #2
 80025a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	fa93 f2a3 	rbit	r2, r3
 80025ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	4b8e      	ldr	r3, [pc, #568]	; (80027ec <HAL_RCC_OscConfig+0xc44>)
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80025ba:	2102      	movs	r1, #2
 80025bc:	6011      	str	r1, [r2, #0]
 80025be:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	fa92 f1a2 	rbit	r1, r2
 80025c8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025cc:	6011      	str	r1, [r2, #0]
  return result;
 80025ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	fab2 f282 	clz	r2, r2
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f002 021f 	and.w	r2, r2, #31
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1a0      	bne.n	8002532 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025f0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d105      	bne.n	8002604 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f8:	4b7c      	ldr	r3, [pc, #496]	; (80027ec <HAL_RCC_OscConfig+0xc44>)
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	4a7b      	ldr	r2, [pc, #492]	; (80027ec <HAL_RCC_OscConfig+0xc44>)
 80025fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002602:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 81d9 	beq.w	80029c2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002610:	4b76      	ldr	r3, [pc, #472]	; (80027ec <HAL_RCC_OscConfig+0xc44>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	f000 81a6 	beq.w	800296a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2b02      	cmp	r3, #2
 8002626:	f040 811e 	bne.w	8002866 <HAL_RCC_OscConfig+0xcbe>
 800262a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800262e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	fa93 f2a3 	rbit	r2, r3
 800263e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002642:	601a      	str	r2, [r3, #0]
  return result;
 8002644:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002648:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002654:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	461a      	mov	r2, r3
 800265c:	2300      	movs	r3, #0
 800265e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fe f94e 	bl	8000900 <HAL_GetTick>
 8002664:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002668:	e009      	b.n	800267e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266a:	f7fe f949 	bl	8000900 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e1a2      	b.n	80029c4 <HAL_RCC_OscConfig+0xe1c>
 800267e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002682:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	fa93 f2a3 	rbit	r2, r3
 8002692:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002696:	601a      	str	r2, [r3, #0]
  return result;
 8002698:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800269c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d102      	bne.n	80026b8 <HAL_RCC_OscConfig+0xb10>
 80026b2:	4b4e      	ldr	r3, [pc, #312]	; (80027ec <HAL_RCC_OscConfig+0xc44>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	e01b      	b.n	80026f0 <HAL_RCC_OscConfig+0xb48>
 80026b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	fa93 f2a3 	rbit	r2, r3
 80026cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fa93 f2a3 	rbit	r2, r3
 80026e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	4b3f      	ldr	r3, [pc, #252]	; (80027ec <HAL_RCC_OscConfig+0xc44>)
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026f8:	6011      	str	r1, [r2, #0]
 80026fa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	fa92 f1a2 	rbit	r1, r2
 8002704:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002708:	6011      	str	r1, [r2, #0]
  return result;
 800270a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	fab2 f282 	clz	r2, r2
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	f042 0220 	orr.w	r2, r2, #32
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	f002 021f 	and.w	r2, r2, #31
 8002720:	2101      	movs	r1, #1
 8002722:	fa01 f202 	lsl.w	r2, r1, r2
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d19e      	bne.n	800266a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800272c:	4b2f      	ldr	r3, [pc, #188]	; (80027ec <HAL_RCC_OscConfig+0xc44>)
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	f023 020f 	bic.w	r2, r3, #15
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	492c      	ldr	r1, [pc, #176]	; (80027ec <HAL_RCC_OscConfig+0xc44>)
 800273c:	4313      	orrs	r3, r2
 800273e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002740:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <HAL_RCC_OscConfig+0xc44>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6a19      	ldr	r1, [r3, #32]
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	430b      	orrs	r3, r1
 8002756:	4925      	ldr	r1, [pc, #148]	; (80027ec <HAL_RCC_OscConfig+0xc44>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
 800275c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002760:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	fa93 f2a3 	rbit	r2, r3
 8002770:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002774:	601a      	str	r2, [r3, #0]
  return result;
 8002776:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800277a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002786:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	461a      	mov	r2, r3
 800278e:	2301      	movs	r3, #1
 8002790:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7fe f8b5 	bl	8000900 <HAL_GetTick>
 8002796:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800279a:	e009      	b.n	80027b0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279c:	f7fe f8b0 	bl	8000900 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e109      	b.n	80029c4 <HAL_RCC_OscConfig+0xe1c>
 80027b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	fa93 f2a3 	rbit	r2, r3
 80027c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027c8:	601a      	str	r2, [r3, #0]
  return result;
 80027ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d105      	bne.n	80027f0 <HAL_RCC_OscConfig+0xc48>
 80027e4:	4b01      	ldr	r3, [pc, #4]	; (80027ec <HAL_RCC_OscConfig+0xc44>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	e01e      	b.n	8002828 <HAL_RCC_OscConfig+0xc80>
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	fa93 f2a3 	rbit	r2, r3
 8002804:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800280e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fa93 f2a3 	rbit	r2, r3
 800281e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_RCC_OscConfig+0xe28>)
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800282c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002830:	6011      	str	r1, [r2, #0]
 8002832:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	fa92 f1a2 	rbit	r1, r2
 800283c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002840:	6011      	str	r1, [r2, #0]
  return result;
 8002842:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	fab2 f282 	clz	r2, r2
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	f042 0220 	orr.w	r2, r2, #32
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	f002 021f 	and.w	r2, r2, #31
 8002858:	2101      	movs	r1, #1
 800285a:	fa01 f202 	lsl.w	r2, r1, r2
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d09b      	beq.n	800279c <HAL_RCC_OscConfig+0xbf4>
 8002864:	e0ad      	b.n	80029c2 <HAL_RCC_OscConfig+0xe1a>
 8002866:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800286a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800286e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	fa93 f2a3 	rbit	r2, r3
 800287a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800287e:	601a      	str	r2, [r3, #0]
  return result;
 8002880:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002884:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002890:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	461a      	mov	r2, r3
 8002898:	2300      	movs	r3, #0
 800289a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7fe f830 	bl	8000900 <HAL_GetTick>
 80028a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a4:	e009      	b.n	80028ba <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a6:	f7fe f82b 	bl	8000900 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e084      	b.n	80029c4 <HAL_RCC_OscConfig+0xe1c>
 80028ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	fa93 f2a3 	rbit	r2, r3
 80028ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028d2:	601a      	str	r2, [r3, #0]
  return result;
 80028d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d102      	bne.n	80028f4 <HAL_RCC_OscConfig+0xd4c>
 80028ee:	4b38      	ldr	r3, [pc, #224]	; (80029d0 <HAL_RCC_OscConfig+0xe28>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	e01b      	b.n	800292c <HAL_RCC_OscConfig+0xd84>
 80028f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	fa93 f2a3 	rbit	r2, r3
 8002908:	f107 0320 	add.w	r3, r7, #32
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	f107 031c 	add.w	r3, r7, #28
 8002912:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f107 031c 	add.w	r3, r7, #28
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	fa93 f2a3 	rbit	r2, r3
 8002922:	f107 0318 	add.w	r3, r7, #24
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <HAL_RCC_OscConfig+0xe28>)
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	f107 0214 	add.w	r2, r7, #20
 8002930:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002934:	6011      	str	r1, [r2, #0]
 8002936:	f107 0214 	add.w	r2, r7, #20
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	fa92 f1a2 	rbit	r1, r2
 8002940:	f107 0210 	add.w	r2, r7, #16
 8002944:	6011      	str	r1, [r2, #0]
  return result;
 8002946:	f107 0210 	add.w	r2, r7, #16
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	fab2 f282 	clz	r2, r2
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	f042 0220 	orr.w	r2, r2, #32
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	f002 021f 	and.w	r2, r2, #31
 800295c:	2101      	movs	r1, #1
 800295e:	fa01 f202 	lsl.w	r2, r1, r2
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d19e      	bne.n	80028a6 <HAL_RCC_OscConfig+0xcfe>
 8002968:	e02b      	b.n	80029c2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e025      	b.n	80029c4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002978:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <HAL_RCC_OscConfig+0xe28>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002980:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <HAL_RCC_OscConfig+0xe28>)
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002988:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800298c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	429a      	cmp	r2, r3
 8002998:	d111      	bne.n	80029be <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800299a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800299e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029a2:	1d3b      	adds	r3, r7, #4
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d108      	bne.n	80029be <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80029ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029b0:	f003 020f 	and.w	r2, r3, #15
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d001      	beq.n	80029c2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000

080029d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b09e      	sub	sp, #120	; 0x78
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e162      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	4b90      	ldr	r3, [pc, #576]	; (8002c30 <HAL_RCC_ClockConfig+0x25c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d910      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b8d      	ldr	r3, [pc, #564]	; (8002c30 <HAL_RCC_ClockConfig+0x25c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	498b      	ldr	r1, [pc, #556]	; (8002c30 <HAL_RCC_ClockConfig+0x25c>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b89      	ldr	r3, [pc, #548]	; (8002c30 <HAL_RCC_ClockConfig+0x25c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e14a      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a28:	4b82      	ldr	r3, [pc, #520]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	497f      	ldr	r1, [pc, #508]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80dc 	beq.w	8002c00 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d13c      	bne.n	8002aca <HAL_RCC_ClockConfig+0xf6>
 8002a50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a54:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d102      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xa6>
 8002a74:	4b6f      	ldr	r3, [pc, #444]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	e00f      	b.n	8002a9a <HAL_RCC_ClockConfig+0xc6>
 8002a7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	667b      	str	r3, [r7, #100]	; 0x64
 8002a88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a8c:	663b      	str	r3, [r7, #96]	; 0x60
 8002a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a96:	4b67      	ldr	r3, [pc, #412]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a9e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002aa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002aa2:	fa92 f2a2 	rbit	r2, r2
 8002aa6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002aa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002aaa:	fab2 f282 	clz	r2, r2
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	f042 0220 	orr.w	r2, r2, #32
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	f002 021f 	and.w	r2, r2, #31
 8002aba:	2101      	movs	r1, #1
 8002abc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d17b      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0f3      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d13c      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x178>
 8002ad2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d102      	bne.n	8002afc <HAL_RCC_ClockConfig+0x128>
 8002af6:	4b4f      	ldr	r3, [pc, #316]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	e00f      	b.n	8002b1c <HAL_RCC_ClockConfig+0x148>
 8002afc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	647b      	str	r3, [r7, #68]	; 0x44
 8002b0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b0e:	643b      	str	r3, [r7, #64]	; 0x40
 8002b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b18:	4b46      	ldr	r3, [pc, #280]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b20:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b24:	fa92 f2a2 	rbit	r2, r2
 8002b28:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b2c:	fab2 f282 	clz	r2, r2
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	f042 0220 	orr.w	r2, r2, #32
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	f002 021f 	and.w	r2, r2, #31
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d13a      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0b2      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x2de>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d102      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x1a0>
 8002b6e:	4b31      	ldr	r3, [pc, #196]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	e00d      	b.n	8002b90 <HAL_RCC_ClockConfig+0x1bc>
 8002b74:	2302      	movs	r3, #2
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b80:	2302      	movs	r3, #2
 8002b82:	623b      	str	r3, [r7, #32]
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	2202      	movs	r2, #2
 8002b92:	61ba      	str	r2, [r7, #24]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	fa92 f2a2 	rbit	r2, r2
 8002b9a:	617a      	str	r2, [r7, #20]
  return result;
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	fab2 f282 	clz	r2, r2
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	f042 0220 	orr.w	r2, r2, #32
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	f002 021f 	and.w	r2, r2, #31
 8002bae:	2101      	movs	r1, #1
 8002bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e079      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bbe:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f023 0203 	bic.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	491a      	ldr	r1, [pc, #104]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd0:	f7fd fe96 	bl	8000900 <HAL_GetTick>
 8002bd4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7fd fe92 	bl	8000900 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e061      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <HAL_RCC_ClockConfig+0x260>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 020c 	and.w	r2, r3, #12
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d1eb      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_RCC_ClockConfig+0x25c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d214      	bcs.n	8002c38 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <HAL_RCC_ClockConfig+0x25c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 0207 	bic.w	r2, r3, #7
 8002c16:	4906      	ldr	r1, [pc, #24]	; (8002c30 <HAL_RCC_ClockConfig+0x25c>)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <HAL_RCC_ClockConfig+0x25c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d005      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e040      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x2de>
 8002c30:	40022000 	.word	0x40022000
 8002c34:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c44:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <HAL_RCC_ClockConfig+0x2e8>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	491a      	ldr	r1, [pc, #104]	; (8002cbc <HAL_RCC_ClockConfig+0x2e8>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d009      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <HAL_RCC_ClockConfig+0x2e8>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4912      	ldr	r1, [pc, #72]	; (8002cbc <HAL_RCC_ClockConfig+0x2e8>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c76:	f000 f829 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002c7a:	4601      	mov	r1, r0
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <HAL_RCC_ClockConfig+0x2e8>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c84:	22f0      	movs	r2, #240	; 0xf0
 8002c86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	fa92 f2a2 	rbit	r2, r2
 8002c8e:	60fa      	str	r2, [r7, #12]
  return result;
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	fab2 f282 	clz	r2, r2
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	40d3      	lsrs	r3, r2
 8002c9a:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <HAL_RCC_ClockConfig+0x2ec>)
 8002c9c:	5cd3      	ldrb	r3, [r2, r3]
 8002c9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002ca2:	4a08      	ldr	r2, [pc, #32]	; (8002cc4 <HAL_RCC_ClockConfig+0x2f0>)
 8002ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ca6:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <HAL_RCC_ClockConfig+0x2f4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fd3a 	bl	8000724 <HAL_InitTick>
  
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3778      	adds	r7, #120	; 0x78
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	08009ecc 	.word	0x08009ecc
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	20000004 	.word	0x20000004

08002ccc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b08b      	sub	sp, #44	; 0x2c
 8002cd0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ce6:	4b2a      	ldr	r3, [pc, #168]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d002      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x30>
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x36>
 8002cfa:	e03f      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cfc:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cfe:	623b      	str	r3, [r7, #32]
      break;
 8002d00:	e03f      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d08:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d0c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	fa92 f2a2 	rbit	r2, r2
 8002d14:	607a      	str	r2, [r7, #4]
  return result;
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	fab2 f282 	clz	r2, r2
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	40d3      	lsrs	r3, r2
 8002d20:	4a1d      	ldr	r2, [pc, #116]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d22:	5cd3      	ldrb	r3, [r2, r3]
 8002d24:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d26:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	220f      	movs	r2, #15
 8002d30:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	fa92 f2a2 	rbit	r2, r2
 8002d38:	60fa      	str	r2, [r7, #12]
  return result;
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	fab2 f282 	clz	r2, r2
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	40d3      	lsrs	r3, r2
 8002d44:	4a15      	ldr	r2, [pc, #84]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d46:	5cd3      	ldrb	r3, [r2, r3]
 8002d48:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d54:	4a0f      	ldr	r2, [pc, #60]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fb02 f303 	mul.w	r3, r2, r3
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
 8002d64:	e007      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d66:	4a0b      	ldr	r2, [pc, #44]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	fb02 f303 	mul.w	r3, r2, r3
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	623b      	str	r3, [r7, #32]
      break;
 8002d7a:	e002      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d7e:	623b      	str	r3, [r7, #32]
      break;
 8002d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d82:	6a3b      	ldr	r3, [r7, #32]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	372c      	adds	r7, #44	; 0x2c
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	40021000 	.word	0x40021000
 8002d94:	007a1200 	.word	0x007a1200
 8002d98:	08009ee4 	.word	0x08009ee4
 8002d9c:	08009ef4 	.word	0x08009ef4

08002da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000000 	.word	0x20000000

08002db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002dbe:	f7ff ffef 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dc2:	4601      	mov	r1, r0
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dcc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002dd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	fa92 f2a2 	rbit	r2, r2
 8002dd8:	603a      	str	r2, [r7, #0]
  return result;
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	fab2 f282 	clz	r2, r2
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	40d3      	lsrs	r3, r2
 8002de4:	4a04      	ldr	r2, [pc, #16]	; (8002df8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002de6:	5cd3      	ldrb	r3, [r2, r3]
 8002de8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40021000 	.word	0x40021000
 8002df8:	08009edc 	.word	0x08009edc

08002dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e02:	f7ff ffcd 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002e06:	4601      	mov	r1, r0
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002e10:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002e14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	fa92 f2a2 	rbit	r2, r2
 8002e1c:	603a      	str	r2, [r7, #0]
  return result;
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	fab2 f282 	clz	r2, r2
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	40d3      	lsrs	r3, r2
 8002e28:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e2a:	5cd3      	ldrb	r3, [r2, r3]
 8002e2c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	08009edc 	.word	0x08009edc

08002e40 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_RCC_GetClockConfig+0x5c>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0203 	and.w	r2, r3, #3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <HAL_RCC_GetClockConfig+0x5c>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_RCC_GetClockConfig+0x5c>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_RCC_GetClockConfig+0x5c>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	08db      	lsrs	r3, r3, #3
 8002e7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002e82:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <HAL_RCC_GetClockConfig+0x60>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0207 	and.w	r2, r3, #7
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	601a      	str	r2, [r3, #0]
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40022000 	.word	0x40022000

08002ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b092      	sub	sp, #72	; 0x48
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80d7 	beq.w	8003070 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec8:	4b4e      	ldr	r3, [pc, #312]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10e      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed4:	4b4b      	ldr	r3, [pc, #300]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	4a4a      	ldr	r2, [pc, #296]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ede:	61d3      	str	r3, [r2, #28]
 8002ee0:	4b48      	ldr	r3, [pc, #288]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef2:	4b45      	ldr	r3, [pc, #276]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d118      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efe:	4b42      	ldr	r3, [pc, #264]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a41      	ldr	r2, [pc, #260]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0a:	f7fd fcf9 	bl	8000900 <HAL_GetTick>
 8002f0e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	e008      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f12:	f7fd fcf5 	bl	8000900 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b64      	cmp	r3, #100	; 0x64
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e1d6      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	4b38      	ldr	r3, [pc, #224]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f30:	4b34      	ldr	r3, [pc, #208]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f38:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 8084 	beq.w	800304a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d07c      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f50:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b26      	ldr	r3, [pc, #152]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b1d      	ldr	r3, [pc, #116]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fa2:	4a18      	ldr	r2, [pc, #96]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d04b      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7fd fca5 	bl	8000900 <HAL_GetTick>
 8002fb6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb8:	e00a      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fba:	f7fd fca1 	bl	8000900 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e180      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
 8002fdc:	2302      	movs	r3, #2
 8002fde:	623b      	str	r3, [r7, #32]
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	61fb      	str	r3, [r7, #28]
  return result;
 8002fe8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f043 0302 	orr.w	r3, r3, #2
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d108      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ffe:	4b01      	ldr	r3, [pc, #4]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	e00d      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003004:	40021000 	.word	0x40021000
 8003008:	40007000 	.word	0x40007000
 800300c:	10908100 	.word	0x10908100
 8003010:	2302      	movs	r3, #2
 8003012:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	4ba0      	ldr	r3, [pc, #640]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	2202      	movs	r2, #2
 8003022:	613a      	str	r2, [r7, #16]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	fa92 f2a2 	rbit	r2, r2
 800302a:	60fa      	str	r2, [r7, #12]
  return result;
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	fab2 f282 	clz	r2, r2
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	f002 021f 	and.w	r2, r2, #31
 800303e:	2101      	movs	r1, #1
 8003040:	fa01 f202 	lsl.w	r2, r1, r2
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0b7      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800304a:	4b95      	ldr	r3, [pc, #596]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4992      	ldr	r1, [pc, #584]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003058:	4313      	orrs	r3, r2
 800305a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800305c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003060:	2b01      	cmp	r3, #1
 8003062:	d105      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003064:	4b8e      	ldr	r3, [pc, #568]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	4a8d      	ldr	r2, [pc, #564]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800306a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800307c:	4b88      	ldr	r3, [pc, #544]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	f023 0203 	bic.w	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4985      	ldr	r1, [pc, #532]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800308a:	4313      	orrs	r3, r2
 800308c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800309a:	4b81      	ldr	r3, [pc, #516]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	497e      	ldr	r1, [pc, #504]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030b8:	4b79      	ldr	r3, [pc, #484]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	4976      	ldr	r1, [pc, #472]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030d6:	4b72      	ldr	r3, [pc, #456]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f023 0210 	bic.w	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	496f      	ldr	r1, [pc, #444]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80030f4:	4b6a      	ldr	r3, [pc, #424]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003100:	4967      	ldr	r1, [pc, #412]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003112:	4b63      	ldr	r3, [pc, #396]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f023 0220 	bic.w	r2, r3, #32
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4960      	ldr	r1, [pc, #384]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003120:	4313      	orrs	r3, r2
 8003122:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003130:	4b5b      	ldr	r3, [pc, #364]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	4958      	ldr	r1, [pc, #352]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800313e:	4313      	orrs	r3, r2
 8003140:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800314e:	4b54      	ldr	r3, [pc, #336]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	4951      	ldr	r1, [pc, #324]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800315c:	4313      	orrs	r3, r2
 800315e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800316c:	4b4c      	ldr	r3, [pc, #304]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	4949      	ldr	r1, [pc, #292]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800317a:	4313      	orrs	r3, r2
 800317c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800318a:	4b45      	ldr	r3, [pc, #276]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4942      	ldr	r1, [pc, #264]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031a8:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	493a      	ldr	r1, [pc, #232]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80031c6:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	4933      	ldr	r1, [pc, #204]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031e4:	4b2e      	ldr	r3, [pc, #184]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f0:	492b      	ldr	r1, [pc, #172]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003202:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	4924      	ldr	r1, [pc, #144]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003210:	4313      	orrs	r3, r2
 8003212:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003220:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322c:	491c      	ldr	r1, [pc, #112]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800322e:	4313      	orrs	r3, r2
 8003230:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800323e:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324a:	4915      	ldr	r1, [pc, #84]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800324c:	4313      	orrs	r3, r2
 800324e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800325c:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	490d      	ldr	r1, [pc, #52]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800326a:	4313      	orrs	r3, r2
 800326c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003286:	4906      	ldr	r1, [pc, #24]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003288:	4313      	orrs	r3, r2
 800328a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00c      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003298:	4b01      	ldr	r3, [pc, #4]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	e002      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000
 80032a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ac:	490b      	ldr	r1, [pc, #44]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80032be:	4b07      	ldr	r3, [pc, #28]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ca:	4904      	ldr	r1, [pc, #16]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3748      	adds	r7, #72	; 0x48
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000

080032e0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e083      	b.n	80033fa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	7f5b      	ldrb	r3, [r3, #29]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fd f9a4 	bl	8000650 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	22ca      	movs	r2, #202	; 0xca
 8003314:	625a      	str	r2, [r3, #36]	; 0x24
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2253      	movs	r2, #83	; 0x53
 800331c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f897 	bl	8003452 <RTC_EnterInitMode>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d008      	beq.n	800333c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	22ff      	movs	r2, #255	; 0xff
 8003330:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2204      	movs	r2, #4
 8003336:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e05e      	b.n	80033fa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6812      	ldr	r2, [r2, #0]
 8003346:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800334a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800334e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6899      	ldr	r1, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68d2      	ldr	r2, [r2, #12]
 8003376:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6919      	ldr	r1, [r3, #16]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	041a      	lsls	r2, r3, #16
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800339a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10e      	bne.n	80033c8 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f829 	bl	8003402 <HAL_RTC_WaitForSynchro>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	22ff      	movs	r2, #255	; 0xff
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2204      	movs	r2, #4
 80033c2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e018      	b.n	80033fa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	22ff      	movs	r2, #255	; 0xff
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80033f8:	2300      	movs	r3, #0
  }
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800341c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800341e:	f7fd fa6f 	bl	8000900 <HAL_GetTick>
 8003422:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003424:	e009      	b.n	800343a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003426:	f7fd fa6b 	bl	8000900 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003434:	d901      	bls.n	800343a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e007      	b.n	800344a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0ee      	beq.n	8003426 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d119      	bne.n	80034a0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f04f 32ff 	mov.w	r2, #4294967295
 8003474:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003476:	f7fd fa43 	bl	8000900 <HAL_GetTick>
 800347a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800347c:	e009      	b.n	8003492 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800347e:	f7fd fa3f 	bl	8000900 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800348c:	d901      	bls.n	8003492 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e007      	b.n	80034a2 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ee      	beq.n	800347e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e01d      	b.n	80034f8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d106      	bne.n	80034d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f815 	bl	8003500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2202      	movs	r2, #2
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3304      	adds	r3, #4
 80034e6:	4619      	mov	r1, r3
 80034e8:	4610      	mov	r0, r2
 80034ea:	f000 f985 	bl	80037f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <HAL_TIM_Base_Start_IT+0x50>)
 8003534:	4013      	ands	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b06      	cmp	r3, #6
 800353c:	d00b      	beq.n	8003556 <HAL_TIM_Base_Start_IT+0x42>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003544:	d007      	beq.n	8003556 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	00010007 	.word	0x00010007

08003568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b02      	cmp	r3, #2
 800357c:	d122      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b02      	cmp	r3, #2
 800358a:	d11b      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0202 	mvn.w	r2, #2
 8003594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f905 	bl	80037ba <HAL_TIM_IC_CaptureCallback>
 80035b0:	e005      	b.n	80035be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f8f7 	bl	80037a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f908 	bl	80037ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d122      	bne.n	8003618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d11b      	bne.n	8003618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0204 	mvn.w	r2, #4
 80035e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f8db 	bl	80037ba <HAL_TIM_IC_CaptureCallback>
 8003604:	e005      	b.n	8003612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f8cd 	bl	80037a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f8de 	bl	80037ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b08      	cmp	r3, #8
 8003624:	d122      	bne.n	800366c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b08      	cmp	r3, #8
 8003632:	d11b      	bne.n	800366c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0208 	mvn.w	r2, #8
 800363c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2204      	movs	r2, #4
 8003642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f8b1 	bl	80037ba <HAL_TIM_IC_CaptureCallback>
 8003658:	e005      	b.n	8003666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f8a3 	bl	80037a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f8b4 	bl	80037ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b10      	cmp	r3, #16
 8003678:	d122      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	2b10      	cmp	r3, #16
 8003686:	d11b      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0210 	mvn.w	r2, #16
 8003690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2208      	movs	r2, #8
 8003696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f887 	bl	80037ba <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f879 	bl	80037a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f88a 	bl	80037ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d10e      	bne.n	80036ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d107      	bne.n	80036ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0201 	mvn.w	r2, #1
 80036e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fc ff70 	bl	80005cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f6:	2b80      	cmp	r3, #128	; 0x80
 80036f8:	d10e      	bne.n	8003718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003704:	2b80      	cmp	r3, #128	; 0x80
 8003706:	d107      	bne.n	8003718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f918 	bl	8003948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003726:	d10e      	bne.n	8003746 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003732:	2b80      	cmp	r3, #128	; 0x80
 8003734:	d107      	bne.n	8003746 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800373e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f90b 	bl	800395c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b40      	cmp	r3, #64	; 0x40
 8003752:	d10e      	bne.n	8003772 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d107      	bne.n	8003772 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800376a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f838 	bl	80037e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b20      	cmp	r3, #32
 800377e:	d10e      	bne.n	800379e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b20      	cmp	r3, #32
 800378c:	d107      	bne.n	800379e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f06f 0220 	mvn.w	r2, #32
 8003796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f8cb 	bl	8003934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
	...

080037f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a42      	ldr	r2, [pc, #264]	; (8003914 <TIM_Base_SetConfig+0x11c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d013      	beq.n	8003838 <TIM_Base_SetConfig+0x40>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003816:	d00f      	beq.n	8003838 <TIM_Base_SetConfig+0x40>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a3f      	ldr	r2, [pc, #252]	; (8003918 <TIM_Base_SetConfig+0x120>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00b      	beq.n	8003838 <TIM_Base_SetConfig+0x40>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a3e      	ldr	r2, [pc, #248]	; (800391c <TIM_Base_SetConfig+0x124>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d007      	beq.n	8003838 <TIM_Base_SetConfig+0x40>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a3d      	ldr	r2, [pc, #244]	; (8003920 <TIM_Base_SetConfig+0x128>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d003      	beq.n	8003838 <TIM_Base_SetConfig+0x40>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a3c      	ldr	r2, [pc, #240]	; (8003924 <TIM_Base_SetConfig+0x12c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d108      	bne.n	800384a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a31      	ldr	r2, [pc, #196]	; (8003914 <TIM_Base_SetConfig+0x11c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d01f      	beq.n	8003892 <TIM_Base_SetConfig+0x9a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003858:	d01b      	beq.n	8003892 <TIM_Base_SetConfig+0x9a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a2e      	ldr	r2, [pc, #184]	; (8003918 <TIM_Base_SetConfig+0x120>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d017      	beq.n	8003892 <TIM_Base_SetConfig+0x9a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a2d      	ldr	r2, [pc, #180]	; (800391c <TIM_Base_SetConfig+0x124>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <TIM_Base_SetConfig+0x9a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a2c      	ldr	r2, [pc, #176]	; (8003920 <TIM_Base_SetConfig+0x128>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00f      	beq.n	8003892 <TIM_Base_SetConfig+0x9a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a2c      	ldr	r2, [pc, #176]	; (8003928 <TIM_Base_SetConfig+0x130>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00b      	beq.n	8003892 <TIM_Base_SetConfig+0x9a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a2b      	ldr	r2, [pc, #172]	; (800392c <TIM_Base_SetConfig+0x134>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d007      	beq.n	8003892 <TIM_Base_SetConfig+0x9a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a2a      	ldr	r2, [pc, #168]	; (8003930 <TIM_Base_SetConfig+0x138>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d003      	beq.n	8003892 <TIM_Base_SetConfig+0x9a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a25      	ldr	r2, [pc, #148]	; (8003924 <TIM_Base_SetConfig+0x12c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d108      	bne.n	80038a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a12      	ldr	r2, [pc, #72]	; (8003914 <TIM_Base_SetConfig+0x11c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d013      	beq.n	80038f8 <TIM_Base_SetConfig+0x100>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a13      	ldr	r2, [pc, #76]	; (8003920 <TIM_Base_SetConfig+0x128>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00f      	beq.n	80038f8 <TIM_Base_SetConfig+0x100>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a13      	ldr	r2, [pc, #76]	; (8003928 <TIM_Base_SetConfig+0x130>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00b      	beq.n	80038f8 <TIM_Base_SetConfig+0x100>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a12      	ldr	r2, [pc, #72]	; (800392c <TIM_Base_SetConfig+0x134>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d007      	beq.n	80038f8 <TIM_Base_SetConfig+0x100>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a11      	ldr	r2, [pc, #68]	; (8003930 <TIM_Base_SetConfig+0x138>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d003      	beq.n	80038f8 <TIM_Base_SetConfig+0x100>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a0c      	ldr	r2, [pc, #48]	; (8003924 <TIM_Base_SetConfig+0x12c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d103      	bne.n	8003900 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	615a      	str	r2, [r3, #20]
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40012c00 	.word	0x40012c00
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800
 8003920:	40013400 	.word	0x40013400
 8003924:	40015000 	.word	0x40015000
 8003928:	40014000 	.word	0x40014000
 800392c:	40014400 	.word	0x40014400
 8003930:	40014800 	.word	0x40014800

08003934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e040      	b.n	8003a04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fc fe82 	bl	800069c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2224      	movs	r2, #36	; 0x24
 800399c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0201 	bic.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f82c 	bl	8003a0c <UART_SetConfig>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e022      	b.n	8003a04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fa3a 	bl	8003e40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fac1 	bl	8003f84 <UART_CheckIdleState>
 8003a02:	4603      	mov	r3, r0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4bac      	ldr	r3, [pc, #688]	; (8003cec <UART_SetConfig+0x2e0>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	6939      	ldr	r1, [r7, #16]
 8003a44:	430b      	orrs	r3, r1
 8003a46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a9a      	ldr	r2, [pc, #616]	; (8003cf0 <UART_SetConfig+0x2e4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d121      	bne.n	8003ad0 <UART_SetConfig+0xc4>
 8003a8c:	4b99      	ldr	r3, [pc, #612]	; (8003cf4 <UART_SetConfig+0x2e8>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d817      	bhi.n	8003ac8 <UART_SetConfig+0xbc>
 8003a98:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <UART_SetConfig+0x94>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003ab1 	.word	0x08003ab1
 8003aa4:	08003abd 	.word	0x08003abd
 8003aa8:	08003ac3 	.word	0x08003ac3
 8003aac:	08003ab7 	.word	0x08003ab7
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e0b2      	b.n	8003c1c <UART_SetConfig+0x210>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	77fb      	strb	r3, [r7, #31]
 8003aba:	e0af      	b.n	8003c1c <UART_SetConfig+0x210>
 8003abc:	2304      	movs	r3, #4
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e0ac      	b.n	8003c1c <UART_SetConfig+0x210>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e0a9      	b.n	8003c1c <UART_SetConfig+0x210>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	bf00      	nop
 8003ace:	e0a5      	b.n	8003c1c <UART_SetConfig+0x210>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a88      	ldr	r2, [pc, #544]	; (8003cf8 <UART_SetConfig+0x2ec>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d123      	bne.n	8003b22 <UART_SetConfig+0x116>
 8003ada:	4b86      	ldr	r3, [pc, #536]	; (8003cf4 <UART_SetConfig+0x2e8>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae6:	d012      	beq.n	8003b0e <UART_SetConfig+0x102>
 8003ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aec:	d802      	bhi.n	8003af4 <UART_SetConfig+0xe8>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d007      	beq.n	8003b02 <UART_SetConfig+0xf6>
 8003af2:	e012      	b.n	8003b1a <UART_SetConfig+0x10e>
 8003af4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003af8:	d00c      	beq.n	8003b14 <UART_SetConfig+0x108>
 8003afa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003afe:	d003      	beq.n	8003b08 <UART_SetConfig+0xfc>
 8003b00:	e00b      	b.n	8003b1a <UART_SetConfig+0x10e>
 8003b02:	2300      	movs	r3, #0
 8003b04:	77fb      	strb	r3, [r7, #31]
 8003b06:	e089      	b.n	8003c1c <UART_SetConfig+0x210>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	77fb      	strb	r3, [r7, #31]
 8003b0c:	e086      	b.n	8003c1c <UART_SetConfig+0x210>
 8003b0e:	2304      	movs	r3, #4
 8003b10:	77fb      	strb	r3, [r7, #31]
 8003b12:	e083      	b.n	8003c1c <UART_SetConfig+0x210>
 8003b14:	2308      	movs	r3, #8
 8003b16:	77fb      	strb	r3, [r7, #31]
 8003b18:	e080      	b.n	8003c1c <UART_SetConfig+0x210>
 8003b1a:	2310      	movs	r3, #16
 8003b1c:	77fb      	strb	r3, [r7, #31]
 8003b1e:	bf00      	nop
 8003b20:	e07c      	b.n	8003c1c <UART_SetConfig+0x210>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a75      	ldr	r2, [pc, #468]	; (8003cfc <UART_SetConfig+0x2f0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d123      	bne.n	8003b74 <UART_SetConfig+0x168>
 8003b2c:	4b71      	ldr	r3, [pc, #452]	; (8003cf4 <UART_SetConfig+0x2e8>)
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003b34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b38:	d012      	beq.n	8003b60 <UART_SetConfig+0x154>
 8003b3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b3e:	d802      	bhi.n	8003b46 <UART_SetConfig+0x13a>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d007      	beq.n	8003b54 <UART_SetConfig+0x148>
 8003b44:	e012      	b.n	8003b6c <UART_SetConfig+0x160>
 8003b46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b4a:	d00c      	beq.n	8003b66 <UART_SetConfig+0x15a>
 8003b4c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b50:	d003      	beq.n	8003b5a <UART_SetConfig+0x14e>
 8003b52:	e00b      	b.n	8003b6c <UART_SetConfig+0x160>
 8003b54:	2300      	movs	r3, #0
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e060      	b.n	8003c1c <UART_SetConfig+0x210>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	77fb      	strb	r3, [r7, #31]
 8003b5e:	e05d      	b.n	8003c1c <UART_SetConfig+0x210>
 8003b60:	2304      	movs	r3, #4
 8003b62:	77fb      	strb	r3, [r7, #31]
 8003b64:	e05a      	b.n	8003c1c <UART_SetConfig+0x210>
 8003b66:	2308      	movs	r3, #8
 8003b68:	77fb      	strb	r3, [r7, #31]
 8003b6a:	e057      	b.n	8003c1c <UART_SetConfig+0x210>
 8003b6c:	2310      	movs	r3, #16
 8003b6e:	77fb      	strb	r3, [r7, #31]
 8003b70:	bf00      	nop
 8003b72:	e053      	b.n	8003c1c <UART_SetConfig+0x210>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a61      	ldr	r2, [pc, #388]	; (8003d00 <UART_SetConfig+0x2f4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d123      	bne.n	8003bc6 <UART_SetConfig+0x1ba>
 8003b7e:	4b5d      	ldr	r3, [pc, #372]	; (8003cf4 <UART_SetConfig+0x2e8>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b8a:	d012      	beq.n	8003bb2 <UART_SetConfig+0x1a6>
 8003b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b90:	d802      	bhi.n	8003b98 <UART_SetConfig+0x18c>
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <UART_SetConfig+0x19a>
 8003b96:	e012      	b.n	8003bbe <UART_SetConfig+0x1b2>
 8003b98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b9c:	d00c      	beq.n	8003bb8 <UART_SetConfig+0x1ac>
 8003b9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ba2:	d003      	beq.n	8003bac <UART_SetConfig+0x1a0>
 8003ba4:	e00b      	b.n	8003bbe <UART_SetConfig+0x1b2>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e037      	b.n	8003c1c <UART_SetConfig+0x210>
 8003bac:	2302      	movs	r3, #2
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e034      	b.n	8003c1c <UART_SetConfig+0x210>
 8003bb2:	2304      	movs	r3, #4
 8003bb4:	77fb      	strb	r3, [r7, #31]
 8003bb6:	e031      	b.n	8003c1c <UART_SetConfig+0x210>
 8003bb8:	2308      	movs	r3, #8
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e02e      	b.n	8003c1c <UART_SetConfig+0x210>
 8003bbe:	2310      	movs	r3, #16
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	bf00      	nop
 8003bc4:	e02a      	b.n	8003c1c <UART_SetConfig+0x210>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a4e      	ldr	r2, [pc, #312]	; (8003d04 <UART_SetConfig+0x2f8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d123      	bne.n	8003c18 <UART_SetConfig+0x20c>
 8003bd0:	4b48      	ldr	r3, [pc, #288]	; (8003cf4 <UART_SetConfig+0x2e8>)
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bdc:	d012      	beq.n	8003c04 <UART_SetConfig+0x1f8>
 8003bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be2:	d802      	bhi.n	8003bea <UART_SetConfig+0x1de>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <UART_SetConfig+0x1ec>
 8003be8:	e012      	b.n	8003c10 <UART_SetConfig+0x204>
 8003bea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bee:	d00c      	beq.n	8003c0a <UART_SetConfig+0x1fe>
 8003bf0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bf4:	d003      	beq.n	8003bfe <UART_SetConfig+0x1f2>
 8003bf6:	e00b      	b.n	8003c10 <UART_SetConfig+0x204>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e00e      	b.n	8003c1c <UART_SetConfig+0x210>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	77fb      	strb	r3, [r7, #31]
 8003c02:	e00b      	b.n	8003c1c <UART_SetConfig+0x210>
 8003c04:	2304      	movs	r3, #4
 8003c06:	77fb      	strb	r3, [r7, #31]
 8003c08:	e008      	b.n	8003c1c <UART_SetConfig+0x210>
 8003c0a:	2308      	movs	r3, #8
 8003c0c:	77fb      	strb	r3, [r7, #31]
 8003c0e:	e005      	b.n	8003c1c <UART_SetConfig+0x210>
 8003c10:	2310      	movs	r3, #16
 8003c12:	77fb      	strb	r3, [r7, #31]
 8003c14:	bf00      	nop
 8003c16:	e001      	b.n	8003c1c <UART_SetConfig+0x210>
 8003c18:	2310      	movs	r3, #16
 8003c1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c24:	f040 8090 	bne.w	8003d48 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003c28:	7ffb      	ldrb	r3, [r7, #31]
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d86c      	bhi.n	8003d08 <UART_SetConfig+0x2fc>
 8003c2e:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <UART_SetConfig+0x228>)
 8003c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c34:	08003c59 	.word	0x08003c59
 8003c38:	08003c79 	.word	0x08003c79
 8003c3c:	08003c99 	.word	0x08003c99
 8003c40:	08003d09 	.word	0x08003d09
 8003c44:	08003cb5 	.word	0x08003cb5
 8003c48:	08003d09 	.word	0x08003d09
 8003c4c:	08003d09 	.word	0x08003d09
 8003c50:	08003d09 	.word	0x08003d09
 8003c54:	08003cd5 	.word	0x08003cd5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c58:	f7ff f8ae 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8003c5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	005a      	lsls	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	085b      	lsrs	r3, r3, #1
 8003c68:	441a      	add	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	61bb      	str	r3, [r7, #24]
        break;
 8003c76:	e04a      	b.n	8003d0e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c78:	f7ff f8c0 	bl	8002dfc <HAL_RCC_GetPCLK2Freq>
 8003c7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	005a      	lsls	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	441a      	add	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	61bb      	str	r3, [r7, #24]
        break;
 8003c96:	e03a      	b.n	8003d0e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003ca2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6852      	ldr	r2, [r2, #4]
 8003caa:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	61bb      	str	r3, [r7, #24]
        break;
 8003cb2:	e02c      	b.n	8003d0e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb4:	f7ff f80a 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8003cb8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	005a      	lsls	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	085b      	lsrs	r3, r3, #1
 8003cc4:	441a      	add	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	61bb      	str	r3, [r7, #24]
        break;
 8003cd2:	e01c      	b.n	8003d0e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	61bb      	str	r3, [r7, #24]
        break;
 8003cea:	e010      	b.n	8003d0e <UART_SetConfig+0x302>
 8003cec:	efff69f3 	.word	0xefff69f3
 8003cf0:	40013800 	.word	0x40013800
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40004400 	.word	0x40004400
 8003cfc:	40004800 	.word	0x40004800
 8003d00:	40004c00 	.word	0x40004c00
 8003d04:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	75fb      	strb	r3, [r7, #23]
        break;
 8003d0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b0f      	cmp	r3, #15
 8003d12:	d916      	bls.n	8003d42 <UART_SetConfig+0x336>
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1a:	d212      	bcs.n	8003d42 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	f023 030f 	bic.w	r3, r3, #15
 8003d24:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	085b      	lsrs	r3, r3, #1
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	897b      	ldrh	r3, [r7, #10]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	897a      	ldrh	r2, [r7, #10]
 8003d3e:	60da      	str	r2, [r3, #12]
 8003d40:	e072      	b.n	8003e28 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	75fb      	strb	r3, [r7, #23]
 8003d46:	e06f      	b.n	8003e28 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8003d48:	7ffb      	ldrb	r3, [r7, #31]
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d85b      	bhi.n	8003e06 <UART_SetConfig+0x3fa>
 8003d4e:	a201      	add	r2, pc, #4	; (adr r2, 8003d54 <UART_SetConfig+0x348>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003d79 	.word	0x08003d79
 8003d58:	08003d97 	.word	0x08003d97
 8003d5c:	08003db5 	.word	0x08003db5
 8003d60:	08003e07 	.word	0x08003e07
 8003d64:	08003dd1 	.word	0x08003dd1
 8003d68:	08003e07 	.word	0x08003e07
 8003d6c:	08003e07 	.word	0x08003e07
 8003d70:	08003e07 	.word	0x08003e07
 8003d74:	08003def 	.word	0x08003def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d78:	f7ff f81e 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8003d7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	085a      	lsrs	r2, r3, #1
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	441a      	add	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	61bb      	str	r3, [r7, #24]
        break;
 8003d94:	e03a      	b.n	8003e0c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d96:	f7ff f831 	bl	8002dfc <HAL_RCC_GetPCLK2Freq>
 8003d9a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	085a      	lsrs	r2, r3, #1
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	441a      	add	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	61bb      	str	r3, [r7, #24]
        break;
 8003db2:	e02b      	b.n	8003e0c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003dbe:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6852      	ldr	r2, [r2, #4]
 8003dc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	61bb      	str	r3, [r7, #24]
        break;
 8003dce:	e01d      	b.n	8003e0c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd0:	f7fe ff7c 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8003dd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	085a      	lsrs	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	441a      	add	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	61bb      	str	r3, [r7, #24]
        break;
 8003dec:	e00e      	b.n	8003e0c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	61bb      	str	r3, [r7, #24]
        break;
 8003e04:	e002      	b.n	8003e0c <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
        break;
 8003e0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b0f      	cmp	r3, #15
 8003e10:	d908      	bls.n	8003e24 <UART_SetConfig+0x418>
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e18:	d204      	bcs.n	8003e24 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	60da      	str	r2, [r3, #12]
 8003e22:	e001      	b.n	8003e28 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop

08003e40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01a      	beq.n	8003f56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f3e:	d10a      	bne.n	8003f56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	605a      	str	r2, [r3, #4]
  }
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003f92:	f7fc fcb5 	bl	8000900 <HAL_GetTick>
 8003f96:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d10e      	bne.n	8003fc4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fa6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f82a 	bl	800400e <UART_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e020      	b.n	8004006 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d10e      	bne.n	8003ff0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f814 	bl	800400e <UART_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e00a      	b.n	8004006 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	4613      	mov	r3, r2
 800401c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800401e:	e05d      	b.n	80040dc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004026:	d059      	beq.n	80040dc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004028:	f7fc fc6a 	bl	8000900 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	429a      	cmp	r2, r3
 8004036:	d302      	bcc.n	800403e <UART_WaitOnFlagUntilTimeout+0x30>
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d11b      	bne.n	8004076 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800404c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e042      	b.n	80040fc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d02b      	beq.n	80040dc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800408e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004092:	d123      	bne.n	80040dc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800409c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040ac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0201 	bic.w	r2, r2, #1
 80040bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2220      	movs	r2, #32
 80040c2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2220      	movs	r2, #32
 80040c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e00f      	b.n	80040fc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	69da      	ldr	r2, [r3, #28]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	4013      	ands	r3, r2
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	bf0c      	ite	eq
 80040ec:	2301      	moveq	r3, #1
 80040ee:	2300      	movne	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d092      	beq.n	8004020 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800410c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004110:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004118:	b29a      	uxth	r2, r3
 800411a:	89fb      	ldrh	r3, [r7, #14]
 800411c:	4313      	orrs	r3, r2
 800411e:	b29a      	uxth	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800413c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004140:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004148:	b29b      	uxth	r3, r3
 800414a:	b21a      	sxth	r2, r3
 800414c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004150:	43db      	mvns	r3, r3
 8004152:	b21b      	sxth	r3, r3
 8004154:	4013      	ands	r3, r2
 8004156:	b21b      	sxth	r3, r3
 8004158:	b29a      	uxth	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800416e:	b084      	sub	sp, #16
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	f107 0014 	add.w	r0, r7, #20
 800417c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ffaf 	bl	8004104 <USB_EnableGlobalInt>

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041b2:	b004      	add	sp, #16
 80041b4:	4770      	bx	lr
	...

080041b8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80041b8:	b490      	push	{r4, r7}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80041d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041dc:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	78db      	ldrb	r3, [r3, #3]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d819      	bhi.n	800421a <USB_ActivateEndpoint+0x62>
 80041e6:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <USB_ActivateEndpoint+0x34>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	080041fd 	.word	0x080041fd
 80041f0:	08004211 	.word	0x08004211
 80041f4:	08004221 	.word	0x08004221
 80041f8:	08004207 	.word	0x08004207
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80041fc:	8abb      	ldrh	r3, [r7, #20]
 80041fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004202:	82bb      	strh	r3, [r7, #20]
      break;
 8004204:	e00d      	b.n	8004222 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004206:	8abb      	ldrh	r3, [r7, #20]
 8004208:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800420c:	82bb      	strh	r3, [r7, #20]
      break;
 800420e:	e008      	b.n	8004222 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004210:	8abb      	ldrh	r3, [r7, #20]
 8004212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004216:	82bb      	strh	r3, [r7, #20]
      break;
 8004218:	e003      	b.n	8004222 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	75fb      	strb	r3, [r7, #23]
      break;
 800421e:	e000      	b.n	8004222 <USB_ActivateEndpoint+0x6a>
      break;
 8004220:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	441a      	add	r2, r3
 800422c:	8abb      	ldrh	r3, [r7, #20]
 800422e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800423a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800423e:	b29b      	uxth	r3, r3
 8004240:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b29b      	uxth	r3, r3
 8004250:	b21b      	sxth	r3, r3
 8004252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425a:	b21a      	sxth	r2, r3
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	b21b      	sxth	r3, r3
 8004262:	4313      	orrs	r3, r2
 8004264:	b21b      	sxth	r3, r3
 8004266:	b29c      	uxth	r4, r3
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	441a      	add	r2, r3
 8004272:	4b8c      	ldr	r3, [pc, #560]	; (80044a4 <USB_ActivateEndpoint+0x2ec>)
 8004274:	4323      	orrs	r3, r4
 8004276:	b29b      	uxth	r3, r3
 8004278:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	7b1b      	ldrb	r3, [r3, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	f040 8116 	bne.w	80044b0 <USB_ActivateEndpoint+0x2f8>
  {
    if (ep->is_in != 0U)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	785b      	ldrb	r3, [r3, #1]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d067      	beq.n	800435c <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800428c:	687c      	ldr	r4, [r7, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004294:	b29b      	uxth	r3, r3
 8004296:	441c      	add	r4, r3
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4423      	add	r3, r4
 80042a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042a4:	461c      	mov	r4, r3
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	88db      	ldrh	r3, [r3, #6]
 80042aa:	085b      	lsrs	r3, r3, #1
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	b29c      	uxth	r4, r3
 80042c2:	4623      	mov	r3, r4
 80042c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d014      	beq.n	80042f6 <USB_ActivateEndpoint+0x13e>
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e2:	b29c      	uxth	r4, r3
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	441a      	add	r2, r3
 80042ee:	4b6e      	ldr	r3, [pc, #440]	; (80044a8 <USB_ActivateEndpoint+0x2f0>)
 80042f0:	4323      	orrs	r3, r4
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	78db      	ldrb	r3, [r3, #3]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d018      	beq.n	8004330 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	b29b      	uxth	r3, r3
 800430c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004314:	b29c      	uxth	r4, r3
 8004316:	f084 0320 	eor.w	r3, r4, #32
 800431a:	b29c      	uxth	r4, r3
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	441a      	add	r2, r3
 8004326:	4b5f      	ldr	r3, [pc, #380]	; (80044a4 <USB_ActivateEndpoint+0x2ec>)
 8004328:	4323      	orrs	r3, r4
 800432a:	b29b      	uxth	r3, r3
 800432c:	8013      	strh	r3, [r2, #0]
 800432e:	e22f      	b.n	8004790 <USB_ActivateEndpoint+0x5d8>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004346:	b29c      	uxth	r4, r3
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	441a      	add	r2, r3
 8004352:	4b54      	ldr	r3, [pc, #336]	; (80044a4 <USB_ActivateEndpoint+0x2ec>)
 8004354:	4323      	orrs	r3, r4
 8004356:	b29b      	uxth	r3, r3
 8004358:	8013      	strh	r3, [r2, #0]
 800435a:	e219      	b.n	8004790 <USB_ActivateEndpoint+0x5d8>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800435c:	687c      	ldr	r4, [r7, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004364:	b29b      	uxth	r3, r3
 8004366:	441c      	add	r4, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4423      	add	r3, r4
 8004370:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004374:	461c      	mov	r4, r3
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	88db      	ldrh	r3, [r3, #6]
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	b29b      	uxth	r3, r3
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	b29b      	uxth	r3, r3
 8004382:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004384:	687c      	ldr	r4, [r7, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800438c:	b29b      	uxth	r3, r3
 800438e:	441c      	add	r4, r3
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4423      	add	r3, r4
 8004398:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d110      	bne.n	80043c8 <USB_ActivateEndpoint+0x210>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	801a      	strh	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	801a      	strh	r2, [r3, #0]
 80043c6:	e02f      	b.n	8004428 <USB_ActivateEndpoint+0x270>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	2b3e      	cmp	r3, #62	; 0x3e
 80043ce:	d813      	bhi.n	80043f8 <USB_ActivateEndpoint+0x240>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <USB_ActivateEndpoint+0x232>
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	3301      	adds	r3, #1
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	029b      	lsls	r3, r3, #10
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	801a      	strh	r2, [r3, #0]
 80043f6:	e017      	b.n	8004428 <USB_ActivateEndpoint+0x270>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <USB_ActivateEndpoint+0x25a>
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	3b01      	subs	r3, #1
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	b29b      	uxth	r3, r3
 8004416:	029b      	lsls	r3, r3, #10
 8004418:	b29b      	uxth	r3, r3
 800441a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800441e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	b29c      	uxth	r4, r3
 8004436:	4623      	mov	r3, r4
 8004438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d014      	beq.n	800446a <USB_ActivateEndpoint+0x2b2>
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	b29b      	uxth	r3, r3
 800444e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004456:	b29c      	uxth	r4, r3
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	441a      	add	r2, r3
 8004462:	4b12      	ldr	r3, [pc, #72]	; (80044ac <USB_ActivateEndpoint+0x2f4>)
 8004464:	4323      	orrs	r3, r4
 8004466:	b29b      	uxth	r3, r3
 8004468:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	b29b      	uxth	r3, r3
 8004478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800447c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004480:	b29c      	uxth	r4, r3
 8004482:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004486:	b29c      	uxth	r4, r3
 8004488:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800448c:	b29c      	uxth	r4, r3
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	441a      	add	r2, r3
 8004498:	4b02      	ldr	r3, [pc, #8]	; (80044a4 <USB_ActivateEndpoint+0x2ec>)
 800449a:	4323      	orrs	r3, r4
 800449c:	b29b      	uxth	r3, r3
 800449e:	8013      	strh	r3, [r2, #0]
 80044a0:	e176      	b.n	8004790 <USB_ActivateEndpoint+0x5d8>
 80044a2:	bf00      	nop
 80044a4:	ffff8080 	.word	0xffff8080
 80044a8:	ffff80c0 	.word	0xffff80c0
 80044ac:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c6:	b29c      	uxth	r4, r3
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	441a      	add	r2, r3
 80044d2:	4b96      	ldr	r3, [pc, #600]	; (800472c <USB_ActivateEndpoint+0x574>)
 80044d4:	4323      	orrs	r3, r4
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80044da:	687c      	ldr	r4, [r7, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	441c      	add	r4, r3
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4423      	add	r3, r4
 80044ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044f2:	461c      	mov	r4, r3
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	891b      	ldrh	r3, [r3, #8]
 80044f8:	085b      	lsrs	r3, r3, #1
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	b29b      	uxth	r3, r3
 8004500:	8023      	strh	r3, [r4, #0]
 8004502:	687c      	ldr	r4, [r7, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800450a:	b29b      	uxth	r3, r3
 800450c:	441c      	add	r4, r3
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	4423      	add	r3, r4
 8004516:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800451a:	461c      	mov	r4, r3
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	895b      	ldrh	r3, [r3, #10]
 8004520:	085b      	lsrs	r3, r3, #1
 8004522:	b29b      	uxth	r3, r3
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	b29b      	uxth	r3, r3
 8004528:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	785b      	ldrb	r3, [r3, #1]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f040 8088 	bne.w	8004644 <USB_ActivateEndpoint+0x48c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	b29c      	uxth	r4, r3
 8004542:	4623      	mov	r3, r4
 8004544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d014      	beq.n	8004576 <USB_ActivateEndpoint+0x3be>
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	b29b      	uxth	r3, r3
 800455a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004562:	b29c      	uxth	r4, r3
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	441a      	add	r2, r3
 800456e:	4b70      	ldr	r3, [pc, #448]	; (8004730 <USB_ActivateEndpoint+0x578>)
 8004570:	4323      	orrs	r3, r4
 8004572:	b29b      	uxth	r3, r3
 8004574:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b29c      	uxth	r4, r3
 8004584:	4623      	mov	r3, r4
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d014      	beq.n	80045b8 <USB_ActivateEndpoint+0x400>
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a4:	b29c      	uxth	r4, r3
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	441a      	add	r2, r3
 80045b0:	4b60      	ldr	r3, [pc, #384]	; (8004734 <USB_ActivateEndpoint+0x57c>)
 80045b2:	4323      	orrs	r3, r4
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ce:	b29c      	uxth	r4, r3
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	441a      	add	r2, r3
 80045da:	4b56      	ldr	r3, [pc, #344]	; (8004734 <USB_ActivateEndpoint+0x57c>)
 80045dc:	4323      	orrs	r3, r4
 80045de:	b29b      	uxth	r3, r3
 80045e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f8:	b29c      	uxth	r4, r3
 80045fa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80045fe:	b29c      	uxth	r4, r3
 8004600:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004604:	b29c      	uxth	r4, r3
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	441a      	add	r2, r3
 8004610:	4b49      	ldr	r3, [pc, #292]	; (8004738 <USB_ActivateEndpoint+0x580>)
 8004612:	4323      	orrs	r3, r4
 8004614:	b29b      	uxth	r3, r3
 8004616:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800462e:	b29c      	uxth	r4, r3
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	4b3f      	ldr	r3, [pc, #252]	; (8004738 <USB_ActivateEndpoint+0x580>)
 800463c:	4323      	orrs	r3, r4
 800463e:	b29b      	uxth	r3, r3
 8004640:	8013      	strh	r3, [r2, #0]
 8004642:	e0a5      	b.n	8004790 <USB_ActivateEndpoint+0x5d8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	b29c      	uxth	r4, r3
 8004652:	4623      	mov	r3, r4
 8004654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d014      	beq.n	8004686 <USB_ActivateEndpoint+0x4ce>
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b29b      	uxth	r3, r3
 800466a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004672:	b29c      	uxth	r4, r3
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	441a      	add	r2, r3
 800467e:	4b2c      	ldr	r3, [pc, #176]	; (8004730 <USB_ActivateEndpoint+0x578>)
 8004680:	4323      	orrs	r3, r4
 8004682:	b29b      	uxth	r3, r3
 8004684:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	b29c      	uxth	r4, r3
 8004694:	4623      	mov	r3, r4
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d014      	beq.n	80046c8 <USB_ActivateEndpoint+0x510>
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b4:	b29c      	uxth	r4, r3
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	441a      	add	r2, r3
 80046c0:	4b1c      	ldr	r3, [pc, #112]	; (8004734 <USB_ActivateEndpoint+0x57c>)
 80046c2:	4323      	orrs	r3, r4
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	b29c      	uxth	r4, r3
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	441a      	add	r2, r3
 80046ea:	4b11      	ldr	r3, [pc, #68]	; (8004730 <USB_ActivateEndpoint+0x578>)
 80046ec:	4323      	orrs	r3, r4
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	78db      	ldrb	r3, [r3, #3]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d020      	beq.n	800473c <USB_ActivateEndpoint+0x584>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	b29b      	uxth	r3, r3
 8004708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004710:	b29c      	uxth	r4, r3
 8004712:	f084 0320 	eor.w	r3, r4, #32
 8004716:	b29c      	uxth	r4, r3
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	4b05      	ldr	r3, [pc, #20]	; (8004738 <USB_ActivateEndpoint+0x580>)
 8004724:	4323      	orrs	r3, r4
 8004726:	b29b      	uxth	r3, r3
 8004728:	8013      	strh	r3, [r2, #0]
 800472a:	e01c      	b.n	8004766 <USB_ActivateEndpoint+0x5ae>
 800472c:	ffff8180 	.word	0xffff8180
 8004730:	ffffc080 	.word	0xffffc080
 8004734:	ffff80c0 	.word	0xffff80c0
 8004738:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	b29b      	uxth	r3, r3
 800474a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004752:	b29c      	uxth	r4, r3
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	441a      	add	r2, r3
 800475e:	4b0f      	ldr	r3, [pc, #60]	; (800479c <USB_ActivateEndpoint+0x5e4>)
 8004760:	4323      	orrs	r3, r4
 8004762:	b29b      	uxth	r3, r3
 8004764:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	b29b      	uxth	r3, r3
 8004774:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477c:	b29c      	uxth	r4, r3
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	441a      	add	r2, r3
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <USB_ActivateEndpoint+0x5e4>)
 800478a:	4323      	orrs	r3, r4
 800478c:	b29b      	uxth	r3, r3
 800478e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004790:	7dfb      	ldrb	r3, [r7, #23]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bc90      	pop	{r4, r7}
 800479a:	4770      	bx	lr
 800479c:	ffff8080 	.word	0xffff8080

080047a0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047a0:	b490      	push	{r4, r7}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	7b1b      	ldrb	r3, [r3, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d171      	bne.n	8004896 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	785b      	ldrb	r3, [r3, #1]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d036      	beq.n	8004828 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	b29c      	uxth	r4, r3
 80047c8:	4623      	mov	r3, r4
 80047ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d014      	beq.n	80047fc <USB_DeactivateEndpoint+0x5c>
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e8:	b29c      	uxth	r4, r3
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	441a      	add	r2, r3
 80047f4:	4b6b      	ldr	r3, [pc, #428]	; (80049a4 <USB_DeactivateEndpoint+0x204>)
 80047f6:	4323      	orrs	r3, r4
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004812:	b29c      	uxth	r4, r3
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	441a      	add	r2, r3
 800481e:	4b62      	ldr	r3, [pc, #392]	; (80049a8 <USB_DeactivateEndpoint+0x208>)
 8004820:	4323      	orrs	r3, r4
 8004822:	b29b      	uxth	r3, r3
 8004824:	8013      	strh	r3, [r2, #0]
 8004826:	e144      	b.n	8004ab2 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	b29c      	uxth	r4, r3
 8004836:	4623      	mov	r3, r4
 8004838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d014      	beq.n	800486a <USB_DeactivateEndpoint+0xca>
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004856:	b29c      	uxth	r4, r3
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	441a      	add	r2, r3
 8004862:	4b52      	ldr	r3, [pc, #328]	; (80049ac <USB_DeactivateEndpoint+0x20c>)
 8004864:	4323      	orrs	r3, r4
 8004866:	b29b      	uxth	r3, r3
 8004868:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800487c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004880:	b29c      	uxth	r4, r3
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	441a      	add	r2, r3
 800488c:	4b46      	ldr	r3, [pc, #280]	; (80049a8 <USB_DeactivateEndpoint+0x208>)
 800488e:	4323      	orrs	r3, r4
 8004890:	b29b      	uxth	r3, r3
 8004892:	8013      	strh	r3, [r2, #0]
 8004894:	e10d      	b.n	8004ab2 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	785b      	ldrb	r3, [r3, #1]
 800489a:	2b00      	cmp	r3, #0
 800489c:	f040 8088 	bne.w	80049b0 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b29c      	uxth	r4, r3
 80048ae:	4623      	mov	r3, r4
 80048b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d014      	beq.n	80048e2 <USB_DeactivateEndpoint+0x142>
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ce:	b29c      	uxth	r4, r3
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	441a      	add	r2, r3
 80048da:	4b34      	ldr	r3, [pc, #208]	; (80049ac <USB_DeactivateEndpoint+0x20c>)
 80048dc:	4323      	orrs	r3, r4
 80048de:	b29b      	uxth	r3, r3
 80048e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29c      	uxth	r4, r3
 80048f0:	4623      	mov	r3, r4
 80048f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d014      	beq.n	8004924 <USB_DeactivateEndpoint+0x184>
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	b29b      	uxth	r3, r3
 8004908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004910:	b29c      	uxth	r4, r3
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	441a      	add	r2, r3
 800491c:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <USB_DeactivateEndpoint+0x204>)
 800491e:	4323      	orrs	r3, r4
 8004920:	b29b      	uxth	r3, r3
 8004922:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	b29b      	uxth	r3, r3
 8004932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493a:	b29c      	uxth	r4, r3
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	441a      	add	r2, r3
 8004946:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <USB_DeactivateEndpoint+0x204>)
 8004948:	4323      	orrs	r3, r4
 800494a:	b29b      	uxth	r3, r3
 800494c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	b29b      	uxth	r3, r3
 800495c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004964:	b29c      	uxth	r4, r3
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	441a      	add	r2, r3
 8004970:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <USB_DeactivateEndpoint+0x208>)
 8004972:	4323      	orrs	r3, r4
 8004974:	b29b      	uxth	r3, r3
 8004976:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	b29b      	uxth	r3, r3
 8004986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800498e:	b29c      	uxth	r4, r3
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	441a      	add	r2, r3
 800499a:	4b03      	ldr	r3, [pc, #12]	; (80049a8 <USB_DeactivateEndpoint+0x208>)
 800499c:	4323      	orrs	r3, r4
 800499e:	b29b      	uxth	r3, r3
 80049a0:	8013      	strh	r3, [r2, #0]
 80049a2:	e086      	b.n	8004ab2 <USB_DeactivateEndpoint+0x312>
 80049a4:	ffff80c0 	.word	0xffff80c0
 80049a8:	ffff8080 	.word	0xffff8080
 80049ac:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b29c      	uxth	r4, r3
 80049be:	4623      	mov	r3, r4
 80049c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d014      	beq.n	80049f2 <USB_DeactivateEndpoint+0x252>
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049de:	b29c      	uxth	r4, r3
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	441a      	add	r2, r3
 80049ea:	4b35      	ldr	r3, [pc, #212]	; (8004ac0 <USB_DeactivateEndpoint+0x320>)
 80049ec:	4323      	orrs	r3, r4
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29c      	uxth	r4, r3
 8004a00:	4623      	mov	r3, r4
 8004a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d014      	beq.n	8004a34 <USB_DeactivateEndpoint+0x294>
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a20:	b29c      	uxth	r4, r3
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	441a      	add	r2, r3
 8004a2c:	4b25      	ldr	r3, [pc, #148]	; (8004ac4 <USB_DeactivateEndpoint+0x324>)
 8004a2e:	4323      	orrs	r3, r4
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4a:	b29c      	uxth	r4, r3
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	441a      	add	r2, r3
 8004a56:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <USB_DeactivateEndpoint+0x320>)
 8004a58:	4323      	orrs	r3, r4
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a74:	b29c      	uxth	r4, r3
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	4b11      	ldr	r3, [pc, #68]	; (8004ac8 <USB_DeactivateEndpoint+0x328>)
 8004a82:	4323      	orrs	r3, r4
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9e:	b29c      	uxth	r4, r3
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	441a      	add	r2, r3
 8004aaa:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <USB_DeactivateEndpoint+0x328>)
 8004aac:	4323      	orrs	r3, r4
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc90      	pop	{r4, r7}
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	ffffc080 	.word	0xffffc080
 8004ac4:	ffff80c0 	.word	0xffff80c0
 8004ac8:	ffff8080 	.word	0xffff8080

08004acc <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004acc:	b590      	push	{r4, r7, lr}
 8004ace:	b095      	sub	sp, #84	; 0x54
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	785b      	ldrb	r3, [r3, #1]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	f040 816d 	bne.w	8004dba <USB_EPStartXfer+0x2ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	699a      	ldr	r2, [r3, #24]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d909      	bls.n	8004b00 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af8:	1ad2      	subs	r2, r2, r3
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	619a      	str	r2, [r3, #24]
 8004afe:	e005      	b.n	8004b0c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	7b1b      	ldrb	r3, [r3, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d11a      	bne.n	8004b4a <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	6959      	ldr	r1, [r3, #20]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	88da      	ldrh	r2, [r3, #6]
 8004b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fbb6 	bl	8005292 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004b26:	687c      	ldr	r4, [r7, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	441c      	add	r4, r3
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	4423      	add	r3, r4
 8004b3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	801a      	strh	r2, [r3, #0]
 8004b48:	e11b      	b.n	8004d82 <USB_EPStartXfer+0x2b6>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d06a      	beq.n	8004c36 <USB_EPStartXfer+0x16a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b60:	687c      	ldr	r4, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	785b      	ldrb	r3, [r3, #1]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d14c      	bne.n	8004c04 <USB_EPStartXfer+0x138>
 8004b6a:	687c      	ldr	r4, [r7, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	441c      	add	r4, r3
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4423      	add	r3, r4
 8004b7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b82:	613b      	str	r3, [r7, #16]
 8004b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d110      	bne.n	8004bac <USB_EPStartXfer+0xe0>
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	801a      	strh	r2, [r3, #0]
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	801a      	strh	r2, [r3, #0]
 8004baa:	e03f      	b.n	8004c2c <USB_EPStartXfer+0x160>
 8004bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bae:	2b3e      	cmp	r3, #62	; 0x3e
 8004bb0:	d811      	bhi.n	8004bd6 <USB_EPStartXfer+0x10a>
 8004bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb4:	085b      	lsrs	r3, r3, #1
 8004bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8004bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <USB_EPStartXfer+0xfc>
 8004bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8004bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	029b      	lsls	r3, r3, #10
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	801a      	strh	r2, [r3, #0]
 8004bd4:	e02a      	b.n	8004c2c <USB_EPStartXfer+0x160>
 8004bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	647b      	str	r3, [r7, #68]	; 0x44
 8004bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bde:	f003 031f 	and.w	r3, r3, #31
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d102      	bne.n	8004bec <USB_EPStartXfer+0x120>
 8004be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be8:	3b01      	subs	r3, #1
 8004bea:	647b      	str	r3, [r7, #68]	; 0x44
 8004bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	029b      	lsls	r3, r3, #10
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	801a      	strh	r2, [r3, #0]
 8004c02:	e013      	b.n	8004c2c <USB_EPStartXfer+0x160>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	785b      	ldrb	r3, [r3, #1]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d10f      	bne.n	8004c2c <USB_EPStartXfer+0x160>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	441c      	add	r4, r3
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4423      	add	r3, r4
 8004c1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	895b      	ldrh	r3, [r3, #10]
 8004c30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004c34:	e069      	b.n	8004d0a <USB_EPStartXfer+0x23e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	785b      	ldrb	r3, [r3, #1]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d14c      	bne.n	8004cd8 <USB_EPStartXfer+0x20c>
 8004c3e:	687c      	ldr	r4, [r7, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	441c      	add	r4, r3
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	4423      	add	r3, r4
 8004c52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c56:	61bb      	str	r3, [r7, #24]
 8004c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d110      	bne.n	8004c80 <USB_EPStartXfer+0x1b4>
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	801a      	strh	r2, [r3, #0]
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	801a      	strh	r2, [r3, #0]
 8004c7e:	e040      	b.n	8004d02 <USB_EPStartXfer+0x236>
 8004c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c82:	2b3e      	cmp	r3, #62	; 0x3e
 8004c84:	d811      	bhi.n	8004caa <USB_EPStartXfer+0x1de>
 8004c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c88:	085b      	lsrs	r3, r3, #1
 8004c8a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <USB_EPStartXfer+0x1d0>
 8004c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c98:	3301      	adds	r3, #1
 8004c9a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	029b      	lsls	r3, r3, #10
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	801a      	strh	r2, [r3, #0]
 8004ca8:	e02b      	b.n	8004d02 <USB_EPStartXfer+0x236>
 8004caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cac:	095b      	lsrs	r3, r3, #5
 8004cae:	643b      	str	r3, [r7, #64]	; 0x40
 8004cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb2:	f003 031f 	and.w	r3, r3, #31
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d102      	bne.n	8004cc0 <USB_EPStartXfer+0x1f4>
 8004cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	643b      	str	r3, [r7, #64]	; 0x40
 8004cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	029b      	lsls	r3, r3, #10
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	801a      	strh	r2, [r3, #0]
 8004cd6:	e014      	b.n	8004d02 <USB_EPStartXfer+0x236>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d110      	bne.n	8004d02 <USB_EPStartXfer+0x236>
 8004ce0:	687c      	ldr	r4, [r7, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	441c      	add	r4, r3
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	4423      	add	r3, r4
 8004cf4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	891b      	ldrh	r3, [r3, #8]
 8004d06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	6959      	ldr	r1, [r3, #20]
 8004d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fabb 	bl	8005292 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d115      	bne.n	8004d50 <USB_EPStartXfer+0x284>
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3a:	b29c      	uxth	r4, r3
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	441a      	add	r2, r3
 8004d46:	4b96      	ldr	r3, [pc, #600]	; (8004fa0 <USB_EPStartXfer+0x4d4>)
 8004d48:	4323      	orrs	r3, r4
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	8013      	strh	r3, [r2, #0]
 8004d4e:	e018      	b.n	8004d82 <USB_EPStartXfer+0x2b6>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	785b      	ldrb	r3, [r3, #1]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d114      	bne.n	8004d82 <USB_EPStartXfer+0x2b6>
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6e:	b29c      	uxth	r4, r3
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	441a      	add	r2, r3
 8004d7a:	4b8a      	ldr	r3, [pc, #552]	; (8004fa4 <USB_EPStartXfer+0x4d8>)
 8004d7c:	4323      	orrs	r3, r4
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d98:	b29c      	uxth	r4, r3
 8004d9a:	f084 0310 	eor.w	r3, r4, #16
 8004d9e:	b29c      	uxth	r4, r3
 8004da0:	f084 0320 	eor.w	r3, r4, #32
 8004da4:	b29c      	uxth	r4, r3
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	441a      	add	r2, r3
 8004db0:	4b7d      	ldr	r3, [pc, #500]	; (8004fa8 <USB_EPStartXfer+0x4dc>)
 8004db2:	4323      	orrs	r3, r4
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	8013      	strh	r3, [r2, #0]
 8004db8:	e153      	b.n	8005062 <USB_EPStartXfer+0x596>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d909      	bls.n	8004dda <USB_EPStartXfer+0x30e>
    {
      len = ep->maxpacket;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	699a      	ldr	r2, [r3, #24]
 8004dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dd2:	1ad2      	subs	r2, r2, r3
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	619a      	str	r2, [r3, #24]
 8004dd8:	e005      	b.n	8004de6 <USB_EPStartXfer+0x31a>
    }
    else
    {
      len = ep->xfer_len;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2200      	movs	r2, #0
 8004de4:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	7b1b      	ldrb	r3, [r3, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d14c      	bne.n	8004e88 <USB_EPStartXfer+0x3bc>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004dee:	687c      	ldr	r4, [r7, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	441c      	add	r4, r3
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	4423      	add	r3, r4
 8004e02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e06:	623b      	str	r3, [r7, #32]
 8004e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d110      	bne.n	8004e30 <USB_EPStartXfer+0x364>
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	801a      	strh	r2, [r3, #0]
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	e0fd      	b.n	800502c <USB_EPStartXfer+0x560>
 8004e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e32:	2b3e      	cmp	r3, #62	; 0x3e
 8004e34:	d811      	bhi.n	8004e5a <USB_EPStartXfer+0x38e>
 8004e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e38:	085b      	lsrs	r3, r3, #1
 8004e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <USB_EPStartXfer+0x380>
 8004e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e48:	3301      	adds	r3, #1
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	029b      	lsls	r3, r3, #10
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	801a      	strh	r2, [r3, #0]
 8004e58:	e0e8      	b.n	800502c <USB_EPStartXfer+0x560>
 8004e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5c:	095b      	lsrs	r3, r3, #5
 8004e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e62:	f003 031f 	and.w	r3, r3, #31
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d102      	bne.n	8004e70 <USB_EPStartXfer+0x3a4>
 8004e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	029b      	lsls	r3, r3, #10
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	801a      	strh	r2, [r3, #0]
 8004e86:	e0d1      	b.n	800502c <USB_EPStartXfer+0x560>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	785b      	ldrb	r3, [r3, #1]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d14c      	bne.n	8004f2a <USB_EPStartXfer+0x45e>
 8004e90:	687c      	ldr	r4, [r7, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	441c      	add	r4, r3
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	4423      	add	r3, r4
 8004ea4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d110      	bne.n	8004ed2 <USB_EPStartXfer+0x406>
 8004eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebc:	801a      	strh	r2, [r3, #0]
 8004ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ece:	801a      	strh	r2, [r3, #0]
 8004ed0:	e040      	b.n	8004f54 <USB_EPStartXfer+0x488>
 8004ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed4:	2b3e      	cmp	r3, #62	; 0x3e
 8004ed6:	d811      	bhi.n	8004efc <USB_EPStartXfer+0x430>
 8004ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eda:	085b      	lsrs	r3, r3, #1
 8004edc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <USB_EPStartXfer+0x422>
 8004ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eea:	3301      	adds	r3, #1
 8004eec:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	029b      	lsls	r3, r3, #10
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	801a      	strh	r2, [r3, #0]
 8004efa:	e02b      	b.n	8004f54 <USB_EPStartXfer+0x488>
 8004efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d102      	bne.n	8004f12 <USB_EPStartXfer+0x446>
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	029b      	lsls	r3, r3, #10
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	801a      	strh	r2, [r3, #0]
 8004f28:	e014      	b.n	8004f54 <USB_EPStartXfer+0x488>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	785b      	ldrb	r3, [r3, #1]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d110      	bne.n	8004f54 <USB_EPStartXfer+0x488>
 8004f32:	687c      	ldr	r4, [r7, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	441c      	add	r4, r3
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	4423      	add	r3, r4
 8004f46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	687c      	ldr	r4, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	785b      	ldrb	r3, [r3, #1]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d152      	bne.n	8005004 <USB_EPStartXfer+0x538>
 8004f5e:	687c      	ldr	r4, [r7, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	441c      	add	r4, r3
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4423      	add	r3, r4
 8004f72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
 8004f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d116      	bne.n	8004fac <USB_EPStartXfer+0x4e0>
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	801a      	strh	r2, [r3, #0]
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	801a      	strh	r2, [r3, #0]
 8004f9e:	e045      	b.n	800502c <USB_EPStartXfer+0x560>
 8004fa0:	ffff80c0 	.word	0xffff80c0
 8004fa4:	ffffc080 	.word	0xffffc080
 8004fa8:	ffff8080 	.word	0xffff8080
 8004fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fae:	2b3e      	cmp	r3, #62	; 0x3e
 8004fb0:	d811      	bhi.n	8004fd6 <USB_EPStartXfer+0x50a>
 8004fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb4:	085b      	lsrs	r3, r3, #1
 8004fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <USB_EPStartXfer+0x4fc>
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8004fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	029b      	lsls	r3, r3, #10
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	801a      	strh	r2, [r3, #0]
 8004fd4:	e02a      	b.n	800502c <USB_EPStartXfer+0x560>
 8004fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fd8:	095b      	lsrs	r3, r3, #5
 8004fda:	637b      	str	r3, [r7, #52]	; 0x34
 8004fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d102      	bne.n	8004fec <USB_EPStartXfer+0x520>
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	637b      	str	r3, [r7, #52]	; 0x34
 8004fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	029b      	lsls	r3, r3, #10
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	801a      	strh	r2, [r3, #0]
 8005002:	e013      	b.n	800502c <USB_EPStartXfer+0x560>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	785b      	ldrb	r3, [r3, #1]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d10f      	bne.n	800502c <USB_EPStartXfer+0x560>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005012:	b29b      	uxth	r3, r3
 8005014:	441c      	add	r4, r3
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	4423      	add	r3, r4
 800501e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005022:	62bb      	str	r3, [r7, #40]	; 0x28
 8005024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005026:	b29a      	uxth	r2, r3
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800503e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005042:	b29c      	uxth	r4, r3
 8005044:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005048:	b29c      	uxth	r4, r3
 800504a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800504e:	b29c      	uxth	r4, r3
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	441a      	add	r2, r3
 800505a:	4b04      	ldr	r3, [pc, #16]	; (800506c <USB_EPStartXfer+0x5a0>)
 800505c:	4323      	orrs	r3, r4
 800505e:	b29b      	uxth	r3, r3
 8005060:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3754      	adds	r7, #84	; 0x54
 8005068:	46bd      	mov	sp, r7
 800506a:	bd90      	pop	{r4, r7, pc}
 800506c:	ffff8080 	.word	0xffff8080

08005070 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005070:	b490      	push	{r4, r7}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	785b      	ldrb	r3, [r3, #1]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d018      	beq.n	80050b4 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	b29b      	uxth	r3, r3
 8005090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005098:	b29c      	uxth	r4, r3
 800509a:	f084 0310 	eor.w	r3, r4, #16
 800509e:	b29c      	uxth	r4, r3
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	441a      	add	r2, r3
 80050aa:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <USB_EPSetStall+0x80>)
 80050ac:	4323      	orrs	r3, r4
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	8013      	strh	r3, [r2, #0]
 80050b2:	e017      	b.n	80050e4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	b29c      	uxth	r4, r3
 80050cc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80050d0:	b29c      	uxth	r4, r3
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	441a      	add	r2, r3
 80050dc:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <USB_EPSetStall+0x80>)
 80050de:	4323      	orrs	r3, r4
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc90      	pop	{r4, r7}
 80050ee:	4770      	bx	lr
 80050f0:	ffff8080 	.word	0xffff8080

080050f4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050f4:	b490      	push	{r4, r7}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	7b1b      	ldrb	r3, [r3, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d17d      	bne.n	8005202 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	785b      	ldrb	r3, [r3, #1]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d03d      	beq.n	800518a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29c      	uxth	r4, r3
 800511c:	4623      	mov	r3, r4
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	d014      	beq.n	8005150 <USB_EPClearStall+0x5c>
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513c:	b29c      	uxth	r4, r3
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	441a      	add	r2, r3
 8005148:	4b31      	ldr	r3, [pc, #196]	; (8005210 <USB_EPClearStall+0x11c>)
 800514a:	4323      	orrs	r3, r4
 800514c:	b29b      	uxth	r3, r3
 800514e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	78db      	ldrb	r3, [r3, #3]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d054      	beq.n	8005202 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800516a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800516e:	b29c      	uxth	r4, r3
 8005170:	f084 0320 	eor.w	r3, r4, #32
 8005174:	b29c      	uxth	r4, r3
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	441a      	add	r2, r3
 8005180:	4b24      	ldr	r3, [pc, #144]	; (8005214 <USB_EPClearStall+0x120>)
 8005182:	4323      	orrs	r3, r4
 8005184:	b29b      	uxth	r3, r3
 8005186:	8013      	strh	r3, [r2, #0]
 8005188:	e03b      	b.n	8005202 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29c      	uxth	r4, r3
 8005198:	4623      	mov	r3, r4
 800519a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d014      	beq.n	80051cc <USB_EPClearStall+0xd8>
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b8:	b29c      	uxth	r4, r3
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	441a      	add	r2, r3
 80051c4:	4b14      	ldr	r3, [pc, #80]	; (8005218 <USB_EPClearStall+0x124>)
 80051c6:	4323      	orrs	r3, r4
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e2:	b29c      	uxth	r4, r3
 80051e4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80051e8:	b29c      	uxth	r4, r3
 80051ea:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80051ee:	b29c      	uxth	r4, r3
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	441a      	add	r2, r3
 80051fa:	4b06      	ldr	r3, [pc, #24]	; (8005214 <USB_EPClearStall+0x120>)
 80051fc:	4323      	orrs	r3, r4
 80051fe:	b29b      	uxth	r3, r3
 8005200:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bc90      	pop	{r4, r7}
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	ffff80c0 	.word	0xffff80c0
 8005214:	ffff8080 	.word	0xffff8080
 8005218:	ffffc080 	.word	0xffffc080

0800521c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d103      	bne.n	8005236 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2280      	movs	r2, #128	; 0x80
 8005232:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800525a:	b480      	push	{r7}
 800525c:	b085      	sub	sp, #20
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005268:	b29b      	uxth	r3, r3
 800526a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800526c:	68fb      	ldr	r3, [r7, #12]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005292:	b480      	push	{r7}
 8005294:	b08d      	sub	sp, #52	; 0x34
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	4611      	mov	r1, r2
 800529e:	461a      	mov	r2, r3
 80052a0:	460b      	mov	r3, r1
 80052a2:	80fb      	strh	r3, [r7, #6]
 80052a4:	4613      	mov	r3, r2
 80052a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80052a8:	88bb      	ldrh	r3, [r7, #4]
 80052aa:	3301      	adds	r3, #1
 80052ac:	085b      	lsrs	r3, r3, #1
 80052ae:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80052b8:	88fa      	ldrh	r2, [r7, #6]
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c8:	e01b      	b.n	8005302 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	3301      	adds	r3, #1
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	b29b      	uxth	r3, r3
 80052e0:	461a      	mov	r2, r3
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	3302      	adds	r3, #2
 80052f4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	3301      	adds	r3, #1
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80052fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fe:	3b01      	subs	r3, #1
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e0      	bne.n	80052ca <USB_WritePMA+0x38>
  }
}
 8005308:	bf00      	nop
 800530a:	3734      	adds	r7, #52	; 0x34
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005314:	b480      	push	{r7}
 8005316:	b08b      	sub	sp, #44	; 0x2c
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	4611      	mov	r1, r2
 8005320:	461a      	mov	r2, r3
 8005322:	460b      	mov	r3, r1
 8005324:	80fb      	strh	r3, [r7, #6]
 8005326:	4613      	mov	r3, r2
 8005328:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800532a:	88bb      	ldrh	r3, [r7, #4]
 800532c:	085b      	lsrs	r3, r3, #1
 800532e:	b29b      	uxth	r3, r3
 8005330:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800533a:	88fa      	ldrh	r2, [r7, #6]
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005344:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
 800534a:	e018      	b.n	800537e <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	b29b      	uxth	r3, r3
 8005352:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	3302      	adds	r3, #2
 8005358:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	b2da      	uxtb	r2, r3
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	3301      	adds	r3, #1
 8005366:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	0a1b      	lsrs	r3, r3, #8
 800536c:	b2da      	uxtb	r2, r3
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	3301      	adds	r3, #1
 8005376:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	3b01      	subs	r3, #1
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e3      	bne.n	800534c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005384:	88bb      	ldrh	r3, [r7, #4]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d007      	beq.n	80053a0 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	b29b      	uxth	r3, r3
 8005396:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	b2da      	uxtb	r2, r3
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	701a      	strb	r2, [r3, #0]
  }
}
 80053a0:	bf00      	nop
 80053a2:	372c      	adds	r7, #44	; 0x2c
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	7c1b      	ldrb	r3, [r3, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d115      	bne.n	80053f0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80053c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053c8:	2202      	movs	r2, #2
 80053ca:	2181      	movs	r1, #129	; 0x81
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f004 fb8a 	bl	8009ae6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053dc:	2202      	movs	r2, #2
 80053de:	2101      	movs	r1, #1
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f004 fb80 	bl	8009ae6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80053ee:	e012      	b.n	8005416 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80053f0:	2340      	movs	r3, #64	; 0x40
 80053f2:	2202      	movs	r2, #2
 80053f4:	2181      	movs	r1, #129	; 0x81
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f004 fb75 	bl	8009ae6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005402:	2340      	movs	r3, #64	; 0x40
 8005404:	2202      	movs	r2, #2
 8005406:	2101      	movs	r1, #1
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f004 fb6c 	bl	8009ae6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005416:	2308      	movs	r3, #8
 8005418:	2203      	movs	r2, #3
 800541a:	2182      	movs	r1, #130	; 0x82
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f004 fb62 	bl	8009ae6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005428:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800542c:	f004 fc7c 	bl	8009d28 <USBD_static_malloc>
 8005430:	4602      	mov	r2, r0
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d102      	bne.n	8005448 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005442:	2301      	movs	r3, #1
 8005444:	73fb      	strb	r3, [r7, #15]
 8005446:	e026      	b.n	8005496 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2200      	movs	r2, #0
 800545e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2200      	movs	r2, #0
 8005466:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	7c1b      	ldrb	r3, [r3, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d109      	bne.n	8005486 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800547c:	2101      	movs	r1, #1
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f004 fc1c 	bl	8009cbc <USBD_LL_PrepareReceive>
 8005484:	e007      	b.n	8005496 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800548c:	2340      	movs	r3, #64	; 0x40
 800548e:	2101      	movs	r1, #1
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f004 fc13 	bl	8009cbc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005496:	7bfb      	ldrb	r3, [r7, #15]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80054b0:	2181      	movs	r1, #129	; 0x81
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f004 fb3d 	bl	8009b32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80054be:	2101      	movs	r1, #1
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f004 fb36 	bl	8009b32 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80054ce:	2182      	movs	r1, #130	; 0x82
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f004 fb2e 	bl	8009b32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00e      	beq.n	8005504 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f6:	4618      	mov	r0, r3
 80054f8:	f004 fc24 	bl	8009d44 <USBD_static_free>
    pdev->pClassData = NULL;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005504:	7bfb      	ldrb	r3, [r7, #15]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b086      	sub	sp, #24
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800551e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005534:	2b00      	cmp	r3, #0
 8005536:	d039      	beq.n	80055ac <USBD_CDC_Setup+0x9e>
 8005538:	2b20      	cmp	r3, #32
 800553a:	d17c      	bne.n	8005636 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	88db      	ldrh	r3, [r3, #6]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d029      	beq.n	8005598 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	b25b      	sxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	da11      	bge.n	8005572 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800555a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	88d2      	ldrh	r2, [r2, #6]
 8005560:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005562:	6939      	ldr	r1, [r7, #16]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	88db      	ldrh	r3, [r3, #6]
 8005568:	461a      	mov	r2, r3
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f001 fa00 	bl	8006970 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005570:	e068      	b.n	8005644 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	785a      	ldrb	r2, [r3, #1]
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	88db      	ldrh	r3, [r3, #6]
 8005580:	b2da      	uxtb	r2, r3
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005588:	6939      	ldr	r1, [r7, #16]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	88db      	ldrh	r3, [r3, #6]
 800558e:	461a      	mov	r2, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f001 fa1b 	bl	80069cc <USBD_CtlPrepareRx>
      break;
 8005596:	e055      	b.n	8005644 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	7850      	ldrb	r0, [r2, #1]
 80055a4:	2200      	movs	r2, #0
 80055a6:	6839      	ldr	r1, [r7, #0]
 80055a8:	4798      	blx	r3
      break;
 80055aa:	e04b      	b.n	8005644 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	785b      	ldrb	r3, [r3, #1]
 80055b0:	2b0a      	cmp	r3, #10
 80055b2:	d017      	beq.n	80055e4 <USBD_CDC_Setup+0xd6>
 80055b4:	2b0b      	cmp	r3, #11
 80055b6:	d029      	beq.n	800560c <USBD_CDC_Setup+0xfe>
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d133      	bne.n	8005624 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	d107      	bne.n	80055d6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80055c6:	f107 030c 	add.w	r3, r7, #12
 80055ca:	2202      	movs	r2, #2
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f001 f9ce 	bl	8006970 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055d4:	e02e      	b.n	8005634 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f001 f95e 	bl	800689a <USBD_CtlError>
            ret = USBD_FAIL;
 80055de:	2302      	movs	r3, #2
 80055e0:	75fb      	strb	r3, [r7, #23]
          break;
 80055e2:	e027      	b.n	8005634 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d107      	bne.n	80055fe <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80055ee:	f107 030f 	add.w	r3, r7, #15
 80055f2:	2201      	movs	r2, #1
 80055f4:	4619      	mov	r1, r3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f001 f9ba 	bl	8006970 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055fc:	e01a      	b.n	8005634 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80055fe:	6839      	ldr	r1, [r7, #0]
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f001 f94a 	bl	800689a <USBD_CtlError>
            ret = USBD_FAIL;
 8005606:	2302      	movs	r3, #2
 8005608:	75fb      	strb	r3, [r7, #23]
          break;
 800560a:	e013      	b.n	8005634 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005612:	2b03      	cmp	r3, #3
 8005614:	d00d      	beq.n	8005632 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005616:	6839      	ldr	r1, [r7, #0]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f001 f93e 	bl	800689a <USBD_CtlError>
            ret = USBD_FAIL;
 800561e:	2302      	movs	r3, #2
 8005620:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005622:	e006      	b.n	8005632 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005624:	6839      	ldr	r1, [r7, #0]
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f001 f937 	bl	800689a <USBD_CtlError>
          ret = USBD_FAIL;
 800562c:	2302      	movs	r3, #2
 800562e:	75fb      	strb	r3, [r7, #23]
          break;
 8005630:	e000      	b.n	8005634 <USBD_CDC_Setup+0x126>
          break;
 8005632:	bf00      	nop
      }
      break;
 8005634:	e006      	b.n	8005644 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005636:	6839      	ldr	r1, [r7, #0]
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f001 f92e 	bl	800689a <USBD_CtlError>
      ret = USBD_FAIL;
 800563e:	2302      	movs	r3, #2
 8005640:	75fb      	strb	r3, [r7, #23]
      break;
 8005642:	bf00      	nop
  }

  return ret;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	460b      	mov	r3, r1
 8005658:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005660:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005668:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005670:	2b00      	cmp	r3, #0
 8005672:	d037      	beq.n	80056e4 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005674:	78fa      	ldrb	r2, [r7, #3]
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	331c      	adds	r3, #28
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d026      	beq.n	80056d8 <USBD_CDC_DataIn+0x8a>
 800568a:	78fa      	ldrb	r2, [r7, #3]
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	331c      	adds	r3, #28
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	78fa      	ldrb	r2, [r7, #3]
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	0152      	lsls	r2, r2, #5
 80056a2:	440a      	add	r2, r1
 80056a4:	3238      	adds	r2, #56	; 0x38
 80056a6:	6812      	ldr	r2, [r2, #0]
 80056a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80056ac:	fb02 f201 	mul.w	r2, r2, r1
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d110      	bne.n	80056d8 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80056b6:	78fa      	ldrb	r2, [r7, #3]
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	331c      	adds	r3, #28
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80056ca:	78f9      	ldrb	r1, [r7, #3]
 80056cc:	2300      	movs	r3, #0
 80056ce:	2200      	movs	r2, #0
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f004 fad0 	bl	8009c76 <USBD_LL_Transmit>
 80056d6:	e003      	b.n	80056e0 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e000      	b.n	80056e6 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80056e4:	2302      	movs	r3, #2
  }
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
 80056f6:	460b      	mov	r3, r1
 80056f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005700:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	4619      	mov	r1, r3
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f004 fafb 	bl	8009d02 <USBD_LL_GetRxDataSize>
 800570c:	4602      	mov	r2, r0
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00d      	beq.n	800573a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005732:	4611      	mov	r1, r2
 8005734:	4798      	blx	r3

    return USBD_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	e000      	b.n	800573c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800573a:	2302      	movs	r3, #2
  }
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005752:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800575a:	2b00      	cmp	r3, #0
 800575c:	d015      	beq.n	800578a <USBD_CDC_EP0_RxReady+0x46>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005764:	2bff      	cmp	r3, #255	; 0xff
 8005766:	d010      	beq.n	800578a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005776:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800577e:	b292      	uxth	r2, r2
 8005780:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	22ff      	movs	r2, #255	; 0xff
 8005786:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2243      	movs	r2, #67	; 0x43
 80057a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80057a2:	4b03      	ldr	r3, [pc, #12]	; (80057b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	20000094 	.word	0x20000094

080057b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2243      	movs	r2, #67	; 0x43
 80057c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80057c2:	4b03      	ldr	r3, [pc, #12]	; (80057d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	20000050 	.word	0x20000050

080057d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2243      	movs	r2, #67	; 0x43
 80057e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80057e2:	4b03      	ldr	r3, [pc, #12]	; (80057f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	200000d8 	.word	0x200000d8

080057f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	220a      	movs	r2, #10
 8005800:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005802:	4b03      	ldr	r3, [pc, #12]	; (8005810 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	2000000c 	.word	0x2000000c

08005814 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800581e:	2302      	movs	r3, #2
 8005820:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005842:	b480      	push	{r7}
 8005844:	b087      	sub	sp, #28
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	4613      	mov	r3, r2
 800584e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005856:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005860:	88fa      	ldrh	r2, [r7, #6]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005876:	b480      	push	{r7}
 8005878:	b085      	sub	sp, #20
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005886:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01c      	beq.n	80058f2 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d115      	bne.n	80058ee <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2181      	movs	r1, #129	; 0x81
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f004 f9c6 	bl	8009c76 <USBD_LL_Transmit>

      return USBD_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	e002      	b.n	80058f4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80058f2:	2302      	movs	r3, #2
  }
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800590a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d017      	beq.n	8005946 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	7c1b      	ldrb	r3, [r3, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d109      	bne.n	8005932 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005928:	2101      	movs	r1, #1
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f004 f9c6 	bl	8009cbc <USBD_LL_PrepareReceive>
 8005930:	e007      	b.n	8005942 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005938:	2340      	movs	r3, #64	; 0x40
 800593a:	2101      	movs	r1, #1
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f004 f9bd 	bl	8009cbc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	e000      	b.n	8005948 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005946:	2302      	movs	r3, #2
  }
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	4613      	mov	r3, r2
 800595c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005964:	2302      	movs	r3, #2
 8005966:	e01a      	b.n	800599e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	79fa      	ldrb	r2, [r7, #7]
 8005994:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f004 f82e 	bl	80099f8 <USBD_LL_Init>

  return USBD_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b085      	sub	sp, #20
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d006      	beq.n	80059c8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	73fb      	strb	r3, [r7, #15]
 80059c6:	e001      	b.n	80059cc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80059c8:	2302      	movs	r3, #2
 80059ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f004 f864 	bl	8009ab0 <USBD_LL_Start>

  return USBD_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005a14:	2302      	movs	r3, #2
 8005a16:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00c      	beq.n	8005a3c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	78fa      	ldrb	r2, [r7, #3]
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	4798      	blx	r3
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	460b      	mov	r3, r1
 8005a50:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	78fa      	ldrb	r2, [r7, #3]
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	4798      	blx	r3

  return USBD_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fece 	bl	8006820 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a92:	461a      	mov	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005aa0:	f003 031f 	and.w	r3, r3, #31
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d00c      	beq.n	8005ac2 <USBD_LL_SetupStage+0x56>
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d302      	bcc.n	8005ab2 <USBD_LL_SetupStage+0x46>
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d010      	beq.n	8005ad2 <USBD_LL_SetupStage+0x66>
 8005ab0:	e017      	b.n	8005ae2 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f9ce 	bl	8005e5c <USBD_StdDevReq>
      break;
 8005ac0:	e01a      	b.n	8005af8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ac8:	4619      	mov	r1, r3
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fa30 	bl	8005f30 <USBD_StdItfReq>
      break;
 8005ad0:	e012      	b.n	8005af8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ad8:	4619      	mov	r1, r3
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa6e 	bl	8005fbc <USBD_StdEPReq>
      break;
 8005ae0:	e00a      	b.n	8005af8 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ae8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f004 f83d 	bl	8009b70 <USBD_LL_StallEP>
      break;
 8005af6:	bf00      	nop
  }

  return USBD_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b086      	sub	sp, #24
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	607a      	str	r2, [r7, #4]
 8005b0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005b10:	7afb      	ldrb	r3, [r7, #11]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d14b      	bne.n	8005bae <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b1c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d134      	bne.n	8005b92 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d919      	bls.n	8005b68 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	1ad2      	subs	r2, r2, r3
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d203      	bcs.n	8005b56 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	e002      	b.n	8005b5c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 ff51 	bl	8006a08 <USBD_CtlContinueRx>
 8005b66:	e038      	b.n	8005bda <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00a      	beq.n	8005b8a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d105      	bne.n	8005b8a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 ff4e 	bl	8006a2c <USBD_CtlSendStatus>
 8005b90:	e023      	b.n	8005bda <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b98:	2b05      	cmp	r3, #5
 8005b9a:	d11e      	bne.n	8005bda <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f003 ffe2 	bl	8009b70 <USBD_LL_StallEP>
 8005bac:	e015      	b.n	8005bda <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00d      	beq.n	8005bd6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d108      	bne.n	8005bd6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	7afa      	ldrb	r2, [r7, #11]
 8005bce:	4611      	mov	r1, r2
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	4798      	blx	r3
 8005bd4:	e001      	b.n	8005bda <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e000      	b.n	8005bdc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	460b      	mov	r3, r1
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005bf2:	7afb      	ldrb	r3, [r7, #11]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d17f      	bne.n	8005cf8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3314      	adds	r3, #20
 8005bfc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d15c      	bne.n	8005cc2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d915      	bls.n	8005c40 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	1ad2      	subs	r2, r2, r3
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 febb 	bl	80069a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c32:	2300      	movs	r3, #0
 8005c34:	2200      	movs	r2, #0
 8005c36:	2100      	movs	r1, #0
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f004 f83f 	bl	8009cbc <USBD_LL_PrepareReceive>
 8005c3e:	e04e      	b.n	8005cde <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	6912      	ldr	r2, [r2, #16]
 8005c48:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c4c:	fb02 f201 	mul.w	r2, r2, r1
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d11c      	bne.n	8005c90 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d316      	bcc.n	8005c90 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d20f      	bcs.n	8005c90 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c70:	2200      	movs	r2, #0
 8005c72:	2100      	movs	r1, #0
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 fe97 	bl	80069a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c82:	2300      	movs	r3, #0
 8005c84:	2200      	movs	r2, #0
 8005c86:	2100      	movs	r1, #0
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f004 f817 	bl	8009cbc <USBD_LL_PrepareReceive>
 8005c8e:	e026      	b.n	8005cde <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00a      	beq.n	8005cb2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d105      	bne.n	8005cb2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005cb2:	2180      	movs	r1, #128	; 0x80
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f003 ff5b 	bl	8009b70 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 fec9 	bl	8006a52 <USBD_CtlReceiveStatus>
 8005cc0:	e00d      	b.n	8005cde <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	d004      	beq.n	8005cd6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d103      	bne.n	8005cde <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005cd6:	2180      	movs	r1, #128	; 0x80
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f003 ff49 	bl	8009b70 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d11d      	bne.n	8005d24 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f7ff fe82 	bl	80059f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005cf6:	e015      	b.n	8005d24 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00d      	beq.n	8005d20 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d108      	bne.n	8005d20 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	7afa      	ldrb	r2, [r7, #11]
 8005d18:	4611      	mov	r1, r2
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	4798      	blx	r3
 8005d1e:	e001      	b.n	8005d24 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005d20:	2302      	movs	r3, #2
 8005d22:	e000      	b.n	8005d26 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d36:	2340      	movs	r3, #64	; 0x40
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f003 fed2 	bl	8009ae6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2240      	movs	r2, #64	; 0x40
 8005d4e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d52:	2340      	movs	r3, #64	; 0x40
 8005d54:	2200      	movs	r2, #0
 8005d56:	2180      	movs	r1, #128	; 0x80
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f003 fec4 	bl	8009ae6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2240      	movs	r2, #64	; 0x40
 8005d68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6852      	ldr	r2, [r2, #4]
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	4611      	mov	r1, r2
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	4798      	blx	r3
  }

  return USBD_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	78fa      	ldrb	r2, [r7, #3]
 8005dc0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2204      	movs	r2, #4
 8005de8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d105      	bne.n	8005e18 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d10b      	bne.n	8005e50 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d005      	beq.n	8005e50 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	d004      	beq.n	8005e80 <USBD_StdDevReq+0x24>
 8005e76:	2b40      	cmp	r3, #64	; 0x40
 8005e78:	d002      	beq.n	8005e80 <USBD_StdDevReq+0x24>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d008      	beq.n	8005e90 <USBD_StdDevReq+0x34>
 8005e7e:	e04c      	b.n	8005f1a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	6839      	ldr	r1, [r7, #0]
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4798      	blx	r3
      break;
 8005e8e:	e049      	b.n	8005f24 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	785b      	ldrb	r3, [r3, #1]
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d83a      	bhi.n	8005f0e <USBD_StdDevReq+0xb2>
 8005e98:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <USBD_StdDevReq+0x44>)
 8005e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9e:	bf00      	nop
 8005ea0:	08005ef1 	.word	0x08005ef1
 8005ea4:	08005f05 	.word	0x08005f05
 8005ea8:	08005f0f 	.word	0x08005f0f
 8005eac:	08005efb 	.word	0x08005efb
 8005eb0:	08005f0f 	.word	0x08005f0f
 8005eb4:	08005ed3 	.word	0x08005ed3
 8005eb8:	08005ec9 	.word	0x08005ec9
 8005ebc:	08005f0f 	.word	0x08005f0f
 8005ec0:	08005ee7 	.word	0x08005ee7
 8005ec4:	08005edd 	.word	0x08005edd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f9d4 	bl	8006278 <USBD_GetDescriptor>
          break;
 8005ed0:	e022      	b.n	8005f18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fb37 	bl	8006548 <USBD_SetAddress>
          break;
 8005eda:	e01d      	b.n	8005f18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005edc:	6839      	ldr	r1, [r7, #0]
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fb74 	bl	80065cc <USBD_SetConfig>
          break;
 8005ee4:	e018      	b.n	8005f18 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005ee6:	6839      	ldr	r1, [r7, #0]
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fbfd 	bl	80066e8 <USBD_GetConfig>
          break;
 8005eee:	e013      	b.n	8005f18 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fc2c 	bl	8006750 <USBD_GetStatus>
          break;
 8005ef8:	e00e      	b.n	8005f18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005efa:	6839      	ldr	r1, [r7, #0]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fc5a 	bl	80067b6 <USBD_SetFeature>
          break;
 8005f02:	e009      	b.n	8005f18 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fc69 	bl	80067de <USBD_ClrFeature>
          break;
 8005f0c:	e004      	b.n	8005f18 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fcc2 	bl	800689a <USBD_CtlError>
          break;
 8005f16:	bf00      	nop
      }
      break;
 8005f18:	e004      	b.n	8005f24 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005f1a:	6839      	ldr	r1, [r7, #0]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fcbc 	bl	800689a <USBD_CtlError>
      break;
 8005f22:	bf00      	nop
  }

  return ret;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop

08005f30 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f46:	2b20      	cmp	r3, #32
 8005f48:	d003      	beq.n	8005f52 <USBD_StdItfReq+0x22>
 8005f4a:	2b40      	cmp	r3, #64	; 0x40
 8005f4c:	d001      	beq.n	8005f52 <USBD_StdItfReq+0x22>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d12a      	bne.n	8005fa8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d81d      	bhi.n	8005f9a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	889b      	ldrh	r3, [r3, #4]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d813      	bhi.n	8005f90 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	4798      	blx	r3
 8005f76:	4603      	mov	r3, r0
 8005f78:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	88db      	ldrh	r3, [r3, #6]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d110      	bne.n	8005fa4 <USBD_StdItfReq+0x74>
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10d      	bne.n	8005fa4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 fd4f 	bl	8006a2c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f8e:	e009      	b.n	8005fa4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005f90:	6839      	ldr	r1, [r7, #0]
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fc81 	bl	800689a <USBD_CtlError>
          break;
 8005f98:	e004      	b.n	8005fa4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fc7c 	bl	800689a <USBD_CtlError>
          break;
 8005fa2:	e000      	b.n	8005fa6 <USBD_StdItfReq+0x76>
          break;
 8005fa4:	bf00      	nop
      }
      break;
 8005fa6:	e004      	b.n	8005fb2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fc75 	bl	800689a <USBD_CtlError>
      break;
 8005fb0:	bf00      	nop
  }

  return USBD_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	889b      	ldrh	r3, [r3, #4]
 8005fce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	d004      	beq.n	8005fe6 <USBD_StdEPReq+0x2a>
 8005fdc:	2b40      	cmp	r3, #64	; 0x40
 8005fde:	d002      	beq.n	8005fe6 <USBD_StdEPReq+0x2a>
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d008      	beq.n	8005ff6 <USBD_StdEPReq+0x3a>
 8005fe4:	e13d      	b.n	8006262 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	4798      	blx	r3
      break;
 8005ff4:	e13a      	b.n	800626c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	d10a      	bne.n	8006018 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	6839      	ldr	r1, [r7, #0]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	4798      	blx	r3
 8006010:	4603      	mov	r3, r0
 8006012:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	e12a      	b.n	800626e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d03e      	beq.n	800609e <USBD_StdEPReq+0xe2>
 8006020:	2b03      	cmp	r3, #3
 8006022:	d002      	beq.n	800602a <USBD_StdEPReq+0x6e>
 8006024:	2b00      	cmp	r3, #0
 8006026:	d070      	beq.n	800610a <USBD_StdEPReq+0x14e>
 8006028:	e115      	b.n	8006256 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006030:	2b02      	cmp	r3, #2
 8006032:	d002      	beq.n	800603a <USBD_StdEPReq+0x7e>
 8006034:	2b03      	cmp	r3, #3
 8006036:	d015      	beq.n	8006064 <USBD_StdEPReq+0xa8>
 8006038:	e02b      	b.n	8006092 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00c      	beq.n	800605a <USBD_StdEPReq+0x9e>
 8006040:	7bbb      	ldrb	r3, [r7, #14]
 8006042:	2b80      	cmp	r3, #128	; 0x80
 8006044:	d009      	beq.n	800605a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006046:	7bbb      	ldrb	r3, [r7, #14]
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f003 fd90 	bl	8009b70 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006050:	2180      	movs	r1, #128	; 0x80
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f003 fd8c 	bl	8009b70 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006058:	e020      	b.n	800609c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800605a:	6839      	ldr	r1, [r7, #0]
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fc1c 	bl	800689a <USBD_CtlError>
              break;
 8006062:	e01b      	b.n	800609c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	885b      	ldrh	r3, [r3, #2]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10e      	bne.n	800608a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800606c:	7bbb      	ldrb	r3, [r7, #14]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00b      	beq.n	800608a <USBD_StdEPReq+0xce>
 8006072:	7bbb      	ldrb	r3, [r7, #14]
 8006074:	2b80      	cmp	r3, #128	; 0x80
 8006076:	d008      	beq.n	800608a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	88db      	ldrh	r3, [r3, #6]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d104      	bne.n	800608a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006080:	7bbb      	ldrb	r3, [r7, #14]
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f003 fd73 	bl	8009b70 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fcce 	bl	8006a2c <USBD_CtlSendStatus>

              break;
 8006090:	e004      	b.n	800609c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fc00 	bl	800689a <USBD_CtlError>
              break;
 800609a:	bf00      	nop
          }
          break;
 800609c:	e0e0      	b.n	8006260 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d002      	beq.n	80060ae <USBD_StdEPReq+0xf2>
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d015      	beq.n	80060d8 <USBD_StdEPReq+0x11c>
 80060ac:	e026      	b.n	80060fc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060ae:	7bbb      	ldrb	r3, [r7, #14]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00c      	beq.n	80060ce <USBD_StdEPReq+0x112>
 80060b4:	7bbb      	ldrb	r3, [r7, #14]
 80060b6:	2b80      	cmp	r3, #128	; 0x80
 80060b8:	d009      	beq.n	80060ce <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f003 fd56 	bl	8009b70 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80060c4:	2180      	movs	r1, #128	; 0x80
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f003 fd52 	bl	8009b70 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060cc:	e01c      	b.n	8006108 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fbe2 	bl	800689a <USBD_CtlError>
              break;
 80060d6:	e017      	b.n	8006108 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	885b      	ldrh	r3, [r3, #2]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d112      	bne.n	8006106 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80060e0:	7bbb      	ldrb	r3, [r7, #14]
 80060e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d004      	beq.n	80060f4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80060ea:	7bbb      	ldrb	r3, [r7, #14]
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f003 fd5d 	bl	8009bae <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fc99 	bl	8006a2c <USBD_CtlSendStatus>
              }
              break;
 80060fa:	e004      	b.n	8006106 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fbcb 	bl	800689a <USBD_CtlError>
              break;
 8006104:	e000      	b.n	8006108 <USBD_StdEPReq+0x14c>
              break;
 8006106:	bf00      	nop
          }
          break;
 8006108:	e0aa      	b.n	8006260 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006110:	2b02      	cmp	r3, #2
 8006112:	d002      	beq.n	800611a <USBD_StdEPReq+0x15e>
 8006114:	2b03      	cmp	r3, #3
 8006116:	d032      	beq.n	800617e <USBD_StdEPReq+0x1c2>
 8006118:	e097      	b.n	800624a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800611a:	7bbb      	ldrb	r3, [r7, #14]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d007      	beq.n	8006130 <USBD_StdEPReq+0x174>
 8006120:	7bbb      	ldrb	r3, [r7, #14]
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	d004      	beq.n	8006130 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fbb6 	bl	800689a <USBD_CtlError>
                break;
 800612e:	e091      	b.n	8006254 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006130:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006134:	2b00      	cmp	r3, #0
 8006136:	da0b      	bge.n	8006150 <USBD_StdEPReq+0x194>
 8006138:	7bbb      	ldrb	r3, [r7, #14]
 800613a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800613e:	4613      	mov	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	3310      	adds	r3, #16
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	4413      	add	r3, r2
 800614c:	3304      	adds	r3, #4
 800614e:	e00b      	b.n	8006168 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006150:	7bbb      	ldrb	r3, [r7, #14]
 8006152:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	4413      	add	r3, r2
 8006166:	3304      	adds	r3, #4
 8006168:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2202      	movs	r2, #2
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fbfa 	bl	8006970 <USBD_CtlSendData>
              break;
 800617c:	e06a      	b.n	8006254 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800617e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006182:	2b00      	cmp	r3, #0
 8006184:	da11      	bge.n	80061aa <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006186:	7bbb      	ldrb	r3, [r7, #14]
 8006188:	f003 020f 	and.w	r2, r3, #15
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	440b      	add	r3, r1
 8006198:	3318      	adds	r3, #24
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d117      	bne.n	80061d0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80061a0:	6839      	ldr	r1, [r7, #0]
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fb79 	bl	800689a <USBD_CtlError>
                  break;
 80061a8:	e054      	b.n	8006254 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061aa:	7bbb      	ldrb	r3, [r7, #14]
 80061ac:	f003 020f 	and.w	r2, r3, #15
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	440b      	add	r3, r1
 80061bc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d104      	bne.n	80061d0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fb66 	bl	800689a <USBD_CtlError>
                  break;
 80061ce:	e041      	b.n	8006254 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	da0b      	bge.n	80061f0 <USBD_StdEPReq+0x234>
 80061d8:	7bbb      	ldrb	r3, [r7, #14]
 80061da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	3310      	adds	r3, #16
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	4413      	add	r3, r2
 80061ec:	3304      	adds	r3, #4
 80061ee:	e00b      	b.n	8006208 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061f0:	7bbb      	ldrb	r3, [r7, #14]
 80061f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	4413      	add	r3, r2
 8006206:	3304      	adds	r3, #4
 8006208:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800620a:	7bbb      	ldrb	r3, [r7, #14]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <USBD_StdEPReq+0x25a>
 8006210:	7bbb      	ldrb	r3, [r7, #14]
 8006212:	2b80      	cmp	r3, #128	; 0x80
 8006214:	d103      	bne.n	800621e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	e00e      	b.n	800623c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	4619      	mov	r1, r3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f003 fce2 	bl	8009bec <USBD_LL_IsStallEP>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2201      	movs	r2, #1
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	e002      	b.n	800623c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2202      	movs	r2, #2
 8006240:	4619      	mov	r1, r3
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fb94 	bl	8006970 <USBD_CtlSendData>
              break;
 8006248:	e004      	b.n	8006254 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fb24 	bl	800689a <USBD_CtlError>
              break;
 8006252:	bf00      	nop
          }
          break;
 8006254:	e004      	b.n	8006260 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fb1e 	bl	800689a <USBD_CtlError>
          break;
 800625e:	bf00      	nop
      }
      break;
 8006260:	e004      	b.n	800626c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fb18 	bl	800689a <USBD_CtlError>
      break;
 800626a:	bf00      	nop
  }

  return ret;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	885b      	ldrh	r3, [r3, #2]
 8006292:	0a1b      	lsrs	r3, r3, #8
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	2b06      	cmp	r3, #6
 800629a:	f200 8128 	bhi.w	80064ee <USBD_GetDescriptor+0x276>
 800629e:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <USBD_GetDescriptor+0x2c>)
 80062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a4:	080062c1 	.word	0x080062c1
 80062a8:	080062d9 	.word	0x080062d9
 80062ac:	08006319 	.word	0x08006319
 80062b0:	080064ef 	.word	0x080064ef
 80062b4:	080064ef 	.word	0x080064ef
 80062b8:	0800648f 	.word	0x0800648f
 80062bc:	080064bb 	.word	0x080064bb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	7c12      	ldrb	r2, [r2, #16]
 80062cc:	f107 0108 	add.w	r1, r7, #8
 80062d0:	4610      	mov	r0, r2
 80062d2:	4798      	blx	r3
 80062d4:	60f8      	str	r0, [r7, #12]
      break;
 80062d6:	e112      	b.n	80064fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	7c1b      	ldrb	r3, [r3, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10d      	bne.n	80062fc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e8:	f107 0208 	add.w	r2, r7, #8
 80062ec:	4610      	mov	r0, r2
 80062ee:	4798      	blx	r3
 80062f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	3301      	adds	r3, #1
 80062f6:	2202      	movs	r2, #2
 80062f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80062fa:	e100      	b.n	80064fe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	f107 0208 	add.w	r2, r7, #8
 8006308:	4610      	mov	r0, r2
 800630a:	4798      	blx	r3
 800630c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3301      	adds	r3, #1
 8006312:	2202      	movs	r2, #2
 8006314:	701a      	strb	r2, [r3, #0]
      break;
 8006316:	e0f2      	b.n	80064fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	885b      	ldrh	r3, [r3, #2]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b05      	cmp	r3, #5
 8006320:	f200 80ac 	bhi.w	800647c <USBD_GetDescriptor+0x204>
 8006324:	a201      	add	r2, pc, #4	; (adr r2, 800632c <USBD_GetDescriptor+0xb4>)
 8006326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632a:	bf00      	nop
 800632c:	08006345 	.word	0x08006345
 8006330:	08006379 	.word	0x08006379
 8006334:	080063ad 	.word	0x080063ad
 8006338:	080063e1 	.word	0x080063e1
 800633c:	08006415 	.word	0x08006415
 8006340:	08006449 	.word	0x08006449
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00b      	beq.n	8006368 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	7c12      	ldrb	r2, [r2, #16]
 800635c:	f107 0108 	add.w	r1, r7, #8
 8006360:	4610      	mov	r0, r2
 8006362:	4798      	blx	r3
 8006364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006366:	e091      	b.n	800648c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fa95 	bl	800689a <USBD_CtlError>
            err++;
 8006370:	7afb      	ldrb	r3, [r7, #11]
 8006372:	3301      	adds	r3, #1
 8006374:	72fb      	strb	r3, [r7, #11]
          break;
 8006376:	e089      	b.n	800648c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00b      	beq.n	800639c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	7c12      	ldrb	r2, [r2, #16]
 8006390:	f107 0108 	add.w	r1, r7, #8
 8006394:	4610      	mov	r0, r2
 8006396:	4798      	blx	r3
 8006398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800639a:	e077      	b.n	800648c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fa7b 	bl	800689a <USBD_CtlError>
            err++;
 80063a4:	7afb      	ldrb	r3, [r7, #11]
 80063a6:	3301      	adds	r3, #1
 80063a8:	72fb      	strb	r3, [r7, #11]
          break;
 80063aa:	e06f      	b.n	800648c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00b      	beq.n	80063d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	7c12      	ldrb	r2, [r2, #16]
 80063c4:	f107 0108 	add.w	r1, r7, #8
 80063c8:	4610      	mov	r0, r2
 80063ca:	4798      	blx	r3
 80063cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ce:	e05d      	b.n	800648c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fa61 	bl	800689a <USBD_CtlError>
            err++;
 80063d8:	7afb      	ldrb	r3, [r7, #11]
 80063da:	3301      	adds	r3, #1
 80063dc:	72fb      	strb	r3, [r7, #11]
          break;
 80063de:	e055      	b.n	800648c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00b      	beq.n	8006404 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	7c12      	ldrb	r2, [r2, #16]
 80063f8:	f107 0108 	add.w	r1, r7, #8
 80063fc:	4610      	mov	r0, r2
 80063fe:	4798      	blx	r3
 8006400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006402:	e043      	b.n	800648c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fa47 	bl	800689a <USBD_CtlError>
            err++;
 800640c:	7afb      	ldrb	r3, [r7, #11]
 800640e:	3301      	adds	r3, #1
 8006410:	72fb      	strb	r3, [r7, #11]
          break;
 8006412:	e03b      	b.n	800648c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00b      	beq.n	8006438 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	7c12      	ldrb	r2, [r2, #16]
 800642c:	f107 0108 	add.w	r1, r7, #8
 8006430:	4610      	mov	r0, r2
 8006432:	4798      	blx	r3
 8006434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006436:	e029      	b.n	800648c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fa2d 	bl	800689a <USBD_CtlError>
            err++;
 8006440:	7afb      	ldrb	r3, [r7, #11]
 8006442:	3301      	adds	r3, #1
 8006444:	72fb      	strb	r3, [r7, #11]
          break;
 8006446:	e021      	b.n	800648c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	7c12      	ldrb	r2, [r2, #16]
 8006460:	f107 0108 	add.w	r1, r7, #8
 8006464:	4610      	mov	r0, r2
 8006466:	4798      	blx	r3
 8006468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800646a:	e00f      	b.n	800648c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa13 	bl	800689a <USBD_CtlError>
            err++;
 8006474:	7afb      	ldrb	r3, [r7, #11]
 8006476:	3301      	adds	r3, #1
 8006478:	72fb      	strb	r3, [r7, #11]
          break;
 800647a:	e007      	b.n	800648c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fa0b 	bl	800689a <USBD_CtlError>
          err++;
 8006484:	7afb      	ldrb	r3, [r7, #11]
 8006486:	3301      	adds	r3, #1
 8006488:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800648a:	e038      	b.n	80064fe <USBD_GetDescriptor+0x286>
 800648c:	e037      	b.n	80064fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	7c1b      	ldrb	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d109      	bne.n	80064aa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800649c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649e:	f107 0208 	add.w	r2, r7, #8
 80064a2:	4610      	mov	r0, r2
 80064a4:	4798      	blx	r3
 80064a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064a8:	e029      	b.n	80064fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f9f4 	bl	800689a <USBD_CtlError>
        err++;
 80064b2:	7afb      	ldrb	r3, [r7, #11]
 80064b4:	3301      	adds	r3, #1
 80064b6:	72fb      	strb	r3, [r7, #11]
      break;
 80064b8:	e021      	b.n	80064fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	7c1b      	ldrb	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10d      	bne.n	80064de <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ca:	f107 0208 	add.w	r2, r7, #8
 80064ce:	4610      	mov	r0, r2
 80064d0:	4798      	blx	r3
 80064d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	3301      	adds	r3, #1
 80064d8:	2207      	movs	r2, #7
 80064da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064dc:	e00f      	b.n	80064fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f9da 	bl	800689a <USBD_CtlError>
        err++;
 80064e6:	7afb      	ldrb	r3, [r7, #11]
 80064e8:	3301      	adds	r3, #1
 80064ea:	72fb      	strb	r3, [r7, #11]
      break;
 80064ec:	e007      	b.n	80064fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f9d2 	bl	800689a <USBD_CtlError>
      err++;
 80064f6:	7afb      	ldrb	r3, [r7, #11]
 80064f8:	3301      	adds	r3, #1
 80064fa:	72fb      	strb	r3, [r7, #11]
      break;
 80064fc:	bf00      	nop
  }

  if (err != 0U)
 80064fe:	7afb      	ldrb	r3, [r7, #11]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d11c      	bne.n	800653e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006504:	893b      	ldrh	r3, [r7, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d011      	beq.n	800652e <USBD_GetDescriptor+0x2b6>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	88db      	ldrh	r3, [r3, #6]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00d      	beq.n	800652e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	88da      	ldrh	r2, [r3, #6]
 8006516:	893b      	ldrh	r3, [r7, #8]
 8006518:	4293      	cmp	r3, r2
 800651a:	bf28      	it	cs
 800651c:	4613      	movcs	r3, r2
 800651e:	b29b      	uxth	r3, r3
 8006520:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006522:	893b      	ldrh	r3, [r7, #8]
 8006524:	461a      	mov	r2, r3
 8006526:	68f9      	ldr	r1, [r7, #12]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fa21 	bl	8006970 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	88db      	ldrh	r3, [r3, #6]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d104      	bne.n	8006540 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fa78 	bl	8006a2c <USBD_CtlSendStatus>
 800653c:	e000      	b.n	8006540 <USBD_GetDescriptor+0x2c8>
    return;
 800653e:	bf00      	nop
    }
  }
}
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop

08006548 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	889b      	ldrh	r3, [r3, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d130      	bne.n	80065bc <USBD_SetAddress+0x74>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	88db      	ldrh	r3, [r3, #6]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d12c      	bne.n	80065bc <USBD_SetAddress+0x74>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	885b      	ldrh	r3, [r3, #2]
 8006566:	2b7f      	cmp	r3, #127	; 0x7f
 8006568:	d828      	bhi.n	80065bc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	885b      	ldrh	r3, [r3, #2]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006574:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800657c:	2b03      	cmp	r3, #3
 800657e:	d104      	bne.n	800658a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f989 	bl	800689a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006588:	e01c      	b.n	80065c4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	7bfa      	ldrb	r2, [r7, #15]
 800658e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	4619      	mov	r1, r3
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f003 fb4e 	bl	8009c38 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fa45 	bl	8006a2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065a2:	7bfb      	ldrb	r3, [r7, #15]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b0:	e008      	b.n	80065c4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ba:	e003      	b.n	80065c4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80065bc:	6839      	ldr	r1, [r7, #0]
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f96b 	bl	800689a <USBD_CtlError>
  }
}
 80065c4:	bf00      	nop
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	885b      	ldrh	r3, [r3, #2]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	4b41      	ldr	r3, [pc, #260]	; (80066e4 <USBD_SetConfig+0x118>)
 80065de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80065e0:	4b40      	ldr	r3, [pc, #256]	; (80066e4 <USBD_SetConfig+0x118>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d904      	bls.n	80065f2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f955 	bl	800689a <USBD_CtlError>
 80065f0:	e075      	b.n	80066de <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d002      	beq.n	8006602 <USBD_SetConfig+0x36>
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d023      	beq.n	8006648 <USBD_SetConfig+0x7c>
 8006600:	e062      	b.n	80066c8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006602:	4b38      	ldr	r3, [pc, #224]	; (80066e4 <USBD_SetConfig+0x118>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d01a      	beq.n	8006640 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800660a:	4b36      	ldr	r3, [pc, #216]	; (80066e4 <USBD_SetConfig+0x118>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2203      	movs	r2, #3
 8006618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800661c:	4b31      	ldr	r3, [pc, #196]	; (80066e4 <USBD_SetConfig+0x118>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	4619      	mov	r1, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7ff f9f0 	bl	8005a08 <USBD_SetClassConfig>
 8006628:	4603      	mov	r3, r0
 800662a:	2b02      	cmp	r3, #2
 800662c:	d104      	bne.n	8006638 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800662e:	6839      	ldr	r1, [r7, #0]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f932 	bl	800689a <USBD_CtlError>
            return;
 8006636:	e052      	b.n	80066de <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f9f7 	bl	8006a2c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800663e:	e04e      	b.n	80066de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f9f3 	bl	8006a2c <USBD_CtlSendStatus>
        break;
 8006646:	e04a      	b.n	80066de <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006648:	4b26      	ldr	r3, [pc, #152]	; (80066e4 <USBD_SetConfig+0x118>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d112      	bne.n	8006676 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006658:	4b22      	ldr	r3, [pc, #136]	; (80066e4 <USBD_SetConfig+0x118>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006662:	4b20      	ldr	r3, [pc, #128]	; (80066e4 <USBD_SetConfig+0x118>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff f9ec 	bl	8005a46 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f9dc 	bl	8006a2c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006674:	e033      	b.n	80066de <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006676:	4b1b      	ldr	r3, [pc, #108]	; (80066e4 <USBD_SetConfig+0x118>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	429a      	cmp	r2, r3
 8006682:	d01d      	beq.n	80066c0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff f9da 	bl	8005a46 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006692:	4b14      	ldr	r3, [pc, #80]	; (80066e4 <USBD_SetConfig+0x118>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800669c:	4b11      	ldr	r3, [pc, #68]	; (80066e4 <USBD_SetConfig+0x118>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff f9b0 	bl	8005a08 <USBD_SetClassConfig>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d104      	bne.n	80066b8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f8f2 	bl	800689a <USBD_CtlError>
            return;
 80066b6:	e012      	b.n	80066de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f9b7 	bl	8006a2c <USBD_CtlSendStatus>
        break;
 80066be:	e00e      	b.n	80066de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f9b3 	bl	8006a2c <USBD_CtlSendStatus>
        break;
 80066c6:	e00a      	b.n	80066de <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f8e5 	bl	800689a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80066d0:	4b04      	ldr	r3, [pc, #16]	; (80066e4 <USBD_SetConfig+0x118>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	4619      	mov	r1, r3
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff f9b5 	bl	8005a46 <USBD_ClrClassConfig>
        break;
 80066dc:	bf00      	nop
    }
  }
}
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	2000019c 	.word	0x2000019c

080066e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	88db      	ldrh	r3, [r3, #6]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d004      	beq.n	8006704 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f8cc 	bl	800689a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006702:	e021      	b.n	8006748 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800670a:	2b01      	cmp	r3, #1
 800670c:	db17      	blt.n	800673e <USBD_GetConfig+0x56>
 800670e:	2b02      	cmp	r3, #2
 8006710:	dd02      	ble.n	8006718 <USBD_GetConfig+0x30>
 8006712:	2b03      	cmp	r3, #3
 8006714:	d00b      	beq.n	800672e <USBD_GetConfig+0x46>
 8006716:	e012      	b.n	800673e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3308      	adds	r3, #8
 8006722:	2201      	movs	r2, #1
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f922 	bl	8006970 <USBD_CtlSendData>
        break;
 800672c:	e00c      	b.n	8006748 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3304      	adds	r3, #4
 8006732:	2201      	movs	r2, #1
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f91a 	bl	8006970 <USBD_CtlSendData>
        break;
 800673c:	e004      	b.n	8006748 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f8aa 	bl	800689a <USBD_CtlError>
        break;
 8006746:	bf00      	nop
}
 8006748:	bf00      	nop
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006760:	3b01      	subs	r3, #1
 8006762:	2b02      	cmp	r3, #2
 8006764:	d81e      	bhi.n	80067a4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	88db      	ldrh	r3, [r3, #6]
 800676a:	2b02      	cmp	r3, #2
 800676c:	d004      	beq.n	8006778 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f892 	bl	800689a <USBD_CtlError>
        break;
 8006776:	e01a      	b.n	80067ae <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f043 0202 	orr.w	r2, r3, #2
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	330c      	adds	r3, #12
 8006798:	2202      	movs	r2, #2
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f8e7 	bl	8006970 <USBD_CtlSendData>
      break;
 80067a2:	e004      	b.n	80067ae <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f877 	bl	800689a <USBD_CtlError>
      break;
 80067ac:	bf00      	nop
  }
}
 80067ae:	bf00      	nop
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b082      	sub	sp, #8
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	885b      	ldrh	r3, [r3, #2]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d106      	bne.n	80067d6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f92b 	bl	8006a2c <USBD_CtlSendStatus>
  }
}
 80067d6:	bf00      	nop
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ee:	3b01      	subs	r3, #1
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d80b      	bhi.n	800680c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	885b      	ldrh	r3, [r3, #2]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d10c      	bne.n	8006816 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f911 	bl	8006a2c <USBD_CtlSendStatus>
      }
      break;
 800680a:	e004      	b.n	8006816 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f843 	bl	800689a <USBD_CtlError>
      break;
 8006814:	e000      	b.n	8006818 <USBD_ClrFeature+0x3a>
      break;
 8006816:	bf00      	nop
  }
}
 8006818:	bf00      	nop
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781a      	ldrb	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	785a      	ldrb	r2, [r3, #1]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	3302      	adds	r3, #2
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	b29a      	uxth	r2, r3
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	3303      	adds	r3, #3
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	b29b      	uxth	r3, r3
 800684e:	4413      	add	r3, r2
 8006850:	b29a      	uxth	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	3304      	adds	r3, #4
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	b29a      	uxth	r2, r3
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	3305      	adds	r3, #5
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	b29b      	uxth	r3, r3
 8006866:	021b      	lsls	r3, r3, #8
 8006868:	b29b      	uxth	r3, r3
 800686a:	4413      	add	r3, r2
 800686c:	b29a      	uxth	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	3306      	adds	r3, #6
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	b29a      	uxth	r2, r3
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	3307      	adds	r3, #7
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	b29b      	uxth	r3, r3
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	b29b      	uxth	r3, r3
 8006886:	4413      	add	r3, r2
 8006888:	b29a      	uxth	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	80da      	strh	r2, [r3, #6]

}
 800688e:	bf00      	nop
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80068a4:	2180      	movs	r1, #128	; 0x80
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f003 f962 	bl	8009b70 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80068ac:	2100      	movs	r1, #0
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f003 f95e 	bl	8009b70 <USBD_LL_StallEP>
}
 80068b4:	bf00      	nop
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d032      	beq.n	8006938 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 f834 	bl	8006940 <USBD_GetLen>
 80068d8:	4603      	mov	r3, r0
 80068da:	3301      	adds	r3, #1
 80068dc:	b29b      	uxth	r3, r3
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	75fa      	strb	r2, [r7, #23]
 80068ec:	461a      	mov	r2, r3
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4413      	add	r3, r2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	7812      	ldrb	r2, [r2, #0]
 80068f6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	75fa      	strb	r2, [r7, #23]
 80068fe:	461a      	mov	r2, r3
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	4413      	add	r3, r2
 8006904:	2203      	movs	r2, #3
 8006906:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006908:	e012      	b.n	8006930 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	60fa      	str	r2, [r7, #12]
 8006910:	7dfa      	ldrb	r2, [r7, #23]
 8006912:	1c51      	adds	r1, r2, #1
 8006914:	75f9      	strb	r1, [r7, #23]
 8006916:	4611      	mov	r1, r2
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	440a      	add	r2, r1
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006920:	7dfb      	ldrb	r3, [r7, #23]
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	75fa      	strb	r2, [r7, #23]
 8006926:	461a      	mov	r2, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	4413      	add	r3, r2
 800692c:	2200      	movs	r2, #0
 800692e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e8      	bne.n	800690a <USBD_GetString+0x4e>
    }
  }
}
 8006938:	bf00      	nop
 800693a:	3718      	adds	r7, #24
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800694c:	e005      	b.n	800695a <USBD_GetLen+0x1a>
  {
    len++;
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	3301      	adds	r3, #1
 8006952:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3301      	adds	r3, #1
 8006958:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1f5      	bne.n	800694e <USBD_GetLen+0xe>
  }

  return len;
 8006962:	7bfb      	ldrb	r3, [r7, #15]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	4613      	mov	r3, r2
 800697c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2202      	movs	r2, #2
 8006982:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006986:	88fa      	ldrh	r2, [r7, #6]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800698c:	88fa      	ldrh	r2, [r7, #6]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006992:	88fb      	ldrh	r3, [r7, #6]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	2100      	movs	r1, #0
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f003 f96c 	bl	8009c76 <USBD_LL_Transmit>

  return USBD_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	4613      	mov	r3, r2
 80069b4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069b6:	88fb      	ldrh	r3, [r7, #6]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	2100      	movs	r1, #0
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f003 f95a 	bl	8009c76 <USBD_LL_Transmit>

  return USBD_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	4613      	mov	r3, r2
 80069d8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2203      	movs	r2, #3
 80069de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80069e2:	88fa      	ldrh	r2, [r7, #6]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069f2:	88fb      	ldrh	r3, [r7, #6]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	2100      	movs	r1, #0
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f003 f95f 	bl	8009cbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	4613      	mov	r3, r2
 8006a14:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a16:	88fb      	ldrh	r3, [r7, #6]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f003 f94d 	bl	8009cbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2204      	movs	r2, #4
 8006a38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2100      	movs	r1, #0
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f003 f917 	bl	8009c76 <USBD_LL_Transmit>

  return USBD_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b082      	sub	sp, #8
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2205      	movs	r2, #5
 8006a5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a62:	2300      	movs	r3, #0
 8006a64:	2200      	movs	r2, #0
 8006a66:	2100      	movs	r1, #0
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f003 f927 	bl	8009cbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a7e:	f3ef 8305 	mrs	r3, IPSR
 8006a82:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10f      	bne.n	8006aaa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a8e:	607b      	str	r3, [r7, #4]
  return(result);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d109      	bne.n	8006aaa <osKernelInitialize+0x32>
 8006a96:	4b11      	ldr	r3, [pc, #68]	; (8006adc <osKernelInitialize+0x64>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d109      	bne.n	8006ab2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006aa2:	603b      	str	r3, [r7, #0]
  return(result);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006aaa:	f06f 0305 	mvn.w	r3, #5
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	e00c      	b.n	8006acc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ab2:	4b0a      	ldr	r3, [pc, #40]	; (8006adc <osKernelInitialize+0x64>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d105      	bne.n	8006ac6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006aba:	4b08      	ldr	r3, [pc, #32]	; (8006adc <osKernelInitialize+0x64>)
 8006abc:	2201      	movs	r2, #1
 8006abe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	e002      	b.n	8006acc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006acc:	68fb      	ldr	r3, [r7, #12]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	200001a0 	.word	0x200001a0

08006ae0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ae6:	f3ef 8305 	mrs	r3, IPSR
 8006aea:	60bb      	str	r3, [r7, #8]
  return(result);
 8006aec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10f      	bne.n	8006b12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006af2:	f3ef 8310 	mrs	r3, PRIMASK
 8006af6:	607b      	str	r3, [r7, #4]
  return(result);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d109      	bne.n	8006b12 <osKernelStart+0x32>
 8006afe:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <osKernelStart+0x64>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d109      	bne.n	8006b1a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b06:	f3ef 8311 	mrs	r3, BASEPRI
 8006b0a:	603b      	str	r3, [r7, #0]
  return(result);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006b12:	f06f 0305 	mvn.w	r3, #5
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	e00e      	b.n	8006b38 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006b1a:	4b0a      	ldr	r3, [pc, #40]	; (8006b44 <osKernelStart+0x64>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d107      	bne.n	8006b32 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006b22:	4b08      	ldr	r3, [pc, #32]	; (8006b44 <osKernelStart+0x64>)
 8006b24:	2202      	movs	r2, #2
 8006b26:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006b28:	f001 f86c 	bl	8007c04 <vTaskStartScheduler>
      stat = osOK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	e002      	b.n	8006b38 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006b32:	f04f 33ff 	mov.w	r3, #4294967295
 8006b36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006b38:	68fb      	ldr	r3, [r7, #12]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	200001a0 	.word	0x200001a0

08006b48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b092      	sub	sp, #72	; 0x48
 8006b4c:	af04      	add	r7, sp, #16
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b54:	2300      	movs	r3, #0
 8006b56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b58:	f3ef 8305 	mrs	r3, IPSR
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f040 8095 	bne.w	8006c90 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b66:	f3ef 8310 	mrs	r3, PRIMASK
 8006b6a:	623b      	str	r3, [r7, #32]
  return(result);
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f040 808e 	bne.w	8006c90 <osThreadNew+0x148>
 8006b74:	4b49      	ldr	r3, [pc, #292]	; (8006c9c <osThreadNew+0x154>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d106      	bne.n	8006b8a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b7c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b80:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f040 8083 	bne.w	8006c90 <osThreadNew+0x148>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d07f      	beq.n	8006c90 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 8006b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b94:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006b96:	2318      	movs	r3, #24
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006b9e:	f107 031b 	add.w	r3, r7, #27
 8006ba2:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba8:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d045      	beq.n	8006c3c <osThreadNew+0xf4>
      if (attr->name != NULL) {
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <osThreadNew+0x76>
        name = attr->name;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d008      	beq.n	8006be4 <osThreadNew+0x9c>
 8006bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd4:	2b38      	cmp	r3, #56	; 0x38
 8006bd6:	d805      	bhi.n	8006be4 <osThreadNew+0x9c>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <osThreadNew+0xa0>
        return (NULL);
 8006be4:	2300      	movs	r3, #0
 8006be6:	e054      	b.n	8006c92 <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	089b      	lsrs	r3, r3, #2
 8006bf6:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00e      	beq.n	8006c1e <osThreadNew+0xd6>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	2b5b      	cmp	r3, #91	; 0x5b
 8006c06:	d90a      	bls.n	8006c1e <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d006      	beq.n	8006c1e <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <osThreadNew+0xd6>
        mem = 1;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c1c:	e010      	b.n	8006c40 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10c      	bne.n	8006c40 <osThreadNew+0xf8>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d108      	bne.n	8006c40 <osThreadNew+0xf8>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d104      	bne.n	8006c40 <osThreadNew+0xf8>
          mem = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c3a:	e001      	b.n	8006c40 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d110      	bne.n	8006c68 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c4e:	9202      	str	r2, [sp, #8]
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 fe09 	bl	8007874 <xTaskCreateStatic>
 8006c62:	4603      	mov	r3, r0
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	e013      	b.n	8006c90 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d110      	bne.n	8006c90 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	f107 0314 	add.w	r3, r7, #20
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 fe50 	bl	8007926 <xTaskCreate>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d001      	beq.n	8006c90 <osThreadNew+0x148>
          hTask = NULL;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c90:	697b      	ldr	r3, [r7, #20]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3738      	adds	r7, #56	; 0x38
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	200001a0 	.word	0x200001a0

08006ca0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ca8:	f3ef 8305 	mrs	r3, IPSR
 8006cac:	613b      	str	r3, [r7, #16]
  return(result);
 8006cae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10f      	bne.n	8006cd4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8006cb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d109      	bne.n	8006cd4 <osDelay+0x34>
 8006cc0:	4b0d      	ldr	r3, [pc, #52]	; (8006cf8 <osDelay+0x58>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d109      	bne.n	8006cdc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cc8:	f3ef 8311 	mrs	r3, BASEPRI
 8006ccc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <osDelay+0x3c>
    stat = osErrorISR;
 8006cd4:	f06f 0305 	mvn.w	r3, #5
 8006cd8:	617b      	str	r3, [r7, #20]
 8006cda:	e007      	b.n	8006cec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <osDelay+0x4c>
      vTaskDelay(ticks);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 ff58 	bl	8007b9c <vTaskDelay>
    }
  }

  return (stat);
 8006cec:	697b      	ldr	r3, [r7, #20]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	200001a0 	.word	0x200001a0

08006cfc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	4a07      	ldr	r2, [pc, #28]	; (8006d28 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	4a06      	ldr	r2, [pc, #24]	; (8006d2c <vApplicationGetIdleTaskMemory+0x30>)
 8006d12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d1a:	601a      	str	r2, [r3, #0]
}
 8006d1c:	bf00      	nop
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	200001a4 	.word	0x200001a4
 8006d2c:	20000200 	.word	0x20000200

08006d30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4a07      	ldr	r2, [pc, #28]	; (8006d5c <vApplicationGetTimerTaskMemory+0x2c>)
 8006d40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	4a06      	ldr	r2, [pc, #24]	; (8006d60 <vApplicationGetTimerTaskMemory+0x30>)
 8006d46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d4e:	601a      	str	r2, [r3, #0]
}
 8006d50:	bf00      	nop
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	20000600 	.word	0x20000600
 8006d60:	2000065c 	.word	0x2000065c

08006d64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f103 0208 	add.w	r2, r3, #8
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f103 0208 	add.w	r2, r3, #8
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f103 0208 	add.w	r2, r3, #8
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b085      	sub	sp, #20
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	601a      	str	r2, [r3, #0]
}
 8006dfa:	bf00      	nop
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e06:	b480      	push	{r7}
 8006e08:	b085      	sub	sp, #20
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1c:	d103      	bne.n	8006e26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	e00c      	b.n	8006e40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	3308      	adds	r3, #8
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	e002      	b.n	8006e34 <vListInsert+0x2e>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d2f6      	bcs.n	8006e2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	1c5a      	adds	r2, r3, #1
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	601a      	str	r2, [r3, #0]
}
 8006e6c:	bf00      	nop
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6892      	ldr	r2, [r2, #8]
 8006e8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	6852      	ldr	r2, [r2, #4]
 8006e98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d103      	bne.n	8006eac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	1e5a      	subs	r2, r3, #1
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d109      	bne.n	8006ef4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	60bb      	str	r3, [r7, #8]
 8006ef2:	e7fe      	b.n	8006ef2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006ef4:	f001 ffe2 	bl	8008ebc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f00:	68f9      	ldr	r1, [r7, #12]
 8006f02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f04:	fb01 f303 	mul.w	r3, r1, r3
 8006f08:	441a      	add	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f24:	3b01      	subs	r3, #1
 8006f26:	68f9      	ldr	r1, [r7, #12]
 8006f28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f2a:	fb01 f303 	mul.w	r3, r1, r3
 8006f2e:	441a      	add	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	22ff      	movs	r2, #255	; 0xff
 8006f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	22ff      	movs	r2, #255	; 0xff
 8006f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d114      	bne.n	8006f74 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01a      	beq.n	8006f88 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3310      	adds	r3, #16
 8006f56:	4618      	mov	r0, r3
 8006f58:	f001 f912 	bl	8008180 <xTaskRemoveFromEventList>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d012      	beq.n	8006f88 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f62:	4b0d      	ldr	r3, [pc, #52]	; (8006f98 <xQueueGenericReset+0xcc>)
 8006f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	e009      	b.n	8006f88 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3310      	adds	r3, #16
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff fef3 	bl	8006d64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3324      	adds	r3, #36	; 0x24
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7ff feee 	bl	8006d64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f88:	f001 ffc6 	bl	8008f18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f8c:	2301      	movs	r3, #1
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	e000ed04 	.word	0xe000ed04

08006f9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08e      	sub	sp, #56	; 0x38
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d109      	bne.n	8006fc4 <xQueueGenericCreateStatic+0x28>
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fc2:	e7fe      	b.n	8006fc2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d109      	bne.n	8006fde <xQueueGenericCreateStatic+0x42>
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	627b      	str	r3, [r7, #36]	; 0x24
 8006fdc:	e7fe      	b.n	8006fdc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <xQueueGenericCreateStatic+0x4e>
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <xQueueGenericCreateStatic+0x52>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <xQueueGenericCreateStatic+0x54>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d109      	bne.n	8007008 <xQueueGenericCreateStatic+0x6c>
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	623b      	str	r3, [r7, #32]
 8007006:	e7fe      	b.n	8007006 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d102      	bne.n	8007014 <xQueueGenericCreateStatic+0x78>
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <xQueueGenericCreateStatic+0x7c>
 8007014:	2301      	movs	r3, #1
 8007016:	e000      	b.n	800701a <xQueueGenericCreateStatic+0x7e>
 8007018:	2300      	movs	r3, #0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d109      	bne.n	8007032 <xQueueGenericCreateStatic+0x96>
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	61fb      	str	r3, [r7, #28]
 8007030:	e7fe      	b.n	8007030 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007032:	2350      	movs	r3, #80	; 0x50
 8007034:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b50      	cmp	r3, #80	; 0x50
 800703a:	d009      	beq.n	8007050 <xQueueGenericCreateStatic+0xb4>
 800703c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	61bb      	str	r3, [r7, #24]
 800704e:	e7fe      	b.n	800704e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00d      	beq.n	8007076 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007062:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	4613      	mov	r3, r2
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	68b9      	ldr	r1, [r7, #8]
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 f805 	bl	8007080 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007078:	4618      	mov	r0, r3
 800707a:	3730      	adds	r7, #48	; 0x30
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d103      	bne.n	800709c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	e002      	b.n	80070a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070ae:	2101      	movs	r1, #1
 80070b0:	69b8      	ldr	r0, [r7, #24]
 80070b2:	f7ff ff0b 	bl	8006ecc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	78fa      	ldrb	r2, [r7, #3]
 80070ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070be:	bf00      	nop
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08e      	sub	sp, #56	; 0x38
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070d6:	2300      	movs	r3, #0
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d109      	bne.n	80070f8 <xQueueGenericSend+0x30>
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80070f6:	e7fe      	b.n	80070f6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d103      	bne.n	8007106 <xQueueGenericSend+0x3e>
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <xQueueGenericSend+0x42>
 8007106:	2301      	movs	r3, #1
 8007108:	e000      	b.n	800710c <xQueueGenericSend+0x44>
 800710a:	2300      	movs	r3, #0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d109      	bne.n	8007124 <xQueueGenericSend+0x5c>
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	627b      	str	r3, [r7, #36]	; 0x24
 8007122:	e7fe      	b.n	8007122 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	2b02      	cmp	r3, #2
 8007128:	d103      	bne.n	8007132 <xQueueGenericSend+0x6a>
 800712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712e:	2b01      	cmp	r3, #1
 8007130:	d101      	bne.n	8007136 <xQueueGenericSend+0x6e>
 8007132:	2301      	movs	r3, #1
 8007134:	e000      	b.n	8007138 <xQueueGenericSend+0x70>
 8007136:	2300      	movs	r3, #0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d109      	bne.n	8007150 <xQueueGenericSend+0x88>
 800713c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	623b      	str	r3, [r7, #32]
 800714e:	e7fe      	b.n	800714e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007150:	f001 f9a2 	bl	8008498 <xTaskGetSchedulerState>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d102      	bne.n	8007160 <xQueueGenericSend+0x98>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <xQueueGenericSend+0x9c>
 8007160:	2301      	movs	r3, #1
 8007162:	e000      	b.n	8007166 <xQueueGenericSend+0x9e>
 8007164:	2300      	movs	r3, #0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d109      	bne.n	800717e <xQueueGenericSend+0xb6>
 800716a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	61fb      	str	r3, [r7, #28]
 800717c:	e7fe      	b.n	800717c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800717e:	f001 fe9d 	bl	8008ebc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800718a:	429a      	cmp	r2, r3
 800718c:	d302      	bcc.n	8007194 <xQueueGenericSend+0xcc>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d129      	bne.n	80071e8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800719a:	f000 f9ff 	bl	800759c <prvCopyDataToQueue>
 800719e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d010      	beq.n	80071ca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	3324      	adds	r3, #36	; 0x24
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 ffe7 	bl	8008180 <xTaskRemoveFromEventList>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d013      	beq.n	80071e0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071b8:	4b3f      	ldr	r3, [pc, #252]	; (80072b8 <xQueueGenericSend+0x1f0>)
 80071ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	e00a      	b.n	80071e0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d007      	beq.n	80071e0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071d0:	4b39      	ldr	r3, [pc, #228]	; (80072b8 <xQueueGenericSend+0x1f0>)
 80071d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071e0:	f001 fe9a 	bl	8008f18 <vPortExitCritical>
				return pdPASS;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e063      	b.n	80072b0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d103      	bne.n	80071f6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071ee:	f001 fe93 	bl	8008f18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071f2:	2300      	movs	r3, #0
 80071f4:	e05c      	b.n	80072b0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d106      	bne.n	800720a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071fc:	f107 0314 	add.w	r3, r7, #20
 8007200:	4618      	mov	r0, r3
 8007202:	f001 f821 	bl	8008248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007206:	2301      	movs	r3, #1
 8007208:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800720a:	f001 fe85 	bl	8008f18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800720e:	f000 fd5d 	bl	8007ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007212:	f001 fe53 	bl	8008ebc <vPortEnterCritical>
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800721c:	b25b      	sxtb	r3, r3
 800721e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007222:	d103      	bne.n	800722c <xQueueGenericSend+0x164>
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007232:	b25b      	sxtb	r3, r3
 8007234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007238:	d103      	bne.n	8007242 <xQueueGenericSend+0x17a>
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007242:	f001 fe69 	bl	8008f18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007246:	1d3a      	adds	r2, r7, #4
 8007248:	f107 0314 	add.w	r3, r7, #20
 800724c:	4611      	mov	r1, r2
 800724e:	4618      	mov	r0, r3
 8007250:	f001 f810 	bl	8008274 <xTaskCheckForTimeOut>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d124      	bne.n	80072a4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800725a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800725c:	f000 fa96 	bl	800778c <prvIsQueueFull>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d018      	beq.n	8007298 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007268:	3310      	adds	r3, #16
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	4611      	mov	r1, r2
 800726e:	4618      	mov	r0, r3
 8007270:	f000 ff38 	bl	80080e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007276:	f000 fa21 	bl	80076bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800727a:	f000 fd6d 	bl	8007d58 <xTaskResumeAll>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	f47f af7c 	bne.w	800717e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007286:	4b0c      	ldr	r3, [pc, #48]	; (80072b8 <xQueueGenericSend+0x1f0>)
 8007288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	e772      	b.n	800717e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800729a:	f000 fa0f 	bl	80076bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800729e:	f000 fd5b 	bl	8007d58 <xTaskResumeAll>
 80072a2:	e76c      	b.n	800717e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80072a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072a6:	f000 fa09 	bl	80076bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072aa:	f000 fd55 	bl	8007d58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80072ae:	2300      	movs	r3, #0
		}
	}
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3738      	adds	r7, #56	; 0x38
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	e000ed04 	.word	0xe000ed04

080072bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08e      	sub	sp, #56	; 0x38
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d109      	bne.n	80072e8 <xQueueGenericSendFromISR+0x2c>
 80072d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	627b      	str	r3, [r7, #36]	; 0x24
 80072e6:	e7fe      	b.n	80072e6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d103      	bne.n	80072f6 <xQueueGenericSendFromISR+0x3a>
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <xQueueGenericSendFromISR+0x3e>
 80072f6:	2301      	movs	r3, #1
 80072f8:	e000      	b.n	80072fc <xQueueGenericSendFromISR+0x40>
 80072fa:	2300      	movs	r3, #0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d109      	bne.n	8007314 <xQueueGenericSendFromISR+0x58>
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	623b      	str	r3, [r7, #32]
 8007312:	e7fe      	b.n	8007312 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	2b02      	cmp	r3, #2
 8007318:	d103      	bne.n	8007322 <xQueueGenericSendFromISR+0x66>
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <xQueueGenericSendFromISR+0x6a>
 8007322:	2301      	movs	r3, #1
 8007324:	e000      	b.n	8007328 <xQueueGenericSendFromISR+0x6c>
 8007326:	2300      	movs	r3, #0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d109      	bne.n	8007340 <xQueueGenericSendFromISR+0x84>
 800732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	61fb      	str	r3, [r7, #28]
 800733e:	e7fe      	b.n	800733e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007340:	f001 fe98 	bl	8009074 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007344:	f3ef 8211 	mrs	r2, BASEPRI
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	61ba      	str	r2, [r7, #24]
 800735a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800735c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800735e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007368:	429a      	cmp	r2, r3
 800736a:	d302      	bcc.n	8007372 <xQueueGenericSendFromISR+0xb6>
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	2b02      	cmp	r3, #2
 8007370:	d12c      	bne.n	80073cc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	68b9      	ldr	r1, [r7, #8]
 8007380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007382:	f000 f90b 	bl	800759c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007386:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800738a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738e:	d112      	bne.n	80073b6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	2b00      	cmp	r3, #0
 8007396:	d016      	beq.n	80073c6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	3324      	adds	r3, #36	; 0x24
 800739c:	4618      	mov	r0, r3
 800739e:	f000 feef 	bl	8008180 <xTaskRemoveFromEventList>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00e      	beq.n	80073c6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00b      	beq.n	80073c6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	e007      	b.n	80073c6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073ba:	3301      	adds	r3, #1
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	b25a      	sxtb	r2, r3
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073c6:	2301      	movs	r3, #1
 80073c8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80073ca:	e001      	b.n	80073d0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073cc:	2300      	movs	r3, #0
 80073ce:	637b      	str	r3, [r7, #52]	; 0x34
 80073d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3738      	adds	r7, #56	; 0x38
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b08c      	sub	sp, #48	; 0x30
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073f0:	2300      	movs	r3, #0
 80073f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d109      	bne.n	8007412 <xQueueReceive+0x2e>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	623b      	str	r3, [r7, #32]
 8007410:	e7fe      	b.n	8007410 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d103      	bne.n	8007420 <xQueueReceive+0x3c>
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <xQueueReceive+0x40>
 8007420:	2301      	movs	r3, #1
 8007422:	e000      	b.n	8007426 <xQueueReceive+0x42>
 8007424:	2300      	movs	r3, #0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d109      	bne.n	800743e <xQueueReceive+0x5a>
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	61fb      	str	r3, [r7, #28]
 800743c:	e7fe      	b.n	800743c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800743e:	f001 f82b 	bl	8008498 <xTaskGetSchedulerState>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d102      	bne.n	800744e <xQueueReceive+0x6a>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <xQueueReceive+0x6e>
 800744e:	2301      	movs	r3, #1
 8007450:	e000      	b.n	8007454 <xQueueReceive+0x70>
 8007452:	2300      	movs	r3, #0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d109      	bne.n	800746c <xQueueReceive+0x88>
 8007458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	61bb      	str	r3, [r7, #24]
 800746a:	e7fe      	b.n	800746a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800746c:	f001 fd26 	bl	8008ebc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	2b00      	cmp	r3, #0
 800747a:	d01f      	beq.n	80074bc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800747c:	68b9      	ldr	r1, [r7, #8]
 800747e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007480:	f000 f8f6 	bl	8007670 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	1e5a      	subs	r2, r3, #1
 8007488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800748c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00f      	beq.n	80074b4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	3310      	adds	r3, #16
 8007498:	4618      	mov	r0, r3
 800749a:	f000 fe71 	bl	8008180 <xTaskRemoveFromEventList>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d007      	beq.n	80074b4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80074a4:	4b3c      	ldr	r3, [pc, #240]	; (8007598 <xQueueReceive+0x1b4>)
 80074a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074b4:	f001 fd30 	bl	8008f18 <vPortExitCritical>
				return pdPASS;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e069      	b.n	8007590 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d103      	bne.n	80074ca <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074c2:	f001 fd29 	bl	8008f18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074c6:	2300      	movs	r3, #0
 80074c8:	e062      	b.n	8007590 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d106      	bne.n	80074de <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074d0:	f107 0310 	add.w	r3, r7, #16
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 feb7 	bl	8008248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074da:	2301      	movs	r3, #1
 80074dc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074de:	f001 fd1b 	bl	8008f18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074e2:	f000 fbf3 	bl	8007ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074e6:	f001 fce9 	bl	8008ebc <vPortEnterCritical>
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074f0:	b25b      	sxtb	r3, r3
 80074f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f6:	d103      	bne.n	8007500 <xQueueReceive+0x11c>
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007502:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007506:	b25b      	sxtb	r3, r3
 8007508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750c:	d103      	bne.n	8007516 <xQueueReceive+0x132>
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007516:	f001 fcff 	bl	8008f18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800751a:	1d3a      	adds	r2, r7, #4
 800751c:	f107 0310 	add.w	r3, r7, #16
 8007520:	4611      	mov	r1, r2
 8007522:	4618      	mov	r0, r3
 8007524:	f000 fea6 	bl	8008274 <xTaskCheckForTimeOut>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d123      	bne.n	8007576 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800752e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007530:	f000 f916 	bl	8007760 <prvIsQueueEmpty>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d017      	beq.n	800756a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	3324      	adds	r3, #36	; 0x24
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	4611      	mov	r1, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f000 fdce 	bl	80080e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800754a:	f000 f8b7 	bl	80076bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800754e:	f000 fc03 	bl	8007d58 <xTaskResumeAll>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d189      	bne.n	800746c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007558:	4b0f      	ldr	r3, [pc, #60]	; (8007598 <xQueueReceive+0x1b4>)
 800755a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800755e:	601a      	str	r2, [r3, #0]
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	e780      	b.n	800746c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800756a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800756c:	f000 f8a6 	bl	80076bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007570:	f000 fbf2 	bl	8007d58 <xTaskResumeAll>
 8007574:	e77a      	b.n	800746c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007578:	f000 f8a0 	bl	80076bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800757c:	f000 fbec 	bl	8007d58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007582:	f000 f8ed 	bl	8007760 <prvIsQueueEmpty>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	f43f af6f 	beq.w	800746c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800758e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007590:	4618      	mov	r0, r3
 8007592:	3730      	adds	r7, #48	; 0x30
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	e000ed04 	.word	0xe000ed04

0800759c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075a8:	2300      	movs	r3, #0
 80075aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10d      	bne.n	80075d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d14d      	bne.n	800765e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 ff84 	bl	80084d4 <xTaskPriorityDisinherit>
 80075cc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	605a      	str	r2, [r3, #4]
 80075d4:	e043      	b.n	800765e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d119      	bne.n	8007610 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6898      	ldr	r0, [r3, #8]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	461a      	mov	r2, r3
 80075e6:	68b9      	ldr	r1, [r7, #8]
 80075e8:	f002 fc12 	bl	8009e10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f4:	441a      	add	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	429a      	cmp	r2, r3
 8007604:	d32b      	bcc.n	800765e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	609a      	str	r2, [r3, #8]
 800760e:	e026      	b.n	800765e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	68d8      	ldr	r0, [r3, #12]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	461a      	mov	r2, r3
 800761a:	68b9      	ldr	r1, [r7, #8]
 800761c:	f002 fbf8 	bl	8009e10 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	68da      	ldr	r2, [r3, #12]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007628:	425b      	negs	r3, r3
 800762a:	441a      	add	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	429a      	cmp	r2, r3
 800763a:	d207      	bcs.n	800764c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007644:	425b      	negs	r3, r3
 8007646:	441a      	add	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b02      	cmp	r3, #2
 8007650:	d105      	bne.n	800765e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	3b01      	subs	r3, #1
 800765c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007666:	697b      	ldr	r3, [r7, #20]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	2b00      	cmp	r3, #0
 8007680:	d018      	beq.n	80076b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	441a      	add	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	429a      	cmp	r2, r3
 800769a:	d303      	bcc.n	80076a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68d9      	ldr	r1, [r3, #12]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ac:	461a      	mov	r2, r3
 80076ae:	6838      	ldr	r0, [r7, #0]
 80076b0:	f002 fbae 	bl	8009e10 <memcpy>
	}
}
 80076b4:	bf00      	nop
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076c4:	f001 fbfa 	bl	8008ebc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076d0:	e011      	b.n	80076f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d012      	beq.n	8007700 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	3324      	adds	r3, #36	; 0x24
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 fd4e 	bl	8008180 <xTaskRemoveFromEventList>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076ea:	f000 fe23 	bl	8008334 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	dce9      	bgt.n	80076d2 <prvUnlockQueue+0x16>
 80076fe:	e000      	b.n	8007702 <prvUnlockQueue+0x46>
					break;
 8007700:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	22ff      	movs	r2, #255	; 0xff
 8007706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800770a:	f001 fc05 	bl	8008f18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800770e:	f001 fbd5 	bl	8008ebc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007718:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800771a:	e011      	b.n	8007740 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d012      	beq.n	800774a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3310      	adds	r3, #16
 8007728:	4618      	mov	r0, r3
 800772a:	f000 fd29 	bl	8008180 <xTaskRemoveFromEventList>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007734:	f000 fdfe 	bl	8008334 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007738:	7bbb      	ldrb	r3, [r7, #14]
 800773a:	3b01      	subs	r3, #1
 800773c:	b2db      	uxtb	r3, r3
 800773e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007744:	2b00      	cmp	r3, #0
 8007746:	dce9      	bgt.n	800771c <prvUnlockQueue+0x60>
 8007748:	e000      	b.n	800774c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800774a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	22ff      	movs	r2, #255	; 0xff
 8007750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007754:	f001 fbe0 	bl	8008f18 <vPortExitCritical>
}
 8007758:	bf00      	nop
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007768:	f001 fba8 	bl	8008ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	2b00      	cmp	r3, #0
 8007772:	d102      	bne.n	800777a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007774:	2301      	movs	r3, #1
 8007776:	60fb      	str	r3, [r7, #12]
 8007778:	e001      	b.n	800777e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800777a:	2300      	movs	r3, #0
 800777c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800777e:	f001 fbcb 	bl	8008f18 <vPortExitCritical>

	return xReturn;
 8007782:	68fb      	ldr	r3, [r7, #12]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007794:	f001 fb92 	bl	8008ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d102      	bne.n	80077aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077a4:	2301      	movs	r3, #1
 80077a6:	60fb      	str	r3, [r7, #12]
 80077a8:	e001      	b.n	80077ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077ae:	f001 fbb3 	bl	8008f18 <vPortExitCritical>

	return xReturn;
 80077b2:	68fb      	ldr	r3, [r7, #12]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	e014      	b.n	80077f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077cc:	4a0e      	ldr	r2, [pc, #56]	; (8007808 <vQueueAddToRegistry+0x4c>)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10b      	bne.n	80077f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077d8:	490b      	ldr	r1, [pc, #44]	; (8007808 <vQueueAddToRegistry+0x4c>)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80077e2:	4a09      	ldr	r2, [pc, #36]	; (8007808 <vQueueAddToRegistry+0x4c>)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	00db      	lsls	r3, r3, #3
 80077e8:	4413      	add	r3, r2
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80077ee:	e005      	b.n	80077fc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	3301      	adds	r3, #1
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2b07      	cmp	r3, #7
 80077fa:	d9e7      	bls.n	80077cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077fc:	bf00      	nop
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	20002f0c 	.word	0x20002f0c

0800780c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800781c:	f001 fb4e 	bl	8008ebc <vPortEnterCritical>
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007826:	b25b      	sxtb	r3, r3
 8007828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782c:	d103      	bne.n	8007836 <vQueueWaitForMessageRestricted+0x2a>
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800783c:	b25b      	sxtb	r3, r3
 800783e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007842:	d103      	bne.n	800784c <vQueueWaitForMessageRestricted+0x40>
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800784c:	f001 fb64 	bl	8008f18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007854:	2b00      	cmp	r3, #0
 8007856:	d106      	bne.n	8007866 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	3324      	adds	r3, #36	; 0x24
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	68b9      	ldr	r1, [r7, #8]
 8007860:	4618      	mov	r0, r3
 8007862:	f000 fc63 	bl	800812c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007866:	6978      	ldr	r0, [r7, #20]
 8007868:	f7ff ff28 	bl	80076bc <prvUnlockQueue>
	}
 800786c:	bf00      	nop
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08e      	sub	sp, #56	; 0x38
 8007878:	af04      	add	r7, sp, #16
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007884:	2b00      	cmp	r3, #0
 8007886:	d109      	bne.n	800789c <xTaskCreateStatic+0x28>
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	623b      	str	r3, [r7, #32]
 800789a:	e7fe      	b.n	800789a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d109      	bne.n	80078b6 <xTaskCreateStatic+0x42>
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	61fb      	str	r3, [r7, #28]
 80078b4:	e7fe      	b.n	80078b4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078b6:	235c      	movs	r3, #92	; 0x5c
 80078b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	2b5c      	cmp	r3, #92	; 0x5c
 80078be:	d009      	beq.n	80078d4 <xTaskCreateStatic+0x60>
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	61bb      	str	r3, [r7, #24]
 80078d2:	e7fe      	b.n	80078d2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d01e      	beq.n	8007918 <xTaskCreateStatic+0xa4>
 80078da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d01b      	beq.n	8007918 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	2202      	movs	r2, #2
 80078ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078f2:	2300      	movs	r3, #0
 80078f4:	9303      	str	r3, [sp, #12]
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	9302      	str	r3, [sp, #8]
 80078fa:	f107 0314 	add.w	r3, r7, #20
 80078fe:	9301      	str	r3, [sp, #4]
 8007900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	68b9      	ldr	r1, [r7, #8]
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 f850 	bl	80079b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007910:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007912:	f000 f8d3 	bl	8007abc <prvAddNewTaskToReadyList>
 8007916:	e001      	b.n	800791c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007918:	2300      	movs	r3, #0
 800791a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800791c:	697b      	ldr	r3, [r7, #20]
	}
 800791e:	4618      	mov	r0, r3
 8007920:	3728      	adds	r7, #40	; 0x28
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007926:	b580      	push	{r7, lr}
 8007928:	b08c      	sub	sp, #48	; 0x30
 800792a:	af04      	add	r7, sp, #16
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	60b9      	str	r1, [r7, #8]
 8007930:	603b      	str	r3, [r7, #0]
 8007932:	4613      	mov	r3, r2
 8007934:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007936:	88fb      	ldrh	r3, [r7, #6]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4618      	mov	r0, r3
 800793c:	f001 fbd8 	bl	80090f0 <pvPortMalloc>
 8007940:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00e      	beq.n	8007966 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007948:	205c      	movs	r0, #92	; 0x5c
 800794a:	f001 fbd1 	bl	80090f0 <pvPortMalloc>
 800794e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	631a      	str	r2, [r3, #48]	; 0x30
 800795c:	e005      	b.n	800796a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800795e:	6978      	ldr	r0, [r7, #20]
 8007960:	f001 fc88 	bl	8009274 <vPortFree>
 8007964:	e001      	b.n	800796a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007966:	2300      	movs	r3, #0
 8007968:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d017      	beq.n	80079a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007978:	88fa      	ldrh	r2, [r7, #6]
 800797a:	2300      	movs	r3, #0
 800797c:	9303      	str	r3, [sp, #12]
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	9302      	str	r3, [sp, #8]
 8007982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007984:	9301      	str	r3, [sp, #4]
 8007986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	68b9      	ldr	r1, [r7, #8]
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f000 f80e 	bl	80079b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007994:	69f8      	ldr	r0, [r7, #28]
 8007996:	f000 f891 	bl	8007abc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800799a:	2301      	movs	r3, #1
 800799c:	61bb      	str	r3, [r7, #24]
 800799e:	e002      	b.n	80079a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079a0:	f04f 33ff 	mov.w	r3, #4294967295
 80079a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079a6:	69bb      	ldr	r3, [r7, #24]
	}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3720      	adds	r7, #32
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b088      	sub	sp, #32
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	461a      	mov	r2, r3
 80079c8:	21a5      	movs	r1, #165	; 0xa5
 80079ca:	f002 fa2c 	bl	8009e26 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80079d8:	3b01      	subs	r3, #1
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	f023 0307 	bic.w	r3, r3, #7
 80079e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d009      	beq.n	8007a06 <prvInitialiseNewTask+0x56>
 80079f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	e7fe      	b.n	8007a04 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a06:	2300      	movs	r3, #0
 8007a08:	61fb      	str	r3, [r7, #28]
 8007a0a:	e012      	b.n	8007a32 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	4413      	add	r3, r2
 8007a12:	7819      	ldrb	r1, [r3, #0]
 8007a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	4413      	add	r3, r2
 8007a1a:	3334      	adds	r3, #52	; 0x34
 8007a1c:	460a      	mov	r2, r1
 8007a1e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	4413      	add	r3, r2
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d006      	beq.n	8007a3a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	61fb      	str	r3, [r7, #28]
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	2b0f      	cmp	r3, #15
 8007a36:	d9e9      	bls.n	8007a0c <prvInitialiseNewTask+0x5c>
 8007a38:	e000      	b.n	8007a3c <prvInitialiseNewTask+0x8c>
		{
			break;
 8007a3a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a46:	2b37      	cmp	r3, #55	; 0x37
 8007a48:	d901      	bls.n	8007a4e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a4a:	2337      	movs	r3, #55	; 0x37
 8007a4c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a52:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a58:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	3304      	adds	r3, #4
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff f99d 	bl	8006da4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	3318      	adds	r3, #24
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff f998 	bl	8006da4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a88:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	68f9      	ldr	r1, [r7, #12]
 8007a9c:	69b8      	ldr	r0, [r7, #24]
 8007a9e:	f001 f8e3 	bl	8008c68 <pxPortInitialiseStack>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d002      	beq.n	8007ab4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ab4:	bf00      	nop
 8007ab6:	3720      	adds	r7, #32
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ac4:	f001 f9fa 	bl	8008ebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ac8:	4b2d      	ldr	r3, [pc, #180]	; (8007b80 <prvAddNewTaskToReadyList+0xc4>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3301      	adds	r3, #1
 8007ace:	4a2c      	ldr	r2, [pc, #176]	; (8007b80 <prvAddNewTaskToReadyList+0xc4>)
 8007ad0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ad2:	4b2c      	ldr	r3, [pc, #176]	; (8007b84 <prvAddNewTaskToReadyList+0xc8>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d109      	bne.n	8007aee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ada:	4a2a      	ldr	r2, [pc, #168]	; (8007b84 <prvAddNewTaskToReadyList+0xc8>)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ae0:	4b27      	ldr	r3, [pc, #156]	; (8007b80 <prvAddNewTaskToReadyList+0xc4>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d110      	bne.n	8007b0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ae8:	f000 fc6e 	bl	80083c8 <prvInitialiseTaskLists>
 8007aec:	e00d      	b.n	8007b0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007aee:	4b26      	ldr	r3, [pc, #152]	; (8007b88 <prvAddNewTaskToReadyList+0xcc>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d109      	bne.n	8007b0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007af6:	4b23      	ldr	r3, [pc, #140]	; (8007b84 <prvAddNewTaskToReadyList+0xc8>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d802      	bhi.n	8007b0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b04:	4a1f      	ldr	r2, [pc, #124]	; (8007b84 <prvAddNewTaskToReadyList+0xc8>)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b0a:	4b20      	ldr	r3, [pc, #128]	; (8007b8c <prvAddNewTaskToReadyList+0xd0>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	4a1e      	ldr	r2, [pc, #120]	; (8007b8c <prvAddNewTaskToReadyList+0xd0>)
 8007b12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b14:	4b1d      	ldr	r3, [pc, #116]	; (8007b8c <prvAddNewTaskToReadyList+0xd0>)
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b20:	4b1b      	ldr	r3, [pc, #108]	; (8007b90 <prvAddNewTaskToReadyList+0xd4>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d903      	bls.n	8007b30 <prvAddNewTaskToReadyList+0x74>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	4a18      	ldr	r2, [pc, #96]	; (8007b90 <prvAddNewTaskToReadyList+0xd4>)
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4a15      	ldr	r2, [pc, #84]	; (8007b94 <prvAddNewTaskToReadyList+0xd8>)
 8007b3e:	441a      	add	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3304      	adds	r3, #4
 8007b44:	4619      	mov	r1, r3
 8007b46:	4610      	mov	r0, r2
 8007b48:	f7ff f939 	bl	8006dbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b4c:	f001 f9e4 	bl	8008f18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b50:	4b0d      	ldr	r3, [pc, #52]	; (8007b88 <prvAddNewTaskToReadyList+0xcc>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00e      	beq.n	8007b76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b58:	4b0a      	ldr	r3, [pc, #40]	; (8007b84 <prvAddNewTaskToReadyList+0xc8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d207      	bcs.n	8007b76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b66:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <prvAddNewTaskToReadyList+0xdc>)
 8007b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b76:	bf00      	nop
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	20001318 	.word	0x20001318
 8007b84:	20000e5c 	.word	0x20000e5c
 8007b88:	20001324 	.word	0x20001324
 8007b8c:	20001334 	.word	0x20001334
 8007b90:	20001320 	.word	0x20001320
 8007b94:	20000e60 	.word	0x20000e60
 8007b98:	e000ed04 	.word	0xe000ed04

08007b9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d016      	beq.n	8007bdc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007bae:	4b13      	ldr	r3, [pc, #76]	; (8007bfc <vTaskDelay+0x60>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d009      	beq.n	8007bca <vTaskDelay+0x2e>
 8007bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	60bb      	str	r3, [r7, #8]
 8007bc8:	e7fe      	b.n	8007bc8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007bca:	f000 f87f 	bl	8007ccc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bce:	2100      	movs	r1, #0
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fceb 	bl	80085ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bd6:	f000 f8bf 	bl	8007d58 <xTaskResumeAll>
 8007bda:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d107      	bne.n	8007bf2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007be2:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <vTaskDelay+0x64>)
 8007be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bf2:	bf00      	nop
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	20001340 	.word	0x20001340
 8007c00:	e000ed04 	.word	0xe000ed04

08007c04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08a      	sub	sp, #40	; 0x28
 8007c08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c12:	463a      	mov	r2, r7
 8007c14:	1d39      	adds	r1, r7, #4
 8007c16:	f107 0308 	add.w	r3, r7, #8
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7ff f86e 	bl	8006cfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	9202      	str	r2, [sp, #8]
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	460a      	mov	r2, r1
 8007c32:	4920      	ldr	r1, [pc, #128]	; (8007cb4 <vTaskStartScheduler+0xb0>)
 8007c34:	4820      	ldr	r0, [pc, #128]	; (8007cb8 <vTaskStartScheduler+0xb4>)
 8007c36:	f7ff fe1d 	bl	8007874 <xTaskCreateStatic>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	4b1f      	ldr	r3, [pc, #124]	; (8007cbc <vTaskStartScheduler+0xb8>)
 8007c3e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c40:	4b1e      	ldr	r3, [pc, #120]	; (8007cbc <vTaskStartScheduler+0xb8>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	e001      	b.n	8007c52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d102      	bne.n	8007c5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c58:	f000 fcfc 	bl	8008654 <xTimerCreateTimerTask>
 8007c5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d115      	bne.n	8007c90 <vTaskStartScheduler+0x8c>
 8007c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c76:	4b12      	ldr	r3, [pc, #72]	; (8007cc0 <vTaskStartScheduler+0xbc>)
 8007c78:	f04f 32ff 	mov.w	r2, #4294967295
 8007c7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c7e:	4b11      	ldr	r3, [pc, #68]	; (8007cc4 <vTaskStartScheduler+0xc0>)
 8007c80:	2201      	movs	r2, #1
 8007c82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007c84:	4b10      	ldr	r3, [pc, #64]	; (8007cc8 <vTaskStartScheduler+0xc4>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c8a:	f001 f879 	bl	8008d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c8e:	e00d      	b.n	8007cac <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c96:	d109      	bne.n	8007cac <vTaskStartScheduler+0xa8>
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	60fb      	str	r3, [r7, #12]
 8007caa:	e7fe      	b.n	8007caa <vTaskStartScheduler+0xa6>
}
 8007cac:	bf00      	nop
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	08009e6c 	.word	0x08009e6c
 8007cb8:	0800834d 	.word	0x0800834d
 8007cbc:	2000133c 	.word	0x2000133c
 8007cc0:	20001338 	.word	0x20001338
 8007cc4:	20001324 	.word	0x20001324
 8007cc8:	2000131c 	.word	0x2000131c

08007ccc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007cd0:	4b04      	ldr	r3, [pc, #16]	; (8007ce4 <vTaskSuspendAll+0x18>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	4a03      	ldr	r2, [pc, #12]	; (8007ce4 <vTaskSuspendAll+0x18>)
 8007cd8:	6013      	str	r3, [r2, #0]
}
 8007cda:	bf00      	nop
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	20001340 	.word	0x20001340

08007ce8 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8007cf2:	4b14      	ldr	r3, [pc, #80]	; (8007d44 <prvGetExpectedIdleTime+0x5c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8007cfe:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <prvGetExpectedIdleTime+0x60>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	607b      	str	r3, [r7, #4]
 8007d0c:	e012      	b.n	8007d34 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8007d0e:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <prvGetExpectedIdleTime+0x64>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d902      	bls.n	8007d1c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8007d16:	2300      	movs	r3, #0
 8007d18:	607b      	str	r3, [r7, #4]
 8007d1a:	e00b      	b.n	8007d34 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8007d22:	2300      	movs	r3, #0
 8007d24:	607b      	str	r3, [r7, #4]
 8007d26:	e005      	b.n	8007d34 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8007d28:	4b09      	ldr	r3, [pc, #36]	; (8007d50 <prvGetExpectedIdleTime+0x68>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <prvGetExpectedIdleTime+0x6c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8007d34:	687b      	ldr	r3, [r7, #4]
	}
 8007d36:	4618      	mov	r0, r3
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	20001320 	.word	0x20001320
 8007d48:	20000e5c 	.word	0x20000e5c
 8007d4c:	20000e60 	.word	0x20000e60
 8007d50:	20001338 	.word	0x20001338
 8007d54:	2000131c 	.word	0x2000131c

08007d58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d62:	2300      	movs	r3, #0
 8007d64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d66:	4b41      	ldr	r3, [pc, #260]	; (8007e6c <xTaskResumeAll+0x114>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d109      	bne.n	8007d82 <xTaskResumeAll+0x2a>
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	603b      	str	r3, [r7, #0]
 8007d80:	e7fe      	b.n	8007d80 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d82:	f001 f89b 	bl	8008ebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d86:	4b39      	ldr	r3, [pc, #228]	; (8007e6c <xTaskResumeAll+0x114>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	4a37      	ldr	r2, [pc, #220]	; (8007e6c <xTaskResumeAll+0x114>)
 8007d8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d90:	4b36      	ldr	r3, [pc, #216]	; (8007e6c <xTaskResumeAll+0x114>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d162      	bne.n	8007e5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d98:	4b35      	ldr	r3, [pc, #212]	; (8007e70 <xTaskResumeAll+0x118>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d05e      	beq.n	8007e5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007da0:	e02f      	b.n	8007e02 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007da2:	4b34      	ldr	r3, [pc, #208]	; (8007e74 <xTaskResumeAll+0x11c>)
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3318      	adds	r3, #24
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff f862 	bl	8006e78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3304      	adds	r3, #4
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7ff f85d 	bl	8006e78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc2:	4b2d      	ldr	r3, [pc, #180]	; (8007e78 <xTaskResumeAll+0x120>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d903      	bls.n	8007dd2 <xTaskResumeAll+0x7a>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dce:	4a2a      	ldr	r2, [pc, #168]	; (8007e78 <xTaskResumeAll+0x120>)
 8007dd0:	6013      	str	r3, [r2, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4413      	add	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4a27      	ldr	r2, [pc, #156]	; (8007e7c <xTaskResumeAll+0x124>)
 8007de0:	441a      	add	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3304      	adds	r3, #4
 8007de6:	4619      	mov	r1, r3
 8007de8:	4610      	mov	r0, r2
 8007dea:	f7fe ffe8 	bl	8006dbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df2:	4b23      	ldr	r3, [pc, #140]	; (8007e80 <xTaskResumeAll+0x128>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d302      	bcc.n	8007e02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007dfc:	4b21      	ldr	r3, [pc, #132]	; (8007e84 <xTaskResumeAll+0x12c>)
 8007dfe:	2201      	movs	r2, #1
 8007e00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e02:	4b1c      	ldr	r3, [pc, #112]	; (8007e74 <xTaskResumeAll+0x11c>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1cb      	bne.n	8007da2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e10:	f000 fb1c 	bl	800844c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007e14:	4b1c      	ldr	r3, [pc, #112]	; (8007e88 <xTaskResumeAll+0x130>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d010      	beq.n	8007e42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e20:	f000 f846 	bl	8007eb0 <xTaskIncrementTick>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007e2a:	4b16      	ldr	r3, [pc, #88]	; (8007e84 <xTaskResumeAll+0x12c>)
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1f1      	bne.n	8007e20 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007e3c:	4b12      	ldr	r3, [pc, #72]	; (8007e88 <xTaskResumeAll+0x130>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e42:	4b10      	ldr	r3, [pc, #64]	; (8007e84 <xTaskResumeAll+0x12c>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d009      	beq.n	8007e5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e4e:	4b0f      	ldr	r3, [pc, #60]	; (8007e8c <xTaskResumeAll+0x134>)
 8007e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e5e:	f001 f85b 	bl	8008f18 <vPortExitCritical>

	return xAlreadyYielded;
 8007e62:	68bb      	ldr	r3, [r7, #8]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	20001340 	.word	0x20001340
 8007e70:	20001318 	.word	0x20001318
 8007e74:	200012f0 	.word	0x200012f0
 8007e78:	20001320 	.word	0x20001320
 8007e7c:	20000e60 	.word	0x20000e60
 8007e80:	20000e5c 	.word	0x20000e5c
 8007e84:	2000132c 	.word	0x2000132c
 8007e88:	20001328 	.word	0x20001328
 8007e8c:	e000ed04 	.word	0xe000ed04

08007e90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e96:	4b05      	ldr	r3, [pc, #20]	; (8007eac <xTaskGetTickCount+0x1c>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e9c:	687b      	ldr	r3, [r7, #4]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	2000131c 	.word	0x2000131c

08007eb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eba:	4b51      	ldr	r3, [pc, #324]	; (8008000 <xTaskIncrementTick+0x150>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f040 808d 	bne.w	8007fde <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ec4:	4b4f      	ldr	r3, [pc, #316]	; (8008004 <xTaskIncrementTick+0x154>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ecc:	4a4d      	ldr	r2, [pc, #308]	; (8008004 <xTaskIncrementTick+0x154>)
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d11f      	bne.n	8007f18 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ed8:	4b4b      	ldr	r3, [pc, #300]	; (8008008 <xTaskIncrementTick+0x158>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d009      	beq.n	8007ef6 <xTaskIncrementTick+0x46>
 8007ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	e7fe      	b.n	8007ef4 <xTaskIncrementTick+0x44>
 8007ef6:	4b44      	ldr	r3, [pc, #272]	; (8008008 <xTaskIncrementTick+0x158>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	4b43      	ldr	r3, [pc, #268]	; (800800c <xTaskIncrementTick+0x15c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a41      	ldr	r2, [pc, #260]	; (8008008 <xTaskIncrementTick+0x158>)
 8007f02:	6013      	str	r3, [r2, #0]
 8007f04:	4a41      	ldr	r2, [pc, #260]	; (800800c <xTaskIncrementTick+0x15c>)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	4b41      	ldr	r3, [pc, #260]	; (8008010 <xTaskIncrementTick+0x160>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	4a3f      	ldr	r2, [pc, #252]	; (8008010 <xTaskIncrementTick+0x160>)
 8007f12:	6013      	str	r3, [r2, #0]
 8007f14:	f000 fa9a 	bl	800844c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f18:	4b3e      	ldr	r3, [pc, #248]	; (8008014 <xTaskIncrementTick+0x164>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d34e      	bcc.n	8007fc0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f22:	4b39      	ldr	r3, [pc, #228]	; (8008008 <xTaskIncrementTick+0x158>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <xTaskIncrementTick+0x80>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e000      	b.n	8007f32 <xTaskIncrementTick+0x82>
 8007f30:	2300      	movs	r3, #0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d004      	beq.n	8007f40 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f36:	4b37      	ldr	r3, [pc, #220]	; (8008014 <xTaskIncrementTick+0x164>)
 8007f38:	f04f 32ff 	mov.w	r2, #4294967295
 8007f3c:	601a      	str	r2, [r3, #0]
					break;
 8007f3e:	e03f      	b.n	8007fc0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f40:	4b31      	ldr	r3, [pc, #196]	; (8008008 <xTaskIncrementTick+0x158>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d203      	bcs.n	8007f60 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f58:	4a2e      	ldr	r2, [pc, #184]	; (8008014 <xTaskIncrementTick+0x164>)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6013      	str	r3, [r2, #0]
						break;
 8007f5e:	e02f      	b.n	8007fc0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	3304      	adds	r3, #4
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fe ff87 	bl	8006e78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d004      	beq.n	8007f7c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	3318      	adds	r3, #24
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fe ff7e 	bl	8006e78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f80:	4b25      	ldr	r3, [pc, #148]	; (8008018 <xTaskIncrementTick+0x168>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d903      	bls.n	8007f90 <xTaskIncrementTick+0xe0>
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8c:	4a22      	ldr	r2, [pc, #136]	; (8008018 <xTaskIncrementTick+0x168>)
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4a1f      	ldr	r2, [pc, #124]	; (800801c <xTaskIncrementTick+0x16c>)
 8007f9e:	441a      	add	r2, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	f7fe ff09 	bl	8006dbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb0:	4b1b      	ldr	r3, [pc, #108]	; (8008020 <xTaskIncrementTick+0x170>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d3b3      	bcc.n	8007f22 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fbe:	e7b0      	b.n	8007f22 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fc0:	4b17      	ldr	r3, [pc, #92]	; (8008020 <xTaskIncrementTick+0x170>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc6:	4915      	ldr	r1, [pc, #84]	; (800801c <xTaskIncrementTick+0x16c>)
 8007fc8:	4613      	mov	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d907      	bls.n	8007fe8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	617b      	str	r3, [r7, #20]
 8007fdc:	e004      	b.n	8007fe8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007fde:	4b11      	ldr	r3, [pc, #68]	; (8008024 <xTaskIncrementTick+0x174>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	4a0f      	ldr	r2, [pc, #60]	; (8008024 <xTaskIncrementTick+0x174>)
 8007fe6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007fe8:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <xTaskIncrementTick+0x178>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ff4:	697b      	ldr	r3, [r7, #20]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	20001340 	.word	0x20001340
 8008004:	2000131c 	.word	0x2000131c
 8008008:	200012e8 	.word	0x200012e8
 800800c:	200012ec 	.word	0x200012ec
 8008010:	20001330 	.word	0x20001330
 8008014:	20001338 	.word	0x20001338
 8008018:	20001320 	.word	0x20001320
 800801c:	20000e60 	.word	0x20000e60
 8008020:	20000e5c 	.word	0x20000e5c
 8008024:	20001328 	.word	0x20001328
 8008028:	2000132c 	.word	0x2000132c

0800802c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008032:	4b27      	ldr	r3, [pc, #156]	; (80080d0 <vTaskSwitchContext+0xa4>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800803a:	4b26      	ldr	r3, [pc, #152]	; (80080d4 <vTaskSwitchContext+0xa8>)
 800803c:	2201      	movs	r2, #1
 800803e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008040:	e040      	b.n	80080c4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008042:	4b24      	ldr	r3, [pc, #144]	; (80080d4 <vTaskSwitchContext+0xa8>)
 8008044:	2200      	movs	r2, #0
 8008046:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008048:	4b23      	ldr	r3, [pc, #140]	; (80080d8 <vTaskSwitchContext+0xac>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	e00f      	b.n	8008070 <vTaskSwitchContext+0x44>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d109      	bne.n	800806a <vTaskSwitchContext+0x3e>
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	607b      	str	r3, [r7, #4]
 8008068:	e7fe      	b.n	8008068 <vTaskSwitchContext+0x3c>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3b01      	subs	r3, #1
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	491a      	ldr	r1, [pc, #104]	; (80080dc <vTaskSwitchContext+0xb0>)
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d0e5      	beq.n	8008050 <vTaskSwitchContext+0x24>
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	4613      	mov	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4a13      	ldr	r2, [pc, #76]	; (80080dc <vTaskSwitchContext+0xb0>)
 8008090:	4413      	add	r3, r2
 8008092:	60bb      	str	r3, [r7, #8]
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	605a      	str	r2, [r3, #4]
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	3308      	adds	r3, #8
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d104      	bne.n	80080b4 <vTaskSwitchContext+0x88>
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	605a      	str	r2, [r3, #4]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	4a09      	ldr	r2, [pc, #36]	; (80080e0 <vTaskSwitchContext+0xb4>)
 80080bc:	6013      	str	r3, [r2, #0]
 80080be:	4a06      	ldr	r2, [pc, #24]	; (80080d8 <vTaskSwitchContext+0xac>)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6013      	str	r3, [r2, #0]
}
 80080c4:	bf00      	nop
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	20001340 	.word	0x20001340
 80080d4:	2000132c 	.word	0x2000132c
 80080d8:	20001320 	.word	0x20001320
 80080dc:	20000e60 	.word	0x20000e60
 80080e0:	20000e5c 	.word	0x20000e5c

080080e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d109      	bne.n	8008108 <vTaskPlaceOnEventList+0x24>
 80080f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	60fb      	str	r3, [r7, #12]
 8008106:	e7fe      	b.n	8008106 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008108:	4b07      	ldr	r3, [pc, #28]	; (8008128 <vTaskPlaceOnEventList+0x44>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3318      	adds	r3, #24
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7fe fe78 	bl	8006e06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008116:	2101      	movs	r1, #1
 8008118:	6838      	ldr	r0, [r7, #0]
 800811a:	f000 fa47 	bl	80085ac <prvAddCurrentTaskToDelayedList>
}
 800811e:	bf00      	nop
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20000e5c 	.word	0x20000e5c

0800812c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d109      	bne.n	8008152 <vTaskPlaceOnEventListRestricted+0x26>
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	617b      	str	r3, [r7, #20]
 8008150:	e7fe      	b.n	8008150 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008152:	4b0a      	ldr	r3, [pc, #40]	; (800817c <vTaskPlaceOnEventListRestricted+0x50>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3318      	adds	r3, #24
 8008158:	4619      	mov	r1, r3
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f7fe fe2f 	bl	8006dbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d002      	beq.n	800816c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008166:	f04f 33ff 	mov.w	r3, #4294967295
 800816a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800816c:	6879      	ldr	r1, [r7, #4]
 800816e:	68b8      	ldr	r0, [r7, #8]
 8008170:	f000 fa1c 	bl	80085ac <prvAddCurrentTaskToDelayedList>
	}
 8008174:	bf00      	nop
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	20000e5c 	.word	0x20000e5c

08008180 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d109      	bne.n	80081aa <xTaskRemoveFromEventList+0x2a>
 8008196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	e7fe      	b.n	80081a8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	3318      	adds	r3, #24
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe fe62 	bl	8006e78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081b4:	4b1e      	ldr	r3, [pc, #120]	; (8008230 <xTaskRemoveFromEventList+0xb0>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d11d      	bne.n	80081f8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	3304      	adds	r3, #4
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe fe59 	bl	8006e78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ca:	4b1a      	ldr	r3, [pc, #104]	; (8008234 <xTaskRemoveFromEventList+0xb4>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d903      	bls.n	80081da <xTaskRemoveFromEventList+0x5a>
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d6:	4a17      	ldr	r2, [pc, #92]	; (8008234 <xTaskRemoveFromEventList+0xb4>)
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4a14      	ldr	r2, [pc, #80]	; (8008238 <xTaskRemoveFromEventList+0xb8>)
 80081e8:	441a      	add	r2, r3
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	3304      	adds	r3, #4
 80081ee:	4619      	mov	r1, r3
 80081f0:	4610      	mov	r0, r2
 80081f2:	f7fe fde4 	bl	8006dbe <vListInsertEnd>
 80081f6:	e005      	b.n	8008204 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	3318      	adds	r3, #24
 80081fc:	4619      	mov	r1, r3
 80081fe:	480f      	ldr	r0, [pc, #60]	; (800823c <xTaskRemoveFromEventList+0xbc>)
 8008200:	f7fe fddd 	bl	8006dbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008208:	4b0d      	ldr	r3, [pc, #52]	; (8008240 <xTaskRemoveFromEventList+0xc0>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820e:	429a      	cmp	r2, r3
 8008210:	d905      	bls.n	800821e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008212:	2301      	movs	r3, #1
 8008214:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008216:	4b0b      	ldr	r3, [pc, #44]	; (8008244 <xTaskRemoveFromEventList+0xc4>)
 8008218:	2201      	movs	r2, #1
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	e001      	b.n	8008222 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800821e:	2300      	movs	r3, #0
 8008220:	617b      	str	r3, [r7, #20]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
 8008222:	f000 f913 	bl	800844c <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
 8008226:	697b      	ldr	r3, [r7, #20]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	20001340 	.word	0x20001340
 8008234:	20001320 	.word	0x20001320
 8008238:	20000e60 	.word	0x20000e60
 800823c:	200012f0 	.word	0x200012f0
 8008240:	20000e5c 	.word	0x20000e5c
 8008244:	2000132c 	.word	0x2000132c

08008248 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008250:	4b06      	ldr	r3, [pc, #24]	; (800826c <vTaskInternalSetTimeOutState+0x24>)
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008258:	4b05      	ldr	r3, [pc, #20]	; (8008270 <vTaskInternalSetTimeOutState+0x28>)
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	605a      	str	r2, [r3, #4]
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	20001330 	.word	0x20001330
 8008270:	2000131c 	.word	0x2000131c

08008274 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b088      	sub	sp, #32
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d109      	bne.n	8008298 <xTaskCheckForTimeOut+0x24>
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	613b      	str	r3, [r7, #16]
 8008296:	e7fe      	b.n	8008296 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d109      	bne.n	80082b2 <xTaskCheckForTimeOut+0x3e>
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	60fb      	str	r3, [r7, #12]
 80082b0:	e7fe      	b.n	80082b0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80082b2:	f000 fe03 	bl	8008ebc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082b6:	4b1d      	ldr	r3, [pc, #116]	; (800832c <xTaskCheckForTimeOut+0xb8>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ce:	d102      	bne.n	80082d6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80082d0:	2300      	movs	r3, #0
 80082d2:	61fb      	str	r3, [r7, #28]
 80082d4:	e023      	b.n	800831e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	4b15      	ldr	r3, [pc, #84]	; (8008330 <xTaskCheckForTimeOut+0xbc>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d007      	beq.n	80082f2 <xTaskCheckForTimeOut+0x7e>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d302      	bcc.n	80082f2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80082ec:	2301      	movs	r3, #1
 80082ee:	61fb      	str	r3, [r7, #28]
 80082f0:	e015      	b.n	800831e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d20b      	bcs.n	8008314 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	1ad2      	subs	r2, r2, r3
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7ff ff9d 	bl	8008248 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800830e:	2300      	movs	r3, #0
 8008310:	61fb      	str	r3, [r7, #28]
 8008312:	e004      	b.n	800831e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	2200      	movs	r2, #0
 8008318:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800831a:	2301      	movs	r3, #1
 800831c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800831e:	f000 fdfb 	bl	8008f18 <vPortExitCritical>

	return xReturn;
 8008322:	69fb      	ldr	r3, [r7, #28]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3720      	adds	r7, #32
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	2000131c 	.word	0x2000131c
 8008330:	20001330 	.word	0x20001330

08008334 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008334:	b480      	push	{r7}
 8008336:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008338:	4b03      	ldr	r3, [pc, #12]	; (8008348 <vTaskMissedYield+0x14>)
 800833a:	2201      	movs	r2, #1
 800833c:	601a      	str	r2, [r3, #0]
}
 800833e:	bf00      	nop
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	2000132c 	.word	0x2000132c

0800834c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008354:	f000 f872 	bl	800843c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008358:	4b17      	ldr	r3, [pc, #92]	; (80083b8 <prvIdleTask+0x6c>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d907      	bls.n	8008370 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008360:	4b16      	ldr	r3, [pc, #88]	; (80083bc <prvIdleTask+0x70>)
 8008362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008366:	601a      	str	r2, [r3, #0]
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8008370:	f7ff fcba 	bl	8007ce8 <prvGetExpectedIdleTime>
 8008374:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d9eb      	bls.n	8008354 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800837c:	f7ff fca6 	bl	8007ccc <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8008380:	4b0f      	ldr	r3, [pc, #60]	; (80083c0 <prvIdleTask+0x74>)
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	4b0f      	ldr	r3, [pc, #60]	; (80083c4 <prvIdleTask+0x78>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	429a      	cmp	r2, r3
 800838a:	d209      	bcs.n	80083a0 <prvIdleTask+0x54>
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	60bb      	str	r3, [r7, #8]
 800839e:	e7fe      	b.n	800839e <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 80083a0:	f7ff fca2 	bl	8007ce8 <prvGetExpectedIdleTime>
 80083a4:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d902      	bls.n	80083b2 <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f7f7 ff17 	bl	80001e0 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 80083b2:	f7ff fcd1 	bl	8007d58 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 80083b6:	e7cd      	b.n	8008354 <prvIdleTask+0x8>
 80083b8:	20000e60 	.word	0x20000e60
 80083bc:	e000ed04 	.word	0xe000ed04
 80083c0:	20001338 	.word	0x20001338
 80083c4:	2000131c 	.word	0x2000131c

080083c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083ce:	2300      	movs	r3, #0
 80083d0:	607b      	str	r3, [r7, #4]
 80083d2:	e00c      	b.n	80083ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	4613      	mov	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4a10      	ldr	r2, [pc, #64]	; (8008420 <prvInitialiseTaskLists+0x58>)
 80083e0:	4413      	add	r3, r2
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fe fcbe 	bl	8006d64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3301      	adds	r3, #1
 80083ec:	607b      	str	r3, [r7, #4]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b37      	cmp	r3, #55	; 0x37
 80083f2:	d9ef      	bls.n	80083d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083f4:	480b      	ldr	r0, [pc, #44]	; (8008424 <prvInitialiseTaskLists+0x5c>)
 80083f6:	f7fe fcb5 	bl	8006d64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083fa:	480b      	ldr	r0, [pc, #44]	; (8008428 <prvInitialiseTaskLists+0x60>)
 80083fc:	f7fe fcb2 	bl	8006d64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008400:	480a      	ldr	r0, [pc, #40]	; (800842c <prvInitialiseTaskLists+0x64>)
 8008402:	f7fe fcaf 	bl	8006d64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008406:	480a      	ldr	r0, [pc, #40]	; (8008430 <prvInitialiseTaskLists+0x68>)
 8008408:	f7fe fcac 	bl	8006d64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800840c:	4b09      	ldr	r3, [pc, #36]	; (8008434 <prvInitialiseTaskLists+0x6c>)
 800840e:	4a05      	ldr	r2, [pc, #20]	; (8008424 <prvInitialiseTaskLists+0x5c>)
 8008410:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008412:	4b09      	ldr	r3, [pc, #36]	; (8008438 <prvInitialiseTaskLists+0x70>)
 8008414:	4a04      	ldr	r2, [pc, #16]	; (8008428 <prvInitialiseTaskLists+0x60>)
 8008416:	601a      	str	r2, [r3, #0]
}
 8008418:	bf00      	nop
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	20000e60 	.word	0x20000e60
 8008424:	200012c0 	.word	0x200012c0
 8008428:	200012d4 	.word	0x200012d4
 800842c:	200012f0 	.word	0x200012f0
 8008430:	20001304 	.word	0x20001304
 8008434:	200012e8 	.word	0x200012e8
 8008438:	200012ec 	.word	0x200012ec

0800843c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800843c:	b480      	push	{r7}
 800843e:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008440:	bf00      	nop
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
	...

0800844c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008452:	4b0f      	ldr	r3, [pc, #60]	; (8008490 <prvResetNextTaskUnblockTime+0x44>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <prvResetNextTaskUnblockTime+0x14>
 800845c:	2301      	movs	r3, #1
 800845e:	e000      	b.n	8008462 <prvResetNextTaskUnblockTime+0x16>
 8008460:	2300      	movs	r3, #0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d004      	beq.n	8008470 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008466:	4b0b      	ldr	r3, [pc, #44]	; (8008494 <prvResetNextTaskUnblockTime+0x48>)
 8008468:	f04f 32ff 	mov.w	r2, #4294967295
 800846c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800846e:	e008      	b.n	8008482 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008470:	4b07      	ldr	r3, [pc, #28]	; (8008490 <prvResetNextTaskUnblockTime+0x44>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	4a05      	ldr	r2, [pc, #20]	; (8008494 <prvResetNextTaskUnblockTime+0x48>)
 8008480:	6013      	str	r3, [r2, #0]
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	200012e8 	.word	0x200012e8
 8008494:	20001338 	.word	0x20001338

08008498 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800849e:	4b0b      	ldr	r3, [pc, #44]	; (80084cc <xTaskGetSchedulerState+0x34>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d102      	bne.n	80084ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80084a6:	2301      	movs	r3, #1
 80084a8:	607b      	str	r3, [r7, #4]
 80084aa:	e008      	b.n	80084be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084ac:	4b08      	ldr	r3, [pc, #32]	; (80084d0 <xTaskGetSchedulerState+0x38>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d102      	bne.n	80084ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084b4:	2302      	movs	r3, #2
 80084b6:	607b      	str	r3, [r7, #4]
 80084b8:	e001      	b.n	80084be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084ba:	2300      	movs	r3, #0
 80084bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084be:	687b      	ldr	r3, [r7, #4]
	}
 80084c0:	4618      	mov	r0, r3
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	20001324 	.word	0x20001324
 80084d0:	20001340 	.word	0x20001340

080084d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80084e0:	2300      	movs	r3, #0
 80084e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d054      	beq.n	8008594 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084ea:	4b2d      	ldr	r3, [pc, #180]	; (80085a0 <xTaskPriorityDisinherit+0xcc>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d009      	beq.n	8008508 <xTaskPriorityDisinherit+0x34>
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	60fb      	str	r3, [r7, #12]
 8008506:	e7fe      	b.n	8008506 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800850c:	2b00      	cmp	r3, #0
 800850e:	d109      	bne.n	8008524 <xTaskPriorityDisinherit+0x50>
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	60bb      	str	r3, [r7, #8]
 8008522:	e7fe      	b.n	8008522 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008528:	1e5a      	subs	r2, r3, #1
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008536:	429a      	cmp	r2, r3
 8008538:	d02c      	beq.n	8008594 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800853e:	2b00      	cmp	r3, #0
 8008540:	d128      	bne.n	8008594 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	3304      	adds	r3, #4
 8008546:	4618      	mov	r0, r3
 8008548:	f7fe fc96 	bl	8006e78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008558:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008564:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <xTaskPriorityDisinherit+0xd0>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	429a      	cmp	r2, r3
 800856a:	d903      	bls.n	8008574 <xTaskPriorityDisinherit+0xa0>
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	4a0c      	ldr	r2, [pc, #48]	; (80085a4 <xTaskPriorityDisinherit+0xd0>)
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008578:	4613      	mov	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4a09      	ldr	r2, [pc, #36]	; (80085a8 <xTaskPriorityDisinherit+0xd4>)
 8008582:	441a      	add	r2, r3
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	3304      	adds	r3, #4
 8008588:	4619      	mov	r1, r3
 800858a:	4610      	mov	r0, r2
 800858c:	f7fe fc17 	bl	8006dbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008590:	2301      	movs	r3, #1
 8008592:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008594:	697b      	ldr	r3, [r7, #20]
	}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	20000e5c 	.word	0x20000e5c
 80085a4:	20001320 	.word	0x20001320
 80085a8:	20000e60 	.word	0x20000e60

080085ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085b6:	4b21      	ldr	r3, [pc, #132]	; (800863c <prvAddCurrentTaskToDelayedList+0x90>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085bc:	4b20      	ldr	r3, [pc, #128]	; (8008640 <prvAddCurrentTaskToDelayedList+0x94>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3304      	adds	r3, #4
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fe fc58 	bl	8006e78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ce:	d10a      	bne.n	80085e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d007      	beq.n	80085e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085d6:	4b1a      	ldr	r3, [pc, #104]	; (8008640 <prvAddCurrentTaskToDelayedList+0x94>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3304      	adds	r3, #4
 80085dc:	4619      	mov	r1, r3
 80085de:	4819      	ldr	r0, [pc, #100]	; (8008644 <prvAddCurrentTaskToDelayedList+0x98>)
 80085e0:	f7fe fbed 	bl	8006dbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085e4:	e026      	b.n	8008634 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4413      	add	r3, r2
 80085ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085ee:	4b14      	ldr	r3, [pc, #80]	; (8008640 <prvAddCurrentTaskToDelayedList+0x94>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d209      	bcs.n	8008612 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085fe:	4b12      	ldr	r3, [pc, #72]	; (8008648 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	4b0f      	ldr	r3, [pc, #60]	; (8008640 <prvAddCurrentTaskToDelayedList+0x94>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	3304      	adds	r3, #4
 8008608:	4619      	mov	r1, r3
 800860a:	4610      	mov	r0, r2
 800860c:	f7fe fbfb 	bl	8006e06 <vListInsert>
}
 8008610:	e010      	b.n	8008634 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008612:	4b0e      	ldr	r3, [pc, #56]	; (800864c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	4b0a      	ldr	r3, [pc, #40]	; (8008640 <prvAddCurrentTaskToDelayedList+0x94>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3304      	adds	r3, #4
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f7fe fbf1 	bl	8006e06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008624:	4b0a      	ldr	r3, [pc, #40]	; (8008650 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	429a      	cmp	r2, r3
 800862c:	d202      	bcs.n	8008634 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800862e:	4a08      	ldr	r2, [pc, #32]	; (8008650 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	6013      	str	r3, [r2, #0]
}
 8008634:	bf00      	nop
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	2000131c 	.word	0x2000131c
 8008640:	20000e5c 	.word	0x20000e5c
 8008644:	20001304 	.word	0x20001304
 8008648:	200012ec 	.word	0x200012ec
 800864c:	200012e8 	.word	0x200012e8
 8008650:	20001338 	.word	0x20001338

08008654 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b08a      	sub	sp, #40	; 0x28
 8008658:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800865a:	2300      	movs	r3, #0
 800865c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800865e:	f000 fac3 	bl	8008be8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008662:	4b1c      	ldr	r3, [pc, #112]	; (80086d4 <xTimerCreateTimerTask+0x80>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d021      	beq.n	80086ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800866a:	2300      	movs	r3, #0
 800866c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008672:	1d3a      	adds	r2, r7, #4
 8008674:	f107 0108 	add.w	r1, r7, #8
 8008678:	f107 030c 	add.w	r3, r7, #12
 800867c:	4618      	mov	r0, r3
 800867e:	f7fe fb57 	bl	8006d30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008682:	6879      	ldr	r1, [r7, #4]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	9202      	str	r2, [sp, #8]
 800868a:	9301      	str	r3, [sp, #4]
 800868c:	2302      	movs	r3, #2
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	2300      	movs	r3, #0
 8008692:	460a      	mov	r2, r1
 8008694:	4910      	ldr	r1, [pc, #64]	; (80086d8 <xTimerCreateTimerTask+0x84>)
 8008696:	4811      	ldr	r0, [pc, #68]	; (80086dc <xTimerCreateTimerTask+0x88>)
 8008698:	f7ff f8ec 	bl	8007874 <xTaskCreateStatic>
 800869c:	4602      	mov	r2, r0
 800869e:	4b10      	ldr	r3, [pc, #64]	; (80086e0 <xTimerCreateTimerTask+0x8c>)
 80086a0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80086a2:	4b0f      	ldr	r3, [pc, #60]	; (80086e0 <xTimerCreateTimerTask+0x8c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80086aa:	2301      	movs	r3, #1
 80086ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d109      	bne.n	80086c8 <xTimerCreateTimerTask+0x74>
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	613b      	str	r3, [r7, #16]
 80086c6:	e7fe      	b.n	80086c6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80086c8:	697b      	ldr	r3, [r7, #20]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20001374 	.word	0x20001374
 80086d8:	08009e74 	.word	0x08009e74
 80086dc:	080087fd 	.word	0x080087fd
 80086e0:	20001378 	.word	0x20001378

080086e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b08a      	sub	sp, #40	; 0x28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80086f2:	2300      	movs	r3, #0
 80086f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d109      	bne.n	8008710 <xTimerGenericCommand+0x2c>
 80086fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	623b      	str	r3, [r7, #32]
 800870e:	e7fe      	b.n	800870e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008710:	4b19      	ldr	r3, [pc, #100]	; (8008778 <xTimerGenericCommand+0x94>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d02a      	beq.n	800876e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2b05      	cmp	r3, #5
 8008728:	dc18      	bgt.n	800875c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800872a:	f7ff feb5 	bl	8008498 <xTaskGetSchedulerState>
 800872e:	4603      	mov	r3, r0
 8008730:	2b02      	cmp	r3, #2
 8008732:	d109      	bne.n	8008748 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008734:	4b10      	ldr	r3, [pc, #64]	; (8008778 <xTimerGenericCommand+0x94>)
 8008736:	6818      	ldr	r0, [r3, #0]
 8008738:	f107 0110 	add.w	r1, r7, #16
 800873c:	2300      	movs	r3, #0
 800873e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008740:	f7fe fcc2 	bl	80070c8 <xQueueGenericSend>
 8008744:	6278      	str	r0, [r7, #36]	; 0x24
 8008746:	e012      	b.n	800876e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008748:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <xTimerGenericCommand+0x94>)
 800874a:	6818      	ldr	r0, [r3, #0]
 800874c:	f107 0110 	add.w	r1, r7, #16
 8008750:	2300      	movs	r3, #0
 8008752:	2200      	movs	r2, #0
 8008754:	f7fe fcb8 	bl	80070c8 <xQueueGenericSend>
 8008758:	6278      	str	r0, [r7, #36]	; 0x24
 800875a:	e008      	b.n	800876e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800875c:	4b06      	ldr	r3, [pc, #24]	; (8008778 <xTimerGenericCommand+0x94>)
 800875e:	6818      	ldr	r0, [r3, #0]
 8008760:	f107 0110 	add.w	r1, r7, #16
 8008764:	2300      	movs	r3, #0
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	f7fe fda8 	bl	80072bc <xQueueGenericSendFromISR>
 800876c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008770:	4618      	mov	r0, r3
 8008772:	3728      	adds	r7, #40	; 0x28
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	20001374 	.word	0x20001374

0800877c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b088      	sub	sp, #32
 8008780:	af02      	add	r7, sp, #8
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008786:	4b1c      	ldr	r3, [pc, #112]	; (80087f8 <prvProcessExpiredTimer+0x7c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	3304      	adds	r3, #4
 8008794:	4618      	mov	r0, r3
 8008796:	f7fe fb6f 	bl	8006e78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d121      	bne.n	80087e6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	699a      	ldr	r2, [r3, #24]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	18d1      	adds	r1, r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	6978      	ldr	r0, [r7, #20]
 80087b0:	f000 f8c8 	bl	8008944 <prvInsertTimerInActiveList>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d015      	beq.n	80087e6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087ba:	2300      	movs	r3, #0
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	2300      	movs	r3, #0
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	2100      	movs	r1, #0
 80087c4:	6978      	ldr	r0, [r7, #20]
 80087c6:	f7ff ff8d 	bl	80086e4 <xTimerGenericCommand>
 80087ca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d109      	bne.n	80087e6 <prvProcessExpiredTimer+0x6a>
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	e7fe      	b.n	80087e4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ea:	6978      	ldr	r0, [r7, #20]
 80087ec:	4798      	blx	r3
}
 80087ee:	bf00      	nop
 80087f0:	3718      	adds	r7, #24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	2000136c 	.word	0x2000136c

080087fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008804:	f107 0308 	add.w	r3, r7, #8
 8008808:	4618      	mov	r0, r3
 800880a:	f000 f857 	bl	80088bc <prvGetNextExpireTime>
 800880e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4619      	mov	r1, r3
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f000 f803 	bl	8008820 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800881a:	f000 f8d5 	bl	80089c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800881e:	e7f1      	b.n	8008804 <prvTimerTask+0x8>

08008820 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800882a:	f7ff fa4f 	bl	8007ccc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800882e:	f107 0308 	add.w	r3, r7, #8
 8008832:	4618      	mov	r0, r3
 8008834:	f000 f866 	bl	8008904 <prvSampleTimeNow>
 8008838:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d130      	bne.n	80088a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10a      	bne.n	800885c <prvProcessTimerOrBlockTask+0x3c>
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	429a      	cmp	r2, r3
 800884c:	d806      	bhi.n	800885c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800884e:	f7ff fa83 	bl	8007d58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008852:	68f9      	ldr	r1, [r7, #12]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7ff ff91 	bl	800877c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800885a:	e024      	b.n	80088a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d008      	beq.n	8008874 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008862:	4b13      	ldr	r3, [pc, #76]	; (80088b0 <prvProcessTimerOrBlockTask+0x90>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	bf0c      	ite	eq
 800886c:	2301      	moveq	r3, #1
 800886e:	2300      	movne	r3, #0
 8008870:	b2db      	uxtb	r3, r3
 8008872:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008874:	4b0f      	ldr	r3, [pc, #60]	; (80088b4 <prvProcessTimerOrBlockTask+0x94>)
 8008876:	6818      	ldr	r0, [r3, #0]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	4619      	mov	r1, r3
 8008882:	f7fe ffc3 	bl	800780c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008886:	f7ff fa67 	bl	8007d58 <xTaskResumeAll>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10a      	bne.n	80088a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008890:	4b09      	ldr	r3, [pc, #36]	; (80088b8 <prvProcessTimerOrBlockTask+0x98>)
 8008892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008896:	601a      	str	r2, [r3, #0]
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	f3bf 8f6f 	isb	sy
}
 80088a0:	e001      	b.n	80088a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80088a2:	f7ff fa59 	bl	8007d58 <xTaskResumeAll>
}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	20001370 	.word	0x20001370
 80088b4:	20001374 	.word	0x20001374
 80088b8:	e000ed04 	.word	0xe000ed04

080088bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088c4:	4b0e      	ldr	r3, [pc, #56]	; (8008900 <prvGetNextExpireTime+0x44>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bf0c      	ite	eq
 80088ce:	2301      	moveq	r3, #1
 80088d0:	2300      	movne	r3, #0
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	461a      	mov	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d105      	bne.n	80088ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088e2:	4b07      	ldr	r3, [pc, #28]	; (8008900 <prvGetNextExpireTime+0x44>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	60fb      	str	r3, [r7, #12]
 80088ec:	e001      	b.n	80088f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80088f2:	68fb      	ldr	r3, [r7, #12]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	2000136c 	.word	0x2000136c

08008904 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800890c:	f7ff fac0 	bl	8007e90 <xTaskGetTickCount>
 8008910:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008912:	4b0b      	ldr	r3, [pc, #44]	; (8008940 <prvSampleTimeNow+0x3c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	429a      	cmp	r2, r3
 800891a:	d205      	bcs.n	8008928 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800891c:	f000 f904 	bl	8008b28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	e002      	b.n	800892e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800892e:	4a04      	ldr	r2, [pc, #16]	; (8008940 <prvSampleTimeNow+0x3c>)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008934:	68fb      	ldr	r3, [r7, #12]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	2000137c 	.word	0x2000137c

08008944 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
 8008950:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008952:	2300      	movs	r3, #0
 8008954:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	429a      	cmp	r2, r3
 8008968:	d812      	bhi.n	8008990 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	1ad2      	subs	r2, r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	429a      	cmp	r2, r3
 8008976:	d302      	bcc.n	800897e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008978:	2301      	movs	r3, #1
 800897a:	617b      	str	r3, [r7, #20]
 800897c:	e01b      	b.n	80089b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800897e:	4b10      	ldr	r3, [pc, #64]	; (80089c0 <prvInsertTimerInActiveList+0x7c>)
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	3304      	adds	r3, #4
 8008986:	4619      	mov	r1, r3
 8008988:	4610      	mov	r0, r2
 800898a:	f7fe fa3c 	bl	8006e06 <vListInsert>
 800898e:	e012      	b.n	80089b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	429a      	cmp	r2, r3
 8008996:	d206      	bcs.n	80089a6 <prvInsertTimerInActiveList+0x62>
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	d302      	bcc.n	80089a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80089a0:	2301      	movs	r3, #1
 80089a2:	617b      	str	r3, [r7, #20]
 80089a4:	e007      	b.n	80089b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089a6:	4b07      	ldr	r3, [pc, #28]	; (80089c4 <prvInsertTimerInActiveList+0x80>)
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3304      	adds	r3, #4
 80089ae:	4619      	mov	r1, r3
 80089b0:	4610      	mov	r0, r2
 80089b2:	f7fe fa28 	bl	8006e06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80089b6:	697b      	ldr	r3, [r7, #20]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	20001370 	.word	0x20001370
 80089c4:	2000136c 	.word	0x2000136c

080089c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08e      	sub	sp, #56	; 0x38
 80089cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089ce:	e099      	b.n	8008b04 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	da17      	bge.n	8008a06 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80089d6:	1d3b      	adds	r3, r7, #4
 80089d8:	3304      	adds	r3, #4
 80089da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80089dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d109      	bne.n	80089f6 <prvProcessReceivedCommands+0x2e>
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	61fb      	str	r3, [r7, #28]
 80089f4:	e7fe      	b.n	80089f4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80089f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089fc:	6850      	ldr	r0, [r2, #4]
 80089fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a00:	6892      	ldr	r2, [r2, #8]
 8008a02:	4611      	mov	r1, r2
 8008a04:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	db7a      	blt.n	8008b02 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d004      	beq.n	8008a22 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fe fa2b 	bl	8006e78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a22:	463b      	mov	r3, r7
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7ff ff6d 	bl	8008904 <prvSampleTimeNow>
 8008a2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b09      	cmp	r3, #9
 8008a30:	d868      	bhi.n	8008b04 <prvProcessReceivedCommands+0x13c>
 8008a32:	a201      	add	r2, pc, #4	; (adr r2, 8008a38 <prvProcessReceivedCommands+0x70>)
 8008a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a38:	08008a61 	.word	0x08008a61
 8008a3c:	08008a61 	.word	0x08008a61
 8008a40:	08008a61 	.word	0x08008a61
 8008a44:	08008b05 	.word	0x08008b05
 8008a48:	08008abb 	.word	0x08008abb
 8008a4c:	08008af1 	.word	0x08008af1
 8008a50:	08008a61 	.word	0x08008a61
 8008a54:	08008a61 	.word	0x08008a61
 8008a58:	08008b05 	.word	0x08008b05
 8008a5c:	08008abb 	.word	0x08008abb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	18d1      	adds	r1, r2, r3
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a6e:	f7ff ff69 	bl	8008944 <prvInsertTimerInActiveList>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d045      	beq.n	8008b04 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a7e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d13d      	bne.n	8008b04 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	441a      	add	r2, r3
 8008a90:	2300      	movs	r3, #0
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	2300      	movs	r3, #0
 8008a96:	2100      	movs	r1, #0
 8008a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a9a:	f7ff fe23 	bl	80086e4 <xTimerGenericCommand>
 8008a9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d12e      	bne.n	8008b04 <prvProcessReceivedCommands+0x13c>
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	61bb      	str	r3, [r7, #24]
 8008ab8:	e7fe      	b.n	8008ab8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d109      	bne.n	8008adc <prvProcessReceivedCommands+0x114>
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	617b      	str	r3, [r7, #20]
 8008ada:	e7fe      	b.n	8008ada <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ade:	699a      	ldr	r2, [r3, #24]
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	18d1      	adds	r1, r2, r3
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aea:	f7ff ff2b 	bl	8008944 <prvInsertTimerInActiveList>
					break;
 8008aee:	e009      	b.n	8008b04 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d104      	bne.n	8008b04 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008afc:	f000 fbba 	bl	8009274 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b00:	e000      	b.n	8008b04 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008b02:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b04:	4b07      	ldr	r3, [pc, #28]	; (8008b24 <prvProcessReceivedCommands+0x15c>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	1d39      	adds	r1, r7, #4
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fe fc69 	bl	80073e4 <xQueueReceive>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f47f af5b 	bne.w	80089d0 <prvProcessReceivedCommands+0x8>
	}
}
 8008b1a:	bf00      	nop
 8008b1c:	3730      	adds	r7, #48	; 0x30
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20001374 	.word	0x20001374

08008b28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b088      	sub	sp, #32
 8008b2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b2e:	e044      	b.n	8008bba <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b30:	4b2b      	ldr	r3, [pc, #172]	; (8008be0 <prvSwitchTimerLists+0xb8>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b3a:	4b29      	ldr	r3, [pc, #164]	; (8008be0 <prvSwitchTimerLists+0xb8>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	3304      	adds	r3, #4
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fe f995 	bl	8006e78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d12d      	bne.n	8008bba <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	4413      	add	r3, r2
 8008b66:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d90e      	bls.n	8008b8e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b7c:	4b18      	ldr	r3, [pc, #96]	; (8008be0 <prvSwitchTimerLists+0xb8>)
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	3304      	adds	r3, #4
 8008b84:	4619      	mov	r1, r3
 8008b86:	4610      	mov	r0, r2
 8008b88:	f7fe f93d 	bl	8006e06 <vListInsert>
 8008b8c:	e015      	b.n	8008bba <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b8e:	2300      	movs	r3, #0
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	2300      	movs	r3, #0
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	2100      	movs	r1, #0
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f7ff fda3 	bl	80086e4 <xTimerGenericCommand>
 8008b9e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d109      	bne.n	8008bba <prvSwitchTimerLists+0x92>
 8008ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	603b      	str	r3, [r7, #0]
 8008bb8:	e7fe      	b.n	8008bb8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bba:	4b09      	ldr	r3, [pc, #36]	; (8008be0 <prvSwitchTimerLists+0xb8>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1b5      	bne.n	8008b30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008bc4:	4b06      	ldr	r3, [pc, #24]	; (8008be0 <prvSwitchTimerLists+0xb8>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008bca:	4b06      	ldr	r3, [pc, #24]	; (8008be4 <prvSwitchTimerLists+0xbc>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a04      	ldr	r2, [pc, #16]	; (8008be0 <prvSwitchTimerLists+0xb8>)
 8008bd0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008bd2:	4a04      	ldr	r2, [pc, #16]	; (8008be4 <prvSwitchTimerLists+0xbc>)
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	6013      	str	r3, [r2, #0]
}
 8008bd8:	bf00      	nop
 8008bda:	3718      	adds	r7, #24
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	2000136c 	.word	0x2000136c
 8008be4:	20001370 	.word	0x20001370

08008be8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008bee:	f000 f965 	bl	8008ebc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008bf2:	4b15      	ldr	r3, [pc, #84]	; (8008c48 <prvCheckForValidListAndQueue+0x60>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d120      	bne.n	8008c3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008bfa:	4814      	ldr	r0, [pc, #80]	; (8008c4c <prvCheckForValidListAndQueue+0x64>)
 8008bfc:	f7fe f8b2 	bl	8006d64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c00:	4813      	ldr	r0, [pc, #76]	; (8008c50 <prvCheckForValidListAndQueue+0x68>)
 8008c02:	f7fe f8af 	bl	8006d64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c06:	4b13      	ldr	r3, [pc, #76]	; (8008c54 <prvCheckForValidListAndQueue+0x6c>)
 8008c08:	4a10      	ldr	r2, [pc, #64]	; (8008c4c <prvCheckForValidListAndQueue+0x64>)
 8008c0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c0c:	4b12      	ldr	r3, [pc, #72]	; (8008c58 <prvCheckForValidListAndQueue+0x70>)
 8008c0e:	4a10      	ldr	r2, [pc, #64]	; (8008c50 <prvCheckForValidListAndQueue+0x68>)
 8008c10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c12:	2300      	movs	r3, #0
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	4b11      	ldr	r3, [pc, #68]	; (8008c5c <prvCheckForValidListAndQueue+0x74>)
 8008c18:	4a11      	ldr	r2, [pc, #68]	; (8008c60 <prvCheckForValidListAndQueue+0x78>)
 8008c1a:	2110      	movs	r1, #16
 8008c1c:	200a      	movs	r0, #10
 8008c1e:	f7fe f9bd 	bl	8006f9c <xQueueGenericCreateStatic>
 8008c22:	4602      	mov	r2, r0
 8008c24:	4b08      	ldr	r3, [pc, #32]	; (8008c48 <prvCheckForValidListAndQueue+0x60>)
 8008c26:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c28:	4b07      	ldr	r3, [pc, #28]	; (8008c48 <prvCheckForValidListAndQueue+0x60>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d005      	beq.n	8008c3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c30:	4b05      	ldr	r3, [pc, #20]	; (8008c48 <prvCheckForValidListAndQueue+0x60>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	490b      	ldr	r1, [pc, #44]	; (8008c64 <prvCheckForValidListAndQueue+0x7c>)
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fe fdc0 	bl	80077bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c3c:	f000 f96c 	bl	8008f18 <vPortExitCritical>
}
 8008c40:	bf00      	nop
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	20001374 	.word	0x20001374
 8008c4c:	20001344 	.word	0x20001344
 8008c50:	20001358 	.word	0x20001358
 8008c54:	2000136c 	.word	0x2000136c
 8008c58:	20001370 	.word	0x20001370
 8008c5c:	20001420 	.word	0x20001420
 8008c60:	20001380 	.word	0x20001380
 8008c64:	08009e7c 	.word	0x08009e7c

08008c68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3b04      	subs	r3, #4
 8008c78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	3b04      	subs	r3, #4
 8008c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	f023 0201 	bic.w	r2, r3, #1
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	3b04      	subs	r3, #4
 8008c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c98:	4a0c      	ldr	r2, [pc, #48]	; (8008ccc <pxPortInitialiseStack+0x64>)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	3b14      	subs	r3, #20
 8008ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3b04      	subs	r3, #4
 8008cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f06f 0202 	mvn.w	r2, #2
 8008cb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	3b20      	subs	r3, #32
 8008cbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	08008cd1 	.word	0x08008cd1

08008cd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008cda:	4b11      	ldr	r3, [pc, #68]	; (8008d20 <prvTaskExitError+0x50>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce2:	d009      	beq.n	8008cf8 <prvTaskExitError+0x28>
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	60fb      	str	r3, [r7, #12]
 8008cf6:	e7fe      	b.n	8008cf6 <prvTaskExitError+0x26>
 8008cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfc:	f383 8811 	msr	BASEPRI, r3
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	f3bf 8f4f 	dsb	sy
 8008d08:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d0a:	bf00      	nop
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d0fc      	beq.n	8008d0c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d12:	bf00      	nop
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	2000011c 	.word	0x2000011c
	...

08008d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d30:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <pxCurrentTCBConst2>)
 8008d32:	6819      	ldr	r1, [r3, #0]
 8008d34:	6808      	ldr	r0, [r1, #0]
 8008d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3a:	f380 8809 	msr	PSP, r0
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f04f 0000 	mov.w	r0, #0
 8008d46:	f380 8811 	msr	BASEPRI, r0
 8008d4a:	4770      	bx	lr
 8008d4c:	f3af 8000 	nop.w

08008d50 <pxCurrentTCBConst2>:
 8008d50:	20000e5c 	.word	0x20000e5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop

08008d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d58:	4808      	ldr	r0, [pc, #32]	; (8008d7c <prvPortStartFirstTask+0x24>)
 8008d5a:	6800      	ldr	r0, [r0, #0]
 8008d5c:	6800      	ldr	r0, [r0, #0]
 8008d5e:	f380 8808 	msr	MSP, r0
 8008d62:	f04f 0000 	mov.w	r0, #0
 8008d66:	f380 8814 	msr	CONTROL, r0
 8008d6a:	b662      	cpsie	i
 8008d6c:	b661      	cpsie	f
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	df00      	svc	0
 8008d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d7a:	bf00      	nop
 8008d7c:	e000ed08 	.word	0xe000ed08

08008d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d86:	4b44      	ldr	r3, [pc, #272]	; (8008e98 <xPortStartScheduler+0x118>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a44      	ldr	r2, [pc, #272]	; (8008e9c <xPortStartScheduler+0x11c>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d109      	bne.n	8008da4 <xPortStartScheduler+0x24>
 8008d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	613b      	str	r3, [r7, #16]
 8008da2:	e7fe      	b.n	8008da2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008da4:	4b3c      	ldr	r3, [pc, #240]	; (8008e98 <xPortStartScheduler+0x118>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a3d      	ldr	r2, [pc, #244]	; (8008ea0 <xPortStartScheduler+0x120>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d109      	bne.n	8008dc2 <xPortStartScheduler+0x42>
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	e7fe      	b.n	8008dc0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008dc2:	4b38      	ldr	r3, [pc, #224]	; (8008ea4 <xPortStartScheduler+0x124>)
 8008dc4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	22ff      	movs	r2, #255	; 0xff
 8008dd2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ddc:	78fb      	ldrb	r3, [r7, #3]
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	4b30      	ldr	r3, [pc, #192]	; (8008ea8 <xPortStartScheduler+0x128>)
 8008de8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008dea:	4b30      	ldr	r3, [pc, #192]	; (8008eac <xPortStartScheduler+0x12c>)
 8008dec:	2207      	movs	r2, #7
 8008dee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008df0:	e009      	b.n	8008e06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008df2:	4b2e      	ldr	r3, [pc, #184]	; (8008eac <xPortStartScheduler+0x12c>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3b01      	subs	r3, #1
 8008df8:	4a2c      	ldr	r2, [pc, #176]	; (8008eac <xPortStartScheduler+0x12c>)
 8008dfa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	005b      	lsls	r3, r3, #1
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e06:	78fb      	ldrb	r3, [r7, #3]
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e0e:	2b80      	cmp	r3, #128	; 0x80
 8008e10:	d0ef      	beq.n	8008df2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e12:	4b26      	ldr	r3, [pc, #152]	; (8008eac <xPortStartScheduler+0x12c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f1c3 0307 	rsb	r3, r3, #7
 8008e1a:	2b04      	cmp	r3, #4
 8008e1c:	d009      	beq.n	8008e32 <xPortStartScheduler+0xb2>
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	60bb      	str	r3, [r7, #8]
 8008e30:	e7fe      	b.n	8008e30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e32:	4b1e      	ldr	r3, [pc, #120]	; (8008eac <xPortStartScheduler+0x12c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	021b      	lsls	r3, r3, #8
 8008e38:	4a1c      	ldr	r2, [pc, #112]	; (8008eac <xPortStartScheduler+0x12c>)
 8008e3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e3c:	4b1b      	ldr	r3, [pc, #108]	; (8008eac <xPortStartScheduler+0x12c>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e44:	4a19      	ldr	r2, [pc, #100]	; (8008eac <xPortStartScheduler+0x12c>)
 8008e46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e50:	4b17      	ldr	r3, [pc, #92]	; (8008eb0 <xPortStartScheduler+0x130>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a16      	ldr	r2, [pc, #88]	; (8008eb0 <xPortStartScheduler+0x130>)
 8008e56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e5c:	4b14      	ldr	r3, [pc, #80]	; (8008eb0 <xPortStartScheduler+0x130>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a13      	ldr	r2, [pc, #76]	; (8008eb0 <xPortStartScheduler+0x130>)
 8008e62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e68:	f000 f8d6 	bl	8009018 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e6c:	4b11      	ldr	r3, [pc, #68]	; (8008eb4 <xPortStartScheduler+0x134>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e72:	f000 f8f5 	bl	8009060 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e76:	4b10      	ldr	r3, [pc, #64]	; (8008eb8 <xPortStartScheduler+0x138>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a0f      	ldr	r2, [pc, #60]	; (8008eb8 <xPortStartScheduler+0x138>)
 8008e7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e82:	f7ff ff69 	bl	8008d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e86:	f7ff f8d1 	bl	800802c <vTaskSwitchContext>
	prvTaskExitError();
 8008e8a:	f7ff ff21 	bl	8008cd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3718      	adds	r7, #24
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	e000ed00 	.word	0xe000ed00
 8008e9c:	410fc271 	.word	0x410fc271
 8008ea0:	410fc270 	.word	0x410fc270
 8008ea4:	e000e400 	.word	0xe000e400
 8008ea8:	20001470 	.word	0x20001470
 8008eac:	20001474 	.word	0x20001474
 8008eb0:	e000ed20 	.word	0xe000ed20
 8008eb4:	2000011c 	.word	0x2000011c
 8008eb8:	e000ef34 	.word	0xe000ef34

08008ebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ed4:	4b0e      	ldr	r3, [pc, #56]	; (8008f10 <vPortEnterCritical+0x54>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	4a0d      	ldr	r2, [pc, #52]	; (8008f10 <vPortEnterCritical+0x54>)
 8008edc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ede:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <vPortEnterCritical+0x54>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d10e      	bne.n	8008f04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ee6:	4b0b      	ldr	r3, [pc, #44]	; (8008f14 <vPortEnterCritical+0x58>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d009      	beq.n	8008f04 <vPortEnterCritical+0x48>
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	603b      	str	r3, [r7, #0]
 8008f02:	e7fe      	b.n	8008f02 <vPortEnterCritical+0x46>
	}
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	2000011c 	.word	0x2000011c
 8008f14:	e000ed04 	.word	0xe000ed04

08008f18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f1e:	4b11      	ldr	r3, [pc, #68]	; (8008f64 <vPortExitCritical+0x4c>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d109      	bne.n	8008f3a <vPortExitCritical+0x22>
 8008f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	607b      	str	r3, [r7, #4]
 8008f38:	e7fe      	b.n	8008f38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008f3a:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <vPortExitCritical+0x4c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	4a08      	ldr	r2, [pc, #32]	; (8008f64 <vPortExitCritical+0x4c>)
 8008f42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f44:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <vPortExitCritical+0x4c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d104      	bne.n	8008f56 <vPortExitCritical+0x3e>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f56:	bf00      	nop
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	2000011c 	.word	0x2000011c
	...

08008f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f70:	f3ef 8009 	mrs	r0, PSP
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	4b15      	ldr	r3, [pc, #84]	; (8008fd0 <pxCurrentTCBConst>)
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	f01e 0f10 	tst.w	lr, #16
 8008f80:	bf08      	it	eq
 8008f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8a:	6010      	str	r0, [r2, #0]
 8008f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f94:	f380 8811 	msr	BASEPRI, r0
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f7ff f844 	bl	800802c <vTaskSwitchContext>
 8008fa4:	f04f 0000 	mov.w	r0, #0
 8008fa8:	f380 8811 	msr	BASEPRI, r0
 8008fac:	bc09      	pop	{r0, r3}
 8008fae:	6819      	ldr	r1, [r3, #0]
 8008fb0:	6808      	ldr	r0, [r1, #0]
 8008fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb6:	f01e 0f10 	tst.w	lr, #16
 8008fba:	bf08      	it	eq
 8008fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008fc0:	f380 8809 	msr	PSP, r0
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	f3af 8000 	nop.w

08008fd0 <pxCurrentTCBConst>:
 8008fd0:	20000e5c 	.word	0x20000e5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop

08008fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ff0:	f7fe ff5e 	bl	8007eb0 <xTaskIncrementTick>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008ffa:	4b06      	ldr	r3, [pc, #24]	; (8009014 <SysTick_Handler+0x3c>)
 8008ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	2300      	movs	r3, #0
 8009004:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800900c:	bf00      	nop
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	e000ed04 	.word	0xe000ed04

08009018 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009018:	b480      	push	{r7}
 800901a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800901c:	4b0b      	ldr	r3, [pc, #44]	; (800904c <vPortSetupTimerInterrupt+0x34>)
 800901e:	2200      	movs	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009022:	4b0b      	ldr	r3, [pc, #44]	; (8009050 <vPortSetupTimerInterrupt+0x38>)
 8009024:	2200      	movs	r2, #0
 8009026:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009028:	4b0a      	ldr	r3, [pc, #40]	; (8009054 <vPortSetupTimerInterrupt+0x3c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a0a      	ldr	r2, [pc, #40]	; (8009058 <vPortSetupTimerInterrupt+0x40>)
 800902e:	fba2 2303 	umull	r2, r3, r2, r3
 8009032:	099b      	lsrs	r3, r3, #6
 8009034:	4a09      	ldr	r2, [pc, #36]	; (800905c <vPortSetupTimerInterrupt+0x44>)
 8009036:	3b01      	subs	r3, #1
 8009038:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800903a:	4b04      	ldr	r3, [pc, #16]	; (800904c <vPortSetupTimerInterrupt+0x34>)
 800903c:	2207      	movs	r2, #7
 800903e:	601a      	str	r2, [r3, #0]
}
 8009040:	bf00      	nop
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	e000e010 	.word	0xe000e010
 8009050:	e000e018 	.word	0xe000e018
 8009054:	20000000 	.word	0x20000000
 8009058:	10624dd3 	.word	0x10624dd3
 800905c:	e000e014 	.word	0xe000e014

08009060 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009060:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009070 <vPortEnableVFP+0x10>
 8009064:	6801      	ldr	r1, [r0, #0]
 8009066:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800906a:	6001      	str	r1, [r0, #0]
 800906c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800906e:	bf00      	nop
 8009070:	e000ed88 	.word	0xe000ed88

08009074 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800907a:	f3ef 8305 	mrs	r3, IPSR
 800907e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2b0f      	cmp	r3, #15
 8009084:	d913      	bls.n	80090ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009086:	4a16      	ldr	r2, [pc, #88]	; (80090e0 <vPortValidateInterruptPriority+0x6c>)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	4413      	add	r3, r2
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009090:	4b14      	ldr	r3, [pc, #80]	; (80090e4 <vPortValidateInterruptPriority+0x70>)
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	7afa      	ldrb	r2, [r7, #11]
 8009096:	429a      	cmp	r2, r3
 8009098:	d209      	bcs.n	80090ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	607b      	str	r3, [r7, #4]
 80090ac:	e7fe      	b.n	80090ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090ae:	4b0e      	ldr	r3, [pc, #56]	; (80090e8 <vPortValidateInterruptPriority+0x74>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80090b6:	4b0d      	ldr	r3, [pc, #52]	; (80090ec <vPortValidateInterruptPriority+0x78>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d909      	bls.n	80090d2 <vPortValidateInterruptPriority+0x5e>
 80090be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	603b      	str	r3, [r7, #0]
 80090d0:	e7fe      	b.n	80090d0 <vPortValidateInterruptPriority+0x5c>
	}
 80090d2:	bf00      	nop
 80090d4:	3714      	adds	r7, #20
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	e000e3f0 	.word	0xe000e3f0
 80090e4:	20001470 	.word	0x20001470
 80090e8:	e000ed0c 	.word	0xe000ed0c
 80090ec:	20001474 	.word	0x20001474

080090f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b08a      	sub	sp, #40	; 0x28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80090f8:	2300      	movs	r3, #0
 80090fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80090fc:	f7fe fde6 	bl	8007ccc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009100:	4b57      	ldr	r3, [pc, #348]	; (8009260 <pvPortMalloc+0x170>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d101      	bne.n	800910c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009108:	f000 f90c 	bl	8009324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800910c:	4b55      	ldr	r3, [pc, #340]	; (8009264 <pvPortMalloc+0x174>)
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4013      	ands	r3, r2
 8009114:	2b00      	cmp	r3, #0
 8009116:	f040 808c 	bne.w	8009232 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d01c      	beq.n	800915a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009120:	2208      	movs	r2, #8
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4413      	add	r3, r2
 8009126:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f003 0307 	and.w	r3, r3, #7
 800912e:	2b00      	cmp	r3, #0
 8009130:	d013      	beq.n	800915a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f023 0307 	bic.w	r3, r3, #7
 8009138:	3308      	adds	r3, #8
 800913a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f003 0307 	and.w	r3, r3, #7
 8009142:	2b00      	cmp	r3, #0
 8009144:	d009      	beq.n	800915a <pvPortMalloc+0x6a>
 8009146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	617b      	str	r3, [r7, #20]
 8009158:	e7fe      	b.n	8009158 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d068      	beq.n	8009232 <pvPortMalloc+0x142>
 8009160:	4b41      	ldr	r3, [pc, #260]	; (8009268 <pvPortMalloc+0x178>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	429a      	cmp	r2, r3
 8009168:	d863      	bhi.n	8009232 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800916a:	4b40      	ldr	r3, [pc, #256]	; (800926c <pvPortMalloc+0x17c>)
 800916c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800916e:	4b3f      	ldr	r3, [pc, #252]	; (800926c <pvPortMalloc+0x17c>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009174:	e004      	b.n	8009180 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009178:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	429a      	cmp	r2, r3
 8009188:	d903      	bls.n	8009192 <pvPortMalloc+0xa2>
 800918a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1f1      	bne.n	8009176 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009192:	4b33      	ldr	r3, [pc, #204]	; (8009260 <pvPortMalloc+0x170>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009198:	429a      	cmp	r2, r3
 800919a:	d04a      	beq.n	8009232 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2208      	movs	r2, #8
 80091a2:	4413      	add	r3, r2
 80091a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	1ad2      	subs	r2, r2, r3
 80091b6:	2308      	movs	r3, #8
 80091b8:	005b      	lsls	r3, r3, #1
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d91e      	bls.n	80091fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4413      	add	r3, r2
 80091c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	f003 0307 	and.w	r3, r3, #7
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d009      	beq.n	80091e4 <pvPortMalloc+0xf4>
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	613b      	str	r3, [r7, #16]
 80091e2:	e7fe      	b.n	80091e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	685a      	ldr	r2, [r3, #4]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	1ad2      	subs	r2, r2, r3
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80091f6:	69b8      	ldr	r0, [r7, #24]
 80091f8:	f000 f8f6 	bl	80093e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80091fc:	4b1a      	ldr	r3, [pc, #104]	; (8009268 <pvPortMalloc+0x178>)
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	4a18      	ldr	r2, [pc, #96]	; (8009268 <pvPortMalloc+0x178>)
 8009208:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800920a:	4b17      	ldr	r3, [pc, #92]	; (8009268 <pvPortMalloc+0x178>)
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	4b18      	ldr	r3, [pc, #96]	; (8009270 <pvPortMalloc+0x180>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	429a      	cmp	r2, r3
 8009214:	d203      	bcs.n	800921e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009216:	4b14      	ldr	r3, [pc, #80]	; (8009268 <pvPortMalloc+0x178>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a15      	ldr	r2, [pc, #84]	; (8009270 <pvPortMalloc+0x180>)
 800921c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	4b10      	ldr	r3, [pc, #64]	; (8009264 <pvPortMalloc+0x174>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	431a      	orrs	r2, r3
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	2200      	movs	r2, #0
 8009230:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009232:	f7fe fd91 	bl	8007d58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	f003 0307 	and.w	r3, r3, #7
 800923c:	2b00      	cmp	r3, #0
 800923e:	d009      	beq.n	8009254 <pvPortMalloc+0x164>
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	60fb      	str	r3, [r7, #12]
 8009252:	e7fe      	b.n	8009252 <pvPortMalloc+0x162>
	return pvReturn;
 8009254:	69fb      	ldr	r3, [r7, #28]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3728      	adds	r7, #40	; 0x28
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	20002bf0 	.word	0x20002bf0
 8009264:	20002bfc 	.word	0x20002bfc
 8009268:	20002bf4 	.word	0x20002bf4
 800926c:	20002be8 	.word	0x20002be8
 8009270:	20002bf8 	.word	0x20002bf8

08009274 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d046      	beq.n	8009314 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009286:	2308      	movs	r3, #8
 8009288:	425b      	negs	r3, r3
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	4413      	add	r3, r2
 800928e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	685a      	ldr	r2, [r3, #4]
 8009298:	4b20      	ldr	r3, [pc, #128]	; (800931c <vPortFree+0xa8>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4013      	ands	r3, r2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d109      	bne.n	80092b6 <vPortFree+0x42>
 80092a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a6:	f383 8811 	msr	BASEPRI, r3
 80092aa:	f3bf 8f6f 	isb	sy
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	60fb      	str	r3, [r7, #12]
 80092b4:	e7fe      	b.n	80092b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d009      	beq.n	80092d2 <vPortFree+0x5e>
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	60bb      	str	r3, [r7, #8]
 80092d0:	e7fe      	b.n	80092d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	4b11      	ldr	r3, [pc, #68]	; (800931c <vPortFree+0xa8>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4013      	ands	r3, r2
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d019      	beq.n	8009314 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d115      	bne.n	8009314 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	4b0b      	ldr	r3, [pc, #44]	; (800931c <vPortFree+0xa8>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	43db      	mvns	r3, r3
 80092f2:	401a      	ands	r2, r3
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80092f8:	f7fe fce8 	bl	8007ccc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	4b07      	ldr	r3, [pc, #28]	; (8009320 <vPortFree+0xac>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4413      	add	r3, r2
 8009306:	4a06      	ldr	r2, [pc, #24]	; (8009320 <vPortFree+0xac>)
 8009308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800930a:	6938      	ldr	r0, [r7, #16]
 800930c:	f000 f86c 	bl	80093e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009310:	f7fe fd22 	bl	8007d58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009314:	bf00      	nop
 8009316:	3718      	adds	r7, #24
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20002bfc 	.word	0x20002bfc
 8009320:	20002bf4 	.word	0x20002bf4

08009324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800932a:	f241 7370 	movw	r3, #6000	; 0x1770
 800932e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009330:	4b27      	ldr	r3, [pc, #156]	; (80093d0 <prvHeapInit+0xac>)
 8009332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f003 0307 	and.w	r3, r3, #7
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00c      	beq.n	8009358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	3307      	adds	r3, #7
 8009342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f023 0307 	bic.w	r3, r3, #7
 800934a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	4a1f      	ldr	r2, [pc, #124]	; (80093d0 <prvHeapInit+0xac>)
 8009354:	4413      	add	r3, r2
 8009356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800935c:	4a1d      	ldr	r2, [pc, #116]	; (80093d4 <prvHeapInit+0xb0>)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009362:	4b1c      	ldr	r3, [pc, #112]	; (80093d4 <prvHeapInit+0xb0>)
 8009364:	2200      	movs	r2, #0
 8009366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	4413      	add	r3, r2
 800936e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009370:	2208      	movs	r2, #8
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	1a9b      	subs	r3, r3, r2
 8009376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f023 0307 	bic.w	r3, r3, #7
 800937e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	4a15      	ldr	r2, [pc, #84]	; (80093d8 <prvHeapInit+0xb4>)
 8009384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009386:	4b14      	ldr	r3, [pc, #80]	; (80093d8 <prvHeapInit+0xb4>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2200      	movs	r2, #0
 800938c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800938e:	4b12      	ldr	r3, [pc, #72]	; (80093d8 <prvHeapInit+0xb4>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2200      	movs	r2, #0
 8009394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	1ad2      	subs	r2, r2, r3
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093a4:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <prvHeapInit+0xb4>)
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	4a0a      	ldr	r2, [pc, #40]	; (80093dc <prvHeapInit+0xb8>)
 80093b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	4a09      	ldr	r2, [pc, #36]	; (80093e0 <prvHeapInit+0xbc>)
 80093ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093bc:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <prvHeapInit+0xc0>)
 80093be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093c2:	601a      	str	r2, [r3, #0]
}
 80093c4:	bf00      	nop
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	20001478 	.word	0x20001478
 80093d4:	20002be8 	.word	0x20002be8
 80093d8:	20002bf0 	.word	0x20002bf0
 80093dc:	20002bf8 	.word	0x20002bf8
 80093e0:	20002bf4 	.word	0x20002bf4
 80093e4:	20002bfc 	.word	0x20002bfc

080093e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093f0:	4b28      	ldr	r3, [pc, #160]	; (8009494 <prvInsertBlockIntoFreeList+0xac>)
 80093f2:	60fb      	str	r3, [r7, #12]
 80093f4:	e002      	b.n	80093fc <prvInsertBlockIntoFreeList+0x14>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	60fb      	str	r3, [r7, #12]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	429a      	cmp	r2, r3
 8009404:	d8f7      	bhi.n	80093f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	4413      	add	r3, r2
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	429a      	cmp	r2, r3
 8009416:	d108      	bne.n	800942a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	441a      	add	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	441a      	add	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	429a      	cmp	r2, r3
 800943c:	d118      	bne.n	8009470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	4b15      	ldr	r3, [pc, #84]	; (8009498 <prvInsertBlockIntoFreeList+0xb0>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	429a      	cmp	r2, r3
 8009448:	d00d      	beq.n	8009466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	685a      	ldr	r2, [r3, #4]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	441a      	add	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	e008      	b.n	8009478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009466:	4b0c      	ldr	r3, [pc, #48]	; (8009498 <prvInsertBlockIntoFreeList+0xb0>)
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	e003      	b.n	8009478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	429a      	cmp	r2, r3
 800947e:	d002      	beq.n	8009486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009486:	bf00      	nop
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	20002be8 	.word	0x20002be8
 8009498:	20002bf0 	.word	0x20002bf0

0800949c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80094a0:	2200      	movs	r2, #0
 80094a2:	4912      	ldr	r1, [pc, #72]	; (80094ec <MX_USB_DEVICE_Init+0x50>)
 80094a4:	4812      	ldr	r0, [pc, #72]	; (80094f0 <MX_USB_DEVICE_Init+0x54>)
 80094a6:	f7fc fa53 	bl	8005950 <USBD_Init>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80094b0:	f7f7 f89e 	bl	80005f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80094b4:	490f      	ldr	r1, [pc, #60]	; (80094f4 <MX_USB_DEVICE_Init+0x58>)
 80094b6:	480e      	ldr	r0, [pc, #56]	; (80094f0 <MX_USB_DEVICE_Init+0x54>)
 80094b8:	f7fc fa75 	bl	80059a6 <USBD_RegisterClass>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80094c2:	f7f7 f895 	bl	80005f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80094c6:	490c      	ldr	r1, [pc, #48]	; (80094f8 <MX_USB_DEVICE_Init+0x5c>)
 80094c8:	4809      	ldr	r0, [pc, #36]	; (80094f0 <MX_USB_DEVICE_Init+0x54>)
 80094ca:	f7fc f9a3 	bl	8005814 <USBD_CDC_RegisterInterface>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d001      	beq.n	80094d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80094d4:	f7f7 f88c 	bl	80005f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80094d8:	4805      	ldr	r0, [pc, #20]	; (80094f0 <MX_USB_DEVICE_Init+0x54>)
 80094da:	f7fc fa7e 	bl	80059da <USBD_Start>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80094e4:	f7f7 f884 	bl	80005f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80094e8:	bf00      	nop
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	20000130 	.word	0x20000130
 80094f0:	20002f4c 	.word	0x20002f4c
 80094f4:	20000018 	.word	0x20000018
 80094f8:	20000120 	.word	0x20000120

080094fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009500:	2200      	movs	r2, #0
 8009502:	4905      	ldr	r1, [pc, #20]	; (8009518 <CDC_Init_FS+0x1c>)
 8009504:	4805      	ldr	r0, [pc, #20]	; (800951c <CDC_Init_FS+0x20>)
 8009506:	f7fc f99c 	bl	8005842 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800950a:	4905      	ldr	r1, [pc, #20]	; (8009520 <CDC_Init_FS+0x24>)
 800950c:	4803      	ldr	r0, [pc, #12]	; (800951c <CDC_Init_FS+0x20>)
 800950e:	f7fc f9b2 	bl	8005876 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009512:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009514:	4618      	mov	r0, r3
 8009516:	bd80      	pop	{r7, pc}
 8009518:	200035f8 	.word	0x200035f8
 800951c:	20002f4c 	.word	0x20002f4c
 8009520:	20003210 	.word	0x20003210

08009524 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009524:	b480      	push	{r7}
 8009526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009528:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800952a:	4618      	mov	r0, r3
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	4603      	mov	r3, r0
 800953c:	6039      	str	r1, [r7, #0]
 800953e:	71fb      	strb	r3, [r7, #7]
 8009540:	4613      	mov	r3, r2
 8009542:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009544:	79fb      	ldrb	r3, [r7, #7]
 8009546:	2b23      	cmp	r3, #35	; 0x23
 8009548:	d84a      	bhi.n	80095e0 <CDC_Control_FS+0xac>
 800954a:	a201      	add	r2, pc, #4	; (adr r2, 8009550 <CDC_Control_FS+0x1c>)
 800954c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009550:	080095e1 	.word	0x080095e1
 8009554:	080095e1 	.word	0x080095e1
 8009558:	080095e1 	.word	0x080095e1
 800955c:	080095e1 	.word	0x080095e1
 8009560:	080095e1 	.word	0x080095e1
 8009564:	080095e1 	.word	0x080095e1
 8009568:	080095e1 	.word	0x080095e1
 800956c:	080095e1 	.word	0x080095e1
 8009570:	080095e1 	.word	0x080095e1
 8009574:	080095e1 	.word	0x080095e1
 8009578:	080095e1 	.word	0x080095e1
 800957c:	080095e1 	.word	0x080095e1
 8009580:	080095e1 	.word	0x080095e1
 8009584:	080095e1 	.word	0x080095e1
 8009588:	080095e1 	.word	0x080095e1
 800958c:	080095e1 	.word	0x080095e1
 8009590:	080095e1 	.word	0x080095e1
 8009594:	080095e1 	.word	0x080095e1
 8009598:	080095e1 	.word	0x080095e1
 800959c:	080095e1 	.word	0x080095e1
 80095a0:	080095e1 	.word	0x080095e1
 80095a4:	080095e1 	.word	0x080095e1
 80095a8:	080095e1 	.word	0x080095e1
 80095ac:	080095e1 	.word	0x080095e1
 80095b0:	080095e1 	.word	0x080095e1
 80095b4:	080095e1 	.word	0x080095e1
 80095b8:	080095e1 	.word	0x080095e1
 80095bc:	080095e1 	.word	0x080095e1
 80095c0:	080095e1 	.word	0x080095e1
 80095c4:	080095e1 	.word	0x080095e1
 80095c8:	080095e1 	.word	0x080095e1
 80095cc:	080095e1 	.word	0x080095e1
 80095d0:	080095e1 	.word	0x080095e1
 80095d4:	080095e1 	.word	0x080095e1
 80095d8:	080095e1 	.word	0x080095e1
 80095dc:	080095e1 	.word	0x080095e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80095e0:	bf00      	nop
  }

  return (USBD_OK);
 80095e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	4805      	ldr	r0, [pc, #20]	; (8009614 <CDC_Receive_FS+0x24>)
 80095fe:	f7fc f93a 	bl	8005876 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009602:	4804      	ldr	r0, [pc, #16]	; (8009614 <CDC_Receive_FS+0x24>)
 8009604:	f7fc f97a 	bl	80058fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009608:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800960a:	4618      	mov	r0, r3
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	20002f4c 	.word	0x20002f4c

08009618 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009628:	4b0d      	ldr	r3, [pc, #52]	; (8009660 <CDC_Transmit_FS+0x48>)
 800962a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800962e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800963a:	2301      	movs	r3, #1
 800963c:	e00b      	b.n	8009656 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800963e:	887b      	ldrh	r3, [r7, #2]
 8009640:	461a      	mov	r2, r3
 8009642:	6879      	ldr	r1, [r7, #4]
 8009644:	4806      	ldr	r0, [pc, #24]	; (8009660 <CDC_Transmit_FS+0x48>)
 8009646:	f7fc f8fc 	bl	8005842 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800964a:	4805      	ldr	r0, [pc, #20]	; (8009660 <CDC_Transmit_FS+0x48>)
 800964c:	f7fc f927 	bl	800589e <USBD_CDC_TransmitPacket>
 8009650:	4603      	mov	r3, r0
 8009652:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009654:	7bfb      	ldrb	r3, [r7, #15]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	20002f4c 	.word	0x20002f4c

08009664 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	4603      	mov	r3, r0
 800966c:	6039      	str	r1, [r7, #0]
 800966e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	2212      	movs	r2, #18
 8009674:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009676:	4b03      	ldr	r3, [pc, #12]	; (8009684 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009678:	4618      	mov	r0, r3
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	2000014c 	.word	0x2000014c

08009688 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	6039      	str	r1, [r7, #0]
 8009692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2204      	movs	r2, #4
 8009698:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800969a:	4b03      	ldr	r3, [pc, #12]	; (80096a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800969c:	4618      	mov	r0, r3
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr
 80096a8:	20000160 	.word	0x20000160

080096ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	6039      	str	r1, [r7, #0]
 80096b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096b8:	79fb      	ldrb	r3, [r7, #7]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d105      	bne.n	80096ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	4907      	ldr	r1, [pc, #28]	; (80096e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80096c2:	4808      	ldr	r0, [pc, #32]	; (80096e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80096c4:	f7fd f8fa 	bl	80068bc <USBD_GetString>
 80096c8:	e004      	b.n	80096d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	4904      	ldr	r1, [pc, #16]	; (80096e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80096ce:	4805      	ldr	r0, [pc, #20]	; (80096e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80096d0:	f7fd f8f4 	bl	80068bc <USBD_GetString>
  }
  return USBD_StrDesc;
 80096d4:	4b02      	ldr	r3, [pc, #8]	; (80096e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	200039e0 	.word	0x200039e0
 80096e4:	08009e84 	.word	0x08009e84

080096e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	4603      	mov	r3, r0
 80096f0:	6039      	str	r1, [r7, #0]
 80096f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	4904      	ldr	r1, [pc, #16]	; (8009708 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80096f8:	4804      	ldr	r0, [pc, #16]	; (800970c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80096fa:	f7fd f8df 	bl	80068bc <USBD_GetString>
  return USBD_StrDesc;
 80096fe:	4b02      	ldr	r3, [pc, #8]	; (8009708 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	200039e0 	.word	0x200039e0
 800970c:	08009e9c 	.word	0x08009e9c

08009710 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	4603      	mov	r3, r0
 8009718:	6039      	str	r1, [r7, #0]
 800971a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	221a      	movs	r2, #26
 8009720:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009722:	f000 f843 	bl	80097ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009726:	4b02      	ldr	r3, [pc, #8]	; (8009730 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009728:	4618      	mov	r0, r3
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	20000164 	.word	0x20000164

08009734 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	4603      	mov	r3, r0
 800973c:	6039      	str	r1, [r7, #0]
 800973e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009740:	79fb      	ldrb	r3, [r7, #7]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d105      	bne.n	8009752 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	4907      	ldr	r1, [pc, #28]	; (8009768 <USBD_FS_ConfigStrDescriptor+0x34>)
 800974a:	4808      	ldr	r0, [pc, #32]	; (800976c <USBD_FS_ConfigStrDescriptor+0x38>)
 800974c:	f7fd f8b6 	bl	80068bc <USBD_GetString>
 8009750:	e004      	b.n	800975c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	4904      	ldr	r1, [pc, #16]	; (8009768 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009756:	4805      	ldr	r0, [pc, #20]	; (800976c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009758:	f7fd f8b0 	bl	80068bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800975c:	4b02      	ldr	r3, [pc, #8]	; (8009768 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800975e:	4618      	mov	r0, r3
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	200039e0 	.word	0x200039e0
 800976c:	08009eb0 	.word	0x08009eb0

08009770 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	6039      	str	r1, [r7, #0]
 800977a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d105      	bne.n	800978e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009782:	683a      	ldr	r2, [r7, #0]
 8009784:	4907      	ldr	r1, [pc, #28]	; (80097a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009786:	4808      	ldr	r0, [pc, #32]	; (80097a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009788:	f7fd f898 	bl	80068bc <USBD_GetString>
 800978c:	e004      	b.n	8009798 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	4904      	ldr	r1, [pc, #16]	; (80097a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009792:	4805      	ldr	r0, [pc, #20]	; (80097a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009794:	f7fd f892 	bl	80068bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009798:	4b02      	ldr	r3, [pc, #8]	; (80097a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	200039e0 	.word	0x200039e0
 80097a8:	08009ebc 	.word	0x08009ebc

080097ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80097b2:	4b0f      	ldr	r3, [pc, #60]	; (80097f0 <Get_SerialNum+0x44>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80097b8:	4b0e      	ldr	r3, [pc, #56]	; (80097f4 <Get_SerialNum+0x48>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80097be:	4b0e      	ldr	r3, [pc, #56]	; (80097f8 <Get_SerialNum+0x4c>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4413      	add	r3, r2
 80097ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d009      	beq.n	80097e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80097d2:	2208      	movs	r2, #8
 80097d4:	4909      	ldr	r1, [pc, #36]	; (80097fc <Get_SerialNum+0x50>)
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f000 f814 	bl	8009804 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80097dc:	2204      	movs	r2, #4
 80097de:	4908      	ldr	r1, [pc, #32]	; (8009800 <Get_SerialNum+0x54>)
 80097e0:	68b8      	ldr	r0, [r7, #8]
 80097e2:	f000 f80f 	bl	8009804 <IntToUnicode>
  }
}
 80097e6:	bf00      	nop
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	1ffff7ac 	.word	0x1ffff7ac
 80097f4:	1ffff7b0 	.word	0x1ffff7b0
 80097f8:	1ffff7b4 	.word	0x1ffff7b4
 80097fc:	20000166 	.word	0x20000166
 8009800:	20000176 	.word	0x20000176

08009804 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009804:	b480      	push	{r7}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	4613      	mov	r3, r2
 8009810:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009812:	2300      	movs	r3, #0
 8009814:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009816:	2300      	movs	r3, #0
 8009818:	75fb      	strb	r3, [r7, #23]
 800981a:	e027      	b.n	800986c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	0f1b      	lsrs	r3, r3, #28
 8009820:	2b09      	cmp	r3, #9
 8009822:	d80b      	bhi.n	800983c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	0f1b      	lsrs	r3, r3, #28
 8009828:	b2da      	uxtb	r2, r3
 800982a:	7dfb      	ldrb	r3, [r7, #23]
 800982c:	005b      	lsls	r3, r3, #1
 800982e:	4619      	mov	r1, r3
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	440b      	add	r3, r1
 8009834:	3230      	adds	r2, #48	; 0x30
 8009836:	b2d2      	uxtb	r2, r2
 8009838:	701a      	strb	r2, [r3, #0]
 800983a:	e00a      	b.n	8009852 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	0f1b      	lsrs	r3, r3, #28
 8009840:	b2da      	uxtb	r2, r3
 8009842:	7dfb      	ldrb	r3, [r7, #23]
 8009844:	005b      	lsls	r3, r3, #1
 8009846:	4619      	mov	r1, r3
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	440b      	add	r3, r1
 800984c:	3237      	adds	r2, #55	; 0x37
 800984e:	b2d2      	uxtb	r2, r2
 8009850:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	011b      	lsls	r3, r3, #4
 8009856:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009858:	7dfb      	ldrb	r3, [r7, #23]
 800985a:	005b      	lsls	r3, r3, #1
 800985c:	3301      	adds	r3, #1
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	4413      	add	r3, r2
 8009862:	2200      	movs	r2, #0
 8009864:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009866:	7dfb      	ldrb	r3, [r7, #23]
 8009868:	3301      	adds	r3, #1
 800986a:	75fb      	strb	r3, [r7, #23]
 800986c:	7dfa      	ldrb	r2, [r7, #23]
 800986e:	79fb      	ldrb	r3, [r7, #7]
 8009870:	429a      	cmp	r2, r3
 8009872:	d3d3      	bcc.n	800981c <IntToUnicode+0x18>
  }
}
 8009874:	bf00      	nop
 8009876:	371c      	adds	r7, #28
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a0d      	ldr	r2, [pc, #52]	; (80098c4 <HAL_PCD_MspInit+0x44>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d113      	bne.n	80098ba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009892:	4b0d      	ldr	r3, [pc, #52]	; (80098c8 <HAL_PCD_MspInit+0x48>)
 8009894:	69db      	ldr	r3, [r3, #28]
 8009896:	4a0c      	ldr	r2, [pc, #48]	; (80098c8 <HAL_PCD_MspInit+0x48>)
 8009898:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800989c:	61d3      	str	r3, [r2, #28]
 800989e:	4b0a      	ldr	r3, [pc, #40]	; (80098c8 <HAL_PCD_MspInit+0x48>)
 80098a0:	69db      	ldr	r3, [r3, #28]
 80098a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098a6:	60fb      	str	r3, [r7, #12]
 80098a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 80098aa:	2200      	movs	r2, #0
 80098ac:	2105      	movs	r1, #5
 80098ae:	2014      	movs	r0, #20
 80098b0:	f7f7 f90c 	bl	8000acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80098b4:	2014      	movs	r0, #20
 80098b6:	f7f7 f925 	bl	8000b04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80098ba:	bf00      	nop
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	40005c00 	.word	0x40005c00
 80098c8:	40021000 	.word	0x40021000

080098cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80098e0:	4619      	mov	r1, r3
 80098e2:	4610      	mov	r0, r2
 80098e4:	f7fc f8c2 	bl	8005a6c <USBD_LL_SetupStage>
}
 80098e8:	bf00      	nop
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8009902:	78fb      	ldrb	r3, [r7, #3]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	015b      	lsls	r3, r3, #5
 8009908:	4413      	add	r3, r2
 800990a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	78fb      	ldrb	r3, [r7, #3]
 8009912:	4619      	mov	r1, r3
 8009914:	f7fc f8f5 	bl	8005b02 <USBD_LL_DataOutStage>
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8009932:	78fb      	ldrb	r3, [r7, #3]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	015b      	lsls	r3, r3, #5
 8009938:	4413      	add	r3, r2
 800993a:	333c      	adds	r3, #60	; 0x3c
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	78fb      	ldrb	r3, [r7, #3]
 8009940:	4619      	mov	r1, r3
 8009942:	f7fc f94f 	bl	8005be4 <USBD_LL_DataInStage>
}
 8009946:	bf00      	nop
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b082      	sub	sp, #8
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800995c:	4618      	mov	r0, r3
 800995e:	f7fc fa62 	bl	8005e26 <USBD_LL_SOF>
}
 8009962:	bf00      	nop
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800996a:	b580      	push	{r7, lr}
 800996c:	b084      	sub	sp, #16
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009972:	2301      	movs	r3, #1
 8009974:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	2b02      	cmp	r3, #2
 800997c:	d001      	beq.n	8009982 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800997e:	f7f6 fe37 	bl	80005f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009988:	7bfa      	ldrb	r2, [r7, #15]
 800998a:	4611      	mov	r1, r2
 800998c:	4618      	mov	r0, r3
 800998e:	f7fc fa0f 	bl	8005db0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009998:	4618      	mov	r0, r3
 800999a:	f7fc f9c8 	bl	8005d2e <USBD_LL_Reset>
}
 800999e:	bf00      	nop
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
	...

080099a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fc fa0a 	bl	8005dd0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d005      	beq.n	80099d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099c4:	4b04      	ldr	r3, [pc, #16]	; (80099d8 <HAL_PCD_SuspendCallback+0x30>)
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	4a03      	ldr	r2, [pc, #12]	; (80099d8 <HAL_PCD_SuspendCallback+0x30>)
 80099ca:	f043 0306 	orr.w	r3, r3, #6
 80099ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	e000ed00 	.word	0xe000ed00

080099dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fc fa05 	bl	8005dfa <USBD_LL_Resume>
}
 80099f0:	bf00      	nop
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009a00:	4a29      	ldr	r2, [pc, #164]	; (8009aa8 <USBD_LL_Init+0xb0>)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a27      	ldr	r2, [pc, #156]	; (8009aa8 <USBD_LL_Init+0xb0>)
 8009a0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009a10:	4b25      	ldr	r3, [pc, #148]	; (8009aa8 <USBD_LL_Init+0xb0>)
 8009a12:	4a26      	ldr	r2, [pc, #152]	; (8009aac <USBD_LL_Init+0xb4>)
 8009a14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009a16:	4b24      	ldr	r3, [pc, #144]	; (8009aa8 <USBD_LL_Init+0xb0>)
 8009a18:	2208      	movs	r2, #8
 8009a1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009a1c:	4b22      	ldr	r3, [pc, #136]	; (8009aa8 <USBD_LL_Init+0xb0>)
 8009a1e:	2202      	movs	r2, #2
 8009a20:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a22:	4b21      	ldr	r3, [pc, #132]	; (8009aa8 <USBD_LL_Init+0xb0>)
 8009a24:	2202      	movs	r2, #2
 8009a26:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009a28:	4b1f      	ldr	r3, [pc, #124]	; (8009aa8 <USBD_LL_Init+0xb0>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009a2e:	4b1e      	ldr	r3, [pc, #120]	; (8009aa8 <USBD_LL_Init+0xb0>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009a34:	4b1c      	ldr	r3, [pc, #112]	; (8009aa8 <USBD_LL_Init+0xb0>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009a3a:	481b      	ldr	r0, [pc, #108]	; (8009aa8 <USBD_LL_Init+0xb0>)
 8009a3c:	f7f7 fa12 	bl	8000e64 <HAL_PCD_Init>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 8009a46:	f7f6 fdd3 	bl	80005f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a50:	2318      	movs	r3, #24
 8009a52:	2200      	movs	r2, #0
 8009a54:	2100      	movs	r1, #0
 8009a56:	f7f8 f869 	bl	8001b2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a60:	2358      	movs	r3, #88	; 0x58
 8009a62:	2200      	movs	r2, #0
 8009a64:	2180      	movs	r1, #128	; 0x80
 8009a66:	f7f8 f861 	bl	8001b2c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a70:	23c0      	movs	r3, #192	; 0xc0
 8009a72:	2200      	movs	r2, #0
 8009a74:	2181      	movs	r1, #129	; 0x81
 8009a76:	f7f8 f859 	bl	8001b2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a80:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009a84:	2200      	movs	r2, #0
 8009a86:	2101      	movs	r1, #1
 8009a88:	f7f8 f850 	bl	8001b2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a96:	2200      	movs	r2, #0
 8009a98:	2182      	movs	r1, #130	; 0x82
 8009a9a:	f7f8 f847 	bl	8001b2c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	20003be0 	.word	0x20003be0
 8009aac:	40005c00 	.word	0x40005c00

08009ab0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009abc:	2300      	movs	r3, #0
 8009abe:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7f7 fa80 	bl	8000fcc <HAL_PCD_Start>
 8009acc:	4603      	mov	r3, r0
 8009ace:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f000 f94c 	bl	8009d70 <USBD_Get_USB_Status>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009adc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b084      	sub	sp, #16
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	4608      	mov	r0, r1
 8009af0:	4611      	mov	r1, r2
 8009af2:	461a      	mov	r2, r3
 8009af4:	4603      	mov	r3, r0
 8009af6:	70fb      	strb	r3, [r7, #3]
 8009af8:	460b      	mov	r3, r1
 8009afa:	70bb      	strb	r3, [r7, #2]
 8009afc:	4613      	mov	r3, r2
 8009afe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b0e:	78bb      	ldrb	r3, [r7, #2]
 8009b10:	883a      	ldrh	r2, [r7, #0]
 8009b12:	78f9      	ldrb	r1, [r7, #3]
 8009b14:	f7f7 fba7 	bl	8001266 <HAL_PCD_EP_Open>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 f926 	bl	8009d70 <USBD_Get_USB_Status>
 8009b24:	4603      	mov	r3, r0
 8009b26:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b084      	sub	sp, #16
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b4c:	78fa      	ldrb	r2, [r7, #3]
 8009b4e:	4611      	mov	r1, r2
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7f7 fbe8 	bl	8001326 <HAL_PCD_EP_Close>
 8009b56:	4603      	mov	r3, r0
 8009b58:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f000 f907 	bl	8009d70 <USBD_Get_USB_Status>
 8009b62:	4603      	mov	r3, r0
 8009b64:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	460b      	mov	r3, r1
 8009b7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b80:	2300      	movs	r3, #0
 8009b82:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b8a:	78fa      	ldrb	r2, [r7, #3]
 8009b8c:	4611      	mov	r1, r2
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7f7 fc93 	bl	80014ba <HAL_PCD_EP_SetStall>
 8009b94:	4603      	mov	r3, r0
 8009b96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f000 f8e8 	bl	8009d70 <USBD_Get_USB_Status>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009ba4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b084      	sub	sp, #16
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bc8:	78fa      	ldrb	r2, [r7, #3]
 8009bca:	4611      	mov	r1, r2
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7f7 fcce 	bl	800156e <HAL_PCD_EP_ClrStall>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bd6:	7bfb      	ldrb	r3, [r7, #15]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f000 f8c9 	bl	8009d70 <USBD_Get_USB_Status>
 8009bde:	4603      	mov	r3, r0
 8009be0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8009be2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bfe:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	da08      	bge.n	8009c1a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009c08:	78fb      	ldrb	r3, [r7, #3]
 8009c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	015b      	lsls	r3, r3, #5
 8009c12:	4413      	add	r3, r2
 8009c14:	332a      	adds	r3, #42	; 0x2a
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	e008      	b.n	8009c2c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009c1a:	78fb      	ldrb	r3, [r7, #3]
 8009c1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	015b      	lsls	r3, r3, #5
 8009c24:	4413      	add	r3, r2
 8009c26:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009c2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	460b      	mov	r3, r1
 8009c42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c52:	78fa      	ldrb	r2, [r7, #3]
 8009c54:	4611      	mov	r1, r2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7f7 fae0 	bl	800121c <HAL_PCD_SetAddress>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 f884 	bl	8009d70 <USBD_Get_USB_Status>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009c6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b086      	sub	sp, #24
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	60f8      	str	r0, [r7, #12]
 8009c7e:	607a      	str	r2, [r7, #4]
 8009c80:	461a      	mov	r2, r3
 8009c82:	460b      	mov	r3, r1
 8009c84:	72fb      	strb	r3, [r7, #11]
 8009c86:	4613      	mov	r3, r2
 8009c88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c98:	893b      	ldrh	r3, [r7, #8]
 8009c9a:	7af9      	ldrb	r1, [r7, #11]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	f7f7 fbd3 	bl	8001448 <HAL_PCD_EP_Transmit>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ca6:	7dfb      	ldrb	r3, [r7, #23]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f000 f861 	bl	8009d70 <USBD_Get_USB_Status>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8009cb2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3718      	adds	r7, #24
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b086      	sub	sp, #24
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	607a      	str	r2, [r7, #4]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	460b      	mov	r3, r1
 8009cca:	72fb      	strb	r3, [r7, #11]
 8009ccc:	4613      	mov	r3, r2
 8009cce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009cde:	893b      	ldrh	r3, [r7, #8]
 8009ce0:	7af9      	ldrb	r1, [r7, #11]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	f7f7 fb61 	bl	80013aa <HAL_PCD_EP_Receive>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cec:	7dfb      	ldrb	r3, [r7, #23]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 f83e 	bl	8009d70 <USBD_Get_USB_Status>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8009cf8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3718      	adds	r7, #24
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b082      	sub	sp, #8
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d14:	78fa      	ldrb	r2, [r7, #3]
 8009d16:	4611      	mov	r1, r2
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7f7 fb80 	bl	800141e <HAL_PCD_EP_GetRxCount>
 8009d1e:	4603      	mov	r3, r0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009d30:	4b03      	ldr	r3, [pc, #12]	; (8009d40 <USBD_static_malloc+0x18>)
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	20002c00 	.word	0x20002c00

08009d44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]

}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	4603      	mov	r3, r0
 8009d78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d7e:	79fb      	ldrb	r3, [r7, #7]
 8009d80:	2b03      	cmp	r3, #3
 8009d82:	d817      	bhi.n	8009db4 <USBD_Get_USB_Status+0x44>
 8009d84:	a201      	add	r2, pc, #4	; (adr r2, 8009d8c <USBD_Get_USB_Status+0x1c>)
 8009d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8a:	bf00      	nop
 8009d8c:	08009d9d 	.word	0x08009d9d
 8009d90:	08009da3 	.word	0x08009da3
 8009d94:	08009da9 	.word	0x08009da9
 8009d98:	08009daf 	.word	0x08009daf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009da0:	e00b      	b.n	8009dba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009da2:	2302      	movs	r3, #2
 8009da4:	73fb      	strb	r3, [r7, #15]
    break;
 8009da6:	e008      	b.n	8009dba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009da8:	2301      	movs	r3, #1
 8009daa:	73fb      	strb	r3, [r7, #15]
    break;
 8009dac:	e005      	b.n	8009dba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009dae:	2302      	movs	r3, #2
 8009db0:	73fb      	strb	r3, [r7, #15]
    break;
 8009db2:	e002      	b.n	8009dba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009db4:	2302      	movs	r3, #2
 8009db6:	73fb      	strb	r3, [r7, #15]
    break;
 8009db8:	bf00      	nop
  }
  return usb_status;
 8009dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3714      	adds	r7, #20
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <__libc_init_array>:
 8009dc8:	b570      	push	{r4, r5, r6, lr}
 8009dca:	4e0d      	ldr	r6, [pc, #52]	; (8009e00 <__libc_init_array+0x38>)
 8009dcc:	4c0d      	ldr	r4, [pc, #52]	; (8009e04 <__libc_init_array+0x3c>)
 8009dce:	1ba4      	subs	r4, r4, r6
 8009dd0:	10a4      	asrs	r4, r4, #2
 8009dd2:	2500      	movs	r5, #0
 8009dd4:	42a5      	cmp	r5, r4
 8009dd6:	d109      	bne.n	8009dec <__libc_init_array+0x24>
 8009dd8:	4e0b      	ldr	r6, [pc, #44]	; (8009e08 <__libc_init_array+0x40>)
 8009dda:	4c0c      	ldr	r4, [pc, #48]	; (8009e0c <__libc_init_array+0x44>)
 8009ddc:	f000 f82c 	bl	8009e38 <_init>
 8009de0:	1ba4      	subs	r4, r4, r6
 8009de2:	10a4      	asrs	r4, r4, #2
 8009de4:	2500      	movs	r5, #0
 8009de6:	42a5      	cmp	r5, r4
 8009de8:	d105      	bne.n	8009df6 <__libc_init_array+0x2e>
 8009dea:	bd70      	pop	{r4, r5, r6, pc}
 8009dec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009df0:	4798      	blx	r3
 8009df2:	3501      	adds	r5, #1
 8009df4:	e7ee      	b.n	8009dd4 <__libc_init_array+0xc>
 8009df6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009dfa:	4798      	blx	r3
 8009dfc:	3501      	adds	r5, #1
 8009dfe:	e7f2      	b.n	8009de6 <__libc_init_array+0x1e>
 8009e00:	08009f04 	.word	0x08009f04
 8009e04:	08009f04 	.word	0x08009f04
 8009e08:	08009f04 	.word	0x08009f04
 8009e0c:	08009f08 	.word	0x08009f08

08009e10 <memcpy>:
 8009e10:	b510      	push	{r4, lr}
 8009e12:	1e43      	subs	r3, r0, #1
 8009e14:	440a      	add	r2, r1
 8009e16:	4291      	cmp	r1, r2
 8009e18:	d100      	bne.n	8009e1c <memcpy+0xc>
 8009e1a:	bd10      	pop	{r4, pc}
 8009e1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e24:	e7f7      	b.n	8009e16 <memcpy+0x6>

08009e26 <memset>:
 8009e26:	4402      	add	r2, r0
 8009e28:	4603      	mov	r3, r0
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d100      	bne.n	8009e30 <memset+0xa>
 8009e2e:	4770      	bx	lr
 8009e30:	f803 1b01 	strb.w	r1, [r3], #1
 8009e34:	e7f9      	b.n	8009e2a <memset+0x4>
	...

08009e38 <_init>:
 8009e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3a:	bf00      	nop
 8009e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e3e:	bc08      	pop	{r3}
 8009e40:	469e      	mov	lr, r3
 8009e42:	4770      	bx	lr

08009e44 <_fini>:
 8009e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e46:	bf00      	nop
 8009e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4a:	bc08      	pop	{r3}
 8009e4c:	469e      	mov	lr, r3
 8009e4e:	4770      	bx	lr
